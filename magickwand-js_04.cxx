/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#include "swig/magickwand-js.h"


// js_global_overloaded_function
Napi::Value _wrap_equal__SWIG_7(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Magick::PathQuadraticCurvetoArgs *arg1 = 0 ;
  Magick::PathQuadraticCurvetoArgs *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  // js_locks_list
  SWIG_Locks_List SWIG_locks;
  int result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    // js_guard
    SWIG_Guard SWIG_guard(SWIG_locks);
    
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_Magick__PathQuadraticCurvetoArgs,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "equal" "', argument " "1"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "equal" "', argument " "1"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    arg1 = reinterpret_cast< Magick::PathQuadraticCurvetoArgs * >(argp1);res2 = SWIG_ConvertPtr(info[1], &argp2, SWIGTYPE_p_Magick__PathQuadraticCurvetoArgs,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "equal" "', argument " "2"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "equal" "', argument " "2"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    arg2 = reinterpret_cast< Magick::PathQuadraticCurvetoArgs * >(argp2);
    
    
    // js_lock
    SWIG_guard.lock();
    
    
    
    {
      try {
        result = (int)Magick::operator ==((Magick::PathQuadraticCurvetoArgs const &)*arg1,(Magick::PathQuadraticCurvetoArgs const &)*arg2);
      } catch (const Magick::Exception &e) {
        do {
          SWIG_NAPI_Raise(env, e.what()); SWIG_fail; 
        } while (0);
        SWIG_fail;
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}



// js_global_overloaded_function
Napi::Value _wrap_notEqual__SWIG_7(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Magick::PathQuadraticCurvetoArgs *arg1 = 0 ;
  Magick::PathQuadraticCurvetoArgs *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  // js_locks_list
  SWIG_Locks_List SWIG_locks;
  int result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    // js_guard
    SWIG_Guard SWIG_guard(SWIG_locks);
    
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_Magick__PathQuadraticCurvetoArgs,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "notEqual" "', argument " "1"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "notEqual" "', argument " "1"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    arg1 = reinterpret_cast< Magick::PathQuadraticCurvetoArgs * >(argp1);res2 = SWIG_ConvertPtr(info[1], &argp2, SWIGTYPE_p_Magick__PathQuadraticCurvetoArgs,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "notEqual" "', argument " "2"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "notEqual" "', argument " "2"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    arg2 = reinterpret_cast< Magick::PathQuadraticCurvetoArgs * >(argp2);
    
    
    // js_lock
    SWIG_guard.lock();
    
    
    
    {
      try {
        result = (int)Magick::operator !=((Magick::PathQuadraticCurvetoArgs const &)*arg1,(Magick::PathQuadraticCurvetoArgs const &)*arg2);
      } catch (const Magick::Exception &e) {
        do {
          SWIG_NAPI_Raise(env, e.what()); SWIG_fail; 
        } while (0);
        SWIG_fail;
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}



// js_global_overloaded_function
Napi::Value _wrap_gt__SWIG_5(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Magick::PathQuadraticCurvetoArgs *arg1 = 0 ;
  Magick::PathQuadraticCurvetoArgs *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  // js_locks_list
  SWIG_Locks_List SWIG_locks;
  int result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    // js_guard
    SWIG_Guard SWIG_guard(SWIG_locks);
    
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_Magick__PathQuadraticCurvetoArgs,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gt" "', argument " "1"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gt" "', argument " "1"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    arg1 = reinterpret_cast< Magick::PathQuadraticCurvetoArgs * >(argp1);res2 = SWIG_ConvertPtr(info[1], &argp2, SWIGTYPE_p_Magick__PathQuadraticCurvetoArgs,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gt" "', argument " "2"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gt" "', argument " "2"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    arg2 = reinterpret_cast< Magick::PathQuadraticCurvetoArgs * >(argp2);
    
    
    // js_lock
    SWIG_guard.lock();
    
    
    
    {
      try {
        result = (int)Magick::operator >((Magick::PathQuadraticCurvetoArgs const &)*arg1,(Magick::PathQuadraticCurvetoArgs const &)*arg2);
      } catch (const Magick::Exception &e) {
        do {
          SWIG_NAPI_Raise(env, e.what()); SWIG_fail; 
        } while (0);
        SWIG_fail;
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}



// js_global_overloaded_function
Napi::Value _wrap_lt__SWIG_5(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Magick::PathQuadraticCurvetoArgs *arg1 = 0 ;
  Magick::PathQuadraticCurvetoArgs *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  // js_locks_list
  SWIG_Locks_List SWIG_locks;
  int result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    // js_guard
    SWIG_Guard SWIG_guard(SWIG_locks);
    
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_Magick__PathQuadraticCurvetoArgs,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lt" "', argument " "1"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lt" "', argument " "1"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    arg1 = reinterpret_cast< Magick::PathQuadraticCurvetoArgs * >(argp1);res2 = SWIG_ConvertPtr(info[1], &argp2, SWIGTYPE_p_Magick__PathQuadraticCurvetoArgs,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lt" "', argument " "2"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lt" "', argument " "2"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    arg2 = reinterpret_cast< Magick::PathQuadraticCurvetoArgs * >(argp2);
    
    
    // js_lock
    SWIG_guard.lock();
    
    
    
    {
      try {
        result = (int)Magick::operator <((Magick::PathQuadraticCurvetoArgs const &)*arg1,(Magick::PathQuadraticCurvetoArgs const &)*arg2);
      } catch (const Magick::Exception &e) {
        do {
          SWIG_NAPI_Raise(env, e.what()); SWIG_fail; 
        } while (0);
        SWIG_fail;
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}



// js_global_overloaded_function
Napi::Value _wrap_gte__SWIG_5(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Magick::PathQuadraticCurvetoArgs *arg1 = 0 ;
  Magick::PathQuadraticCurvetoArgs *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  // js_locks_list
  SWIG_Locks_List SWIG_locks;
  int result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    // js_guard
    SWIG_Guard SWIG_guard(SWIG_locks);
    
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_Magick__PathQuadraticCurvetoArgs,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gte" "', argument " "1"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gte" "', argument " "1"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    arg1 = reinterpret_cast< Magick::PathQuadraticCurvetoArgs * >(argp1);res2 = SWIG_ConvertPtr(info[1], &argp2, SWIGTYPE_p_Magick__PathQuadraticCurvetoArgs,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gte" "', argument " "2"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gte" "', argument " "2"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    arg2 = reinterpret_cast< Magick::PathQuadraticCurvetoArgs * >(argp2);
    
    
    // js_lock
    SWIG_guard.lock();
    
    
    
    {
      try {
        result = (int)Magick::operator >=((Magick::PathQuadraticCurvetoArgs const &)*arg1,(Magick::PathQuadraticCurvetoArgs const &)*arg2);
      } catch (const Magick::Exception &e) {
        do {
          SWIG_NAPI_Raise(env, e.what()); SWIG_fail; 
        } while (0);
        SWIG_fail;
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}



// js_global_overloaded_function
Napi::Value _wrap_lte__SWIG_5(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Magick::PathQuadraticCurvetoArgs *arg1 = 0 ;
  Magick::PathQuadraticCurvetoArgs *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  // js_locks_list
  SWIG_Locks_List SWIG_locks;
  int result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    // js_guard
    SWIG_Guard SWIG_guard(SWIG_locks);
    
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_Magick__PathQuadraticCurvetoArgs,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lte" "', argument " "1"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lte" "', argument " "1"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    arg1 = reinterpret_cast< Magick::PathQuadraticCurvetoArgs * >(argp1);res2 = SWIG_ConvertPtr(info[1], &argp2, SWIGTYPE_p_Magick__PathQuadraticCurvetoArgs,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lte" "', argument " "2"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lte" "', argument " "2"" of type '" "Magick::PathQuadraticCurvetoArgs const &""'"); 
    }
    arg2 = reinterpret_cast< Magick::PathQuadraticCurvetoArgs * >(argp2);
    
    
    // js_lock
    SWIG_guard.lock();
    
    
    
    {
      try {
        result = (int)Magick::operator <=((Magick::PathQuadraticCurvetoArgs const &)*arg1,(Magick::PathQuadraticCurvetoArgs const &)*arg2);
      } catch (const Magick::Exception &e) {
        do {
          SWIG_NAPI_Raise(env, e.what()); SWIG_fail; 
        } while (0);
        SWIG_fail;
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


/* Class: PathQuadraticCurvetoAbs (_Magick_PathQuadraticCurvetoAbs) */
// jsnapi_getclass
Napi::Function _Magick_PathQuadraticCurvetoAbs_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_PathQuadraticCurvetoAbs_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_PathQuadraticCurvetoAbs_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_PathQuadraticCurvetoAbs_inst>::DefineClass(env, "PathQuadraticCurvetoAbs", symbolTable);
}

void _Magick_PathQuadraticCurvetoAbs_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_PathQuadraticCurvetoAbs_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_PathQuadraticCurvetoAbs_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_VPathBase_templ<_Magick_VPathBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_VPathBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_VPathBase_templ::InstanceMethod("call",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_VPathBase_templ::InstanceMethod("copy",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_PathQuadraticCurvetoAbs_templ::InstanceMethod("call",
        &_Magick_PathQuadraticCurvetoAbs_templ::_wrap_Magick_PathQuadraticCurvetoAbs_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_PathQuadraticCurvetoAbs_templ::InstanceMethod("copy",
        &_Magick_PathQuadraticCurvetoAbs_templ::_wrap_Magick_PathQuadraticCurvetoAbs_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: PathQuadraticCurvetoRel (_Magick_PathQuadraticCurvetoRel) */
// jsnapi_getclass
Napi::Function _Magick_PathQuadraticCurvetoRel_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_PathQuadraticCurvetoRel_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_PathQuadraticCurvetoRel_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_PathQuadraticCurvetoRel_inst>::DefineClass(env, "PathQuadraticCurvetoRel", symbolTable);
}

void _Magick_PathQuadraticCurvetoRel_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_PathQuadraticCurvetoRel_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_PathQuadraticCurvetoRel_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_VPathBase_templ<_Magick_VPathBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_VPathBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_VPathBase_templ::InstanceMethod("call",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_VPathBase_templ::InstanceMethod("copy",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_PathQuadraticCurvetoRel_templ::InstanceMethod("call",
        &_Magick_PathQuadraticCurvetoRel_templ::_wrap_Magick_PathQuadraticCurvetoRel_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_PathQuadraticCurvetoRel_templ::InstanceMethod("copy",
        &_Magick_PathQuadraticCurvetoRel_templ::_wrap_Magick_PathQuadraticCurvetoRel_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: PathSmoothQuadraticCurvetoAbs (_Magick_PathSmoothQuadraticCurvetoAbs) */
// jsnapi_getclass
Napi::Function _Magick_PathSmoothQuadraticCurvetoAbs_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_PathSmoothQuadraticCurvetoAbs_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_PathSmoothQuadraticCurvetoAbs_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_PathSmoothQuadraticCurvetoAbs_inst>::DefineClass(env, "PathSmoothQuadraticCurvetoAbs", symbolTable);
}

void _Magick_PathSmoothQuadraticCurvetoAbs_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_PathSmoothQuadraticCurvetoAbs_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_PathSmoothQuadraticCurvetoAbs_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_VPathBase_templ<_Magick_VPathBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_VPathBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_VPathBase_templ::InstanceMethod("call",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_VPathBase_templ::InstanceMethod("copy",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_PathSmoothQuadraticCurvetoAbs_templ::InstanceMethod("call",
        &_Magick_PathSmoothQuadraticCurvetoAbs_templ::_wrap_Magick_PathSmoothQuadraticCurvetoAbs_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_PathSmoothQuadraticCurvetoAbs_templ::InstanceMethod("copy",
        &_Magick_PathSmoothQuadraticCurvetoAbs_templ::_wrap_Magick_PathSmoothQuadraticCurvetoAbs_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: PathSmoothQuadraticCurvetoRel (_Magick_PathSmoothQuadraticCurvetoRel) */
// jsnapi_getclass
Napi::Function _Magick_PathSmoothQuadraticCurvetoRel_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_PathSmoothQuadraticCurvetoRel_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_PathSmoothQuadraticCurvetoRel_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_PathSmoothQuadraticCurvetoRel_inst>::DefineClass(env, "PathSmoothQuadraticCurvetoRel", symbolTable);
}

void _Magick_PathSmoothQuadraticCurvetoRel_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_PathSmoothQuadraticCurvetoRel_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_PathSmoothQuadraticCurvetoRel_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_VPathBase_templ<_Magick_VPathBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_VPathBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_VPathBase_templ::InstanceMethod("call",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_VPathBase_templ::InstanceMethod("copy",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_PathSmoothQuadraticCurvetoRel_templ::InstanceMethod("call",
        &_Magick_PathSmoothQuadraticCurvetoRel_templ::_wrap_Magick_PathSmoothQuadraticCurvetoRel_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_PathSmoothQuadraticCurvetoRel_templ::InstanceMethod("copy",
        &_Magick_PathSmoothQuadraticCurvetoRel_templ::_wrap_Magick_PathSmoothQuadraticCurvetoRel_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: PathLinetoAbs (_Magick_PathLinetoAbs) */
// jsnapi_getclass
Napi::Function _Magick_PathLinetoAbs_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_PathLinetoAbs_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_PathLinetoAbs_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_PathLinetoAbs_inst>::DefineClass(env, "PathLinetoAbs", symbolTable);
}

void _Magick_PathLinetoAbs_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_PathLinetoAbs_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_PathLinetoAbs_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_VPathBase_templ<_Magick_VPathBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_VPathBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_VPathBase_templ::InstanceMethod("call",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_VPathBase_templ::InstanceMethod("copy",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_PathLinetoAbs_templ::InstanceMethod("call",
        &_Magick_PathLinetoAbs_templ::_wrap_Magick_PathLinetoAbs_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_PathLinetoAbs_templ::InstanceMethod("copy",
        &_Magick_PathLinetoAbs_templ::_wrap_Magick_PathLinetoAbs_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: PathLinetoRel (_Magick_PathLinetoRel) */
// jsnapi_getclass
Napi::Function _Magick_PathLinetoRel_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_PathLinetoRel_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_PathLinetoRel_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_PathLinetoRel_inst>::DefineClass(env, "PathLinetoRel", symbolTable);
}

void _Magick_PathLinetoRel_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_PathLinetoRel_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_PathLinetoRel_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_VPathBase_templ<_Magick_VPathBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_VPathBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_VPathBase_templ::InstanceMethod("call",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_VPathBase_templ::InstanceMethod("copy",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_PathLinetoRel_templ::InstanceMethod("call",
        &_Magick_PathLinetoRel_templ::_wrap_Magick_PathLinetoRel_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_PathLinetoRel_templ::InstanceMethod("copy",
        &_Magick_PathLinetoRel_templ::_wrap_Magick_PathLinetoRel_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: PathLinetoHorizontalAbs (_Magick_PathLinetoHorizontalAbs) */
// jsnapi_getclass
Napi::Function _Magick_PathLinetoHorizontalAbs_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_PathLinetoHorizontalAbs_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_PathLinetoHorizontalAbs_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_PathLinetoHorizontalAbs_inst>::DefineClass(env, "PathLinetoHorizontalAbs", symbolTable);
}

void _Magick_PathLinetoHorizontalAbs_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_PathLinetoHorizontalAbs_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_PathLinetoHorizontalAbs_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_VPathBase_templ<_Magick_VPathBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_VPathBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_VPathBase_templ::InstanceMethod("call",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_VPathBase_templ::InstanceMethod("copy",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_PathLinetoHorizontalAbs_templ::InstanceMethod("call",
        &_Magick_PathLinetoHorizontalAbs_templ::_wrap_Magick_PathLinetoHorizontalAbs_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_PathLinetoHorizontalAbs_templ::InstanceMethod("copy",
        &_Magick_PathLinetoHorizontalAbs_templ::_wrap_Magick_PathLinetoHorizontalAbs_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("x");
  members.insert({
    "x",
      _Magick_PathLinetoHorizontalAbs_templ::InstanceMethod("x",
        &_Magick_PathLinetoHorizontalAbs_templ::_wrap_PathLinetoHorizontalAbs__wrap_Magick_PathLinetoHorizontalAbs_x,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: PathLinetoHorizontalRel (_Magick_PathLinetoHorizontalRel) */
// jsnapi_getclass
Napi::Function _Magick_PathLinetoHorizontalRel_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_PathLinetoHorizontalRel_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_PathLinetoHorizontalRel_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_PathLinetoHorizontalRel_inst>::DefineClass(env, "PathLinetoHorizontalRel", symbolTable);
}

void _Magick_PathLinetoHorizontalRel_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_PathLinetoHorizontalRel_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_PathLinetoHorizontalRel_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_VPathBase_templ<_Magick_VPathBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_VPathBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_VPathBase_templ::InstanceMethod("call",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_VPathBase_templ::InstanceMethod("copy",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_PathLinetoHorizontalRel_templ::InstanceMethod("call",
        &_Magick_PathLinetoHorizontalRel_templ::_wrap_Magick_PathLinetoHorizontalRel_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_PathLinetoHorizontalRel_templ::InstanceMethod("copy",
        &_Magick_PathLinetoHorizontalRel_templ::_wrap_Magick_PathLinetoHorizontalRel_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("x");
  members.insert({
    "x",
      _Magick_PathLinetoHorizontalRel_templ::InstanceMethod("x",
        &_Magick_PathLinetoHorizontalRel_templ::_wrap_PathLinetoHorizontalRel__wrap_Magick_PathLinetoHorizontalRel_x,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: PathLinetoVerticalAbs (_Magick_PathLinetoVerticalAbs) */
// jsnapi_getclass
Napi::Function _Magick_PathLinetoVerticalAbs_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_PathLinetoVerticalAbs_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_PathLinetoVerticalAbs_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_PathLinetoVerticalAbs_inst>::DefineClass(env, "PathLinetoVerticalAbs", symbolTable);
}

void _Magick_PathLinetoVerticalAbs_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_PathLinetoVerticalAbs_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_PathLinetoVerticalAbs_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_VPathBase_templ<_Magick_VPathBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_VPathBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_VPathBase_templ::InstanceMethod("call",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_VPathBase_templ::InstanceMethod("copy",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_PathLinetoVerticalAbs_templ::InstanceMethod("call",
        &_Magick_PathLinetoVerticalAbs_templ::_wrap_Magick_PathLinetoVerticalAbs_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_PathLinetoVerticalAbs_templ::InstanceMethod("copy",
        &_Magick_PathLinetoVerticalAbs_templ::_wrap_Magick_PathLinetoVerticalAbs_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("y");
  members.insert({
    "y",
      _Magick_PathLinetoVerticalAbs_templ::InstanceMethod("y",
        &_Magick_PathLinetoVerticalAbs_templ::_wrap_PathLinetoVerticalAbs__wrap_Magick_PathLinetoVerticalAbs_y,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: PathLinetoVerticalRel (_Magick_PathLinetoVerticalRel) */
// jsnapi_getclass
Napi::Function _Magick_PathLinetoVerticalRel_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_PathLinetoVerticalRel_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_PathLinetoVerticalRel_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_PathLinetoVerticalRel_inst>::DefineClass(env, "PathLinetoVerticalRel", symbolTable);
}

void _Magick_PathLinetoVerticalRel_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_PathLinetoVerticalRel_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_PathLinetoVerticalRel_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_VPathBase_templ<_Magick_VPathBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_VPathBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_VPathBase_templ::InstanceMethod("call",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_VPathBase_templ::InstanceMethod("copy",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_PathLinetoVerticalRel_templ::InstanceMethod("call",
        &_Magick_PathLinetoVerticalRel_templ::_wrap_Magick_PathLinetoVerticalRel_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_PathLinetoVerticalRel_templ::InstanceMethod("copy",
        &_Magick_PathLinetoVerticalRel_templ::_wrap_Magick_PathLinetoVerticalRel_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("y");
  members.insert({
    "y",
      _Magick_PathLinetoVerticalRel_templ::InstanceMethod("y",
        &_Magick_PathLinetoVerticalRel_templ::_wrap_PathLinetoVerticalRel__wrap_Magick_PathLinetoVerticalRel_y,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: PathMovetoAbs (_Magick_PathMovetoAbs) */
// jsnapi_getclass
Napi::Function _Magick_PathMovetoAbs_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_PathMovetoAbs_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_PathMovetoAbs_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_PathMovetoAbs_inst>::DefineClass(env, "PathMovetoAbs", symbolTable);
}

void _Magick_PathMovetoAbs_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_PathMovetoAbs_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_PathMovetoAbs_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_VPathBase_templ<_Magick_VPathBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_VPathBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_VPathBase_templ::InstanceMethod("call",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_VPathBase_templ::InstanceMethod("copy",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_PathMovetoAbs_templ::InstanceMethod("call",
        &_Magick_PathMovetoAbs_templ::_wrap_Magick_PathMovetoAbs_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_PathMovetoAbs_templ::InstanceMethod("copy",
        &_Magick_PathMovetoAbs_templ::_wrap_Magick_PathMovetoAbs_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: PathMovetoRel (_Magick_PathMovetoRel) */
// jsnapi_getclass
Napi::Function _Magick_PathMovetoRel_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_PathMovetoRel_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_PathMovetoRel_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_PathMovetoRel_inst>::DefineClass(env, "PathMovetoRel", symbolTable);
}

void _Magick_PathMovetoRel_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_PathMovetoRel_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_PathMovetoRel_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_VPathBase_templ<_Magick_VPathBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_VPathBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_VPathBase_templ::InstanceMethod("call",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_VPathBase_templ::InstanceMethod("copy",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_PathMovetoRel_templ::InstanceMethod("call",
        &_Magick_PathMovetoRel_templ::_wrap_Magick_PathMovetoRel_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_PathMovetoRel_templ::InstanceMethod("copy",
        &_Magick_PathMovetoRel_templ::_wrap_Magick_PathMovetoRel_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: ErrorPolicy (_Magick_ErrorPolicy) */
// jsnapi_getclass
Napi::Function _Magick_ErrorPolicy_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_ErrorPolicy_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_ErrorPolicy_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_ErrorPolicy_inst>::DefineClass(env, "ErrorPolicy", symbolTable);
}

void _Magick_ErrorPolicy_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_ErrorPolicy_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_ErrorPolicy_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  
  /* add static class functions and variables */
  
}

/* Class: ErrorType (_Magick_ErrorType) */
// jsnapi_getclass
Napi::Function _Magick_ErrorType_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_ErrorType_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_ErrorType_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_ErrorType_inst>::DefineClass(env, "ErrorType", symbolTable);
}

void _Magick_ErrorType_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_ErrorType_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_ErrorType_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  
  /* add static class functions and variables */
  
}

/* Class: WarningPolicy (_Magick_WarningPolicy) */
// jsnapi_getclass
Napi::Function _Magick_WarningPolicy_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_WarningPolicy_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_WarningPolicy_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_WarningPolicy_inst>::DefineClass(env, "WarningPolicy", symbolTable);
}

void _Magick_WarningPolicy_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_WarningPolicy_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_WarningPolicy_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  
  /* add static class functions and variables */
  
}

/* Class: WarningType (_Magick_WarningType) */
// jsnapi_getclass
Napi::Function _Magick_WarningType_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_WarningType_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_WarningType_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_WarningType_inst>::DefineClass(env, "WarningType", symbolTable);
}

void _Magick_WarningType_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_WarningType_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_WarningType_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  
  /* add static class functions and variables */
  
}

/* Class: ChannelMoments (_Magick_ChannelMoments) */
// jsnapi_getclass
Napi::Function _Magick_ChannelMoments_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_ChannelMoments_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_ChannelMoments_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_ChannelMoments_inst>::DefineClass(env, "ChannelMoments", symbolTable);
}

void _Magick_ChannelMoments_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_ChannelMoments_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_ChannelMoments_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("centroidX");
  members.insert({
    "centroidX",
      _Magick_ChannelMoments_templ::InstanceMethod("centroidX",
        &_Magick_ChannelMoments_templ::_wrap_Magick_ChannelMoments_centroidX,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("centroidY");
  members.insert({
    "centroidY",
      _Magick_ChannelMoments_templ::InstanceMethod("centroidY",
        &_Magick_ChannelMoments_templ::_wrap_Magick_ChannelMoments_centroidY,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("channel");
  members.insert({
    "channel",
      _Magick_ChannelMoments_templ::InstanceMethod("channel",
        &_Magick_ChannelMoments_templ::_wrap_Magick_ChannelMoments_channel,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("ellipseAxisX");
  members.insert({
    "ellipseAxisX",
      _Magick_ChannelMoments_templ::InstanceMethod("ellipseAxisX",
        &_Magick_ChannelMoments_templ::_wrap_Magick_ChannelMoments_ellipseAxisX,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("ellipseAxisY");
  members.insert({
    "ellipseAxisY",
      _Magick_ChannelMoments_templ::InstanceMethod("ellipseAxisY",
        &_Magick_ChannelMoments_templ::_wrap_Magick_ChannelMoments_ellipseAxisY,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("ellipseAngle");
  members.insert({
    "ellipseAngle",
      _Magick_ChannelMoments_templ::InstanceMethod("ellipseAngle",
        &_Magick_ChannelMoments_templ::_wrap_Magick_ChannelMoments_ellipseAngle,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("ellipseEccentricity");
  members.insert({
    "ellipseEccentricity",
      _Magick_ChannelMoments_templ::InstanceMethod("ellipseEccentricity",
        &_Magick_ChannelMoments_templ::_wrap_Magick_ChannelMoments_ellipseEccentricity,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("ellipseIntensity");
  members.insert({
    "ellipseIntensity",
      _Magick_ChannelMoments_templ::InstanceMethod("ellipseIntensity",
        &_Magick_ChannelMoments_templ::_wrap_Magick_ChannelMoments_ellipseIntensity,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("huInvariants");
  members.insert({
    "huInvariants",
      _Magick_ChannelMoments_templ::InstanceMethod("huInvariants",
        &_Magick_ChannelMoments_templ::_wrap_Magick_ChannelMoments_huInvariants,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("isValid");
  members.insert({
    "isValid",
      _Magick_ChannelMoments_templ::InstanceMethod("isValid",
        &_Magick_ChannelMoments_templ::_wrap_Magick_ChannelMoments_isValid,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: ChannelPerceptualHash (_Magick_ChannelPerceptualHash) */
// jsnapi_getclass
Napi::Function _Magick_ChannelPerceptualHash_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_ChannelPerceptualHash_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_ChannelPerceptualHash_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_ChannelPerceptualHash_inst>::DefineClass(env, "ChannelPerceptualHash", symbolTable);
}

void _Magick_ChannelPerceptualHash_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_ChannelPerceptualHash_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_ChannelPerceptualHash_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("toString");
  members.insert({
    "toString",
      _Magick_ChannelPerceptualHash_templ::InstanceMethod("toString",
        &_Magick_ChannelPerceptualHash_templ::_wrap_Magick_ChannelPerceptualHash_toString,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("channel");
  members.insert({
    "channel",
      _Magick_ChannelPerceptualHash_templ::InstanceMethod("channel",
        &_Magick_ChannelPerceptualHash_templ::_wrap_Magick_ChannelPerceptualHash_channel,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("isValid");
  members.insert({
    "isValid",
      _Magick_ChannelPerceptualHash_templ::InstanceMethod("isValid",
        &_Magick_ChannelPerceptualHash_templ::_wrap_Magick_ChannelPerceptualHash_isValid,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("sumSquaredDifferences");
  members.insert({
    "sumSquaredDifferences",
      _Magick_ChannelPerceptualHash_templ::InstanceMethod("sumSquaredDifferences",
        &_Magick_ChannelPerceptualHash_templ::_wrap_Magick_ChannelPerceptualHash_sumSquaredDifferences,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("srgbHuPhash");
  members.insert({
    "srgbHuPhash",
      _Magick_ChannelPerceptualHash_templ::InstanceMethod("srgbHuPhash",
        &_Magick_ChannelPerceptualHash_templ::_wrap_Magick_ChannelPerceptualHash_srgbHuPhash,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("hclpHuPhash");
  members.insert({
    "hclpHuPhash",
      _Magick_ChannelPerceptualHash_templ::InstanceMethod("hclpHuPhash",
        &_Magick_ChannelPerceptualHash_templ::_wrap_Magick_ChannelPerceptualHash_hclpHuPhash,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: ChannelStatistics (_Magick_ChannelStatistics) */
// jsnapi_getclass
Napi::Function _Magick_ChannelStatistics_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_ChannelStatistics_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_ChannelStatistics_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_ChannelStatistics_inst>::DefineClass(env, "ChannelStatistics", symbolTable);
}

void _Magick_ChannelStatistics_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_ChannelStatistics_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_ChannelStatistics_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("area");
  members.insert({
    "area",
      _Magick_ChannelStatistics_templ::InstanceMethod("area",
        &_Magick_ChannelStatistics_templ::_wrap_Magick_ChannelStatistics_area,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("channel");
  members.insert({
    "channel",
      _Magick_ChannelStatistics_templ::InstanceMethod("channel",
        &_Magick_ChannelStatistics_templ::_wrap_Magick_ChannelStatistics_channel,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("depth");
  members.insert({
    "depth",
      _Magick_ChannelStatistics_templ::InstanceMethod("depth",
        &_Magick_ChannelStatistics_templ::_wrap_Magick_ChannelStatistics_depth,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("entropy");
  members.insert({
    "entropy",
      _Magick_ChannelStatistics_templ::InstanceMethod("entropy",
        &_Magick_ChannelStatistics_templ::_wrap_Magick_ChannelStatistics_entropy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("isValid");
  members.insert({
    "isValid",
      _Magick_ChannelStatistics_templ::InstanceMethod("isValid",
        &_Magick_ChannelStatistics_templ::_wrap_Magick_ChannelStatistics_isValid,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("kurtosis");
  members.insert({
    "kurtosis",
      _Magick_ChannelStatistics_templ::InstanceMethod("kurtosis",
        &_Magick_ChannelStatistics_templ::_wrap_Magick_ChannelStatistics_kurtosis,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("maxima");
  members.insert({
    "maxima",
      _Magick_ChannelStatistics_templ::InstanceMethod("maxima",
        &_Magick_ChannelStatistics_templ::_wrap_Magick_ChannelStatistics_maxima,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("mean");
  members.insert({
    "mean",
      _Magick_ChannelStatistics_templ::InstanceMethod("mean",
        &_Magick_ChannelStatistics_templ::_wrap_Magick_ChannelStatistics_mean,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("minima");
  members.insert({
    "minima",
      _Magick_ChannelStatistics_templ::InstanceMethod("minima",
        &_Magick_ChannelStatistics_templ::_wrap_Magick_ChannelStatistics_minima,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("skewness");
  members.insert({
    "skewness",
      _Magick_ChannelStatistics_templ::InstanceMethod("skewness",
        &_Magick_ChannelStatistics_templ::_wrap_Magick_ChannelStatistics_skewness,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("standardDeviation");
  members.insert({
    "standardDeviation",
      _Magick_ChannelStatistics_templ::InstanceMethod("standardDeviation",
        &_Magick_ChannelStatistics_templ::_wrap_Magick_ChannelStatistics_standardDeviation,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("sum");
  members.insert({
    "sum",
      _Magick_ChannelStatistics_templ::InstanceMethod("sum",
        &_Magick_ChannelStatistics_templ::_wrap_Magick_ChannelStatistics_sum,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("sumCubed");
  members.insert({
    "sumCubed",
      _Magick_ChannelStatistics_templ::InstanceMethod("sumCubed",
        &_Magick_ChannelStatistics_templ::_wrap_Magick_ChannelStatistics_sumCubed,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("sumFourthPower");
  members.insert({
    "sumFourthPower",
      _Magick_ChannelStatistics_templ::InstanceMethod("sumFourthPower",
        &_Magick_ChannelStatistics_templ::_wrap_Magick_ChannelStatistics_sumFourthPower,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("sumSquared");
  members.insert({
    "sumSquared",
      _Magick_ChannelStatistics_templ::InstanceMethod("sumSquared",
        &_Magick_ChannelStatistics_templ::_wrap_Magick_ChannelStatistics_sumSquared,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("variance");
  members.insert({
    "variance",
      _Magick_ChannelStatistics_templ::InstanceMethod("variance",
        &_Magick_ChannelStatistics_templ::_wrap_Magick_ChannelStatistics_variance,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: ImageMoments (_Magick_ImageMoments) */
// jsnapi_getclass
Napi::Function _Magick_ImageMoments_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_ImageMoments_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_ImageMoments_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_ImageMoments_inst>::DefineClass(env, "ImageMoments", symbolTable);
}

void _Magick_ImageMoments_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_ImageMoments_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_ImageMoments_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("channel");
  members.insert({
    "channel",
      _Magick_ImageMoments_templ::InstanceMethod("channel",
        &_Magick_ImageMoments_templ::_wrap_Magick_ImageMoments_channel,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: ImagePerceptualHash (_Magick_ImagePerceptualHash) */
// jsnapi_getclass
Napi::Function _Magick_ImagePerceptualHash_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_ImagePerceptualHash_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_ImagePerceptualHash_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_ImagePerceptualHash_inst>::DefineClass(env, "ImagePerceptualHash", symbolTable);
}

void _Magick_ImagePerceptualHash_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_ImagePerceptualHash_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_ImagePerceptualHash_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("toString");
  members.insert({
    "toString",
      _Magick_ImagePerceptualHash_templ::InstanceMethod("toString",
        &_Magick_ImagePerceptualHash_templ::_wrap_Magick_ImagePerceptualHash_toString,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("channel");
  members.insert({
    "channel",
      _Magick_ImagePerceptualHash_templ::InstanceMethod("channel",
        &_Magick_ImagePerceptualHash_templ::_wrap_Magick_ImagePerceptualHash_channel,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("isValid");
  members.insert({
    "isValid",
      _Magick_ImagePerceptualHash_templ::InstanceMethod("isValid",
        &_Magick_ImagePerceptualHash_templ::_wrap_Magick_ImagePerceptualHash_isValid,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("sumSquaredDifferences");
  members.insert({
    "sumSquaredDifferences",
      _Magick_ImagePerceptualHash_templ::InstanceMethod("sumSquaredDifferences",
        &_Magick_ImagePerceptualHash_templ::_wrap_Magick_ImagePerceptualHash_sumSquaredDifferences,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: ImageStatistics (_Magick_ImageStatistics) */
// jsnapi_getclass
Napi::Function _Magick_ImageStatistics_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_ImageStatistics_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_ImageStatistics_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_ImageStatistics_inst>::DefineClass(env, "ImageStatistics", symbolTable);
}

void _Magick_ImageStatistics_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_ImageStatistics_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_ImageStatistics_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("channel");
  members.insert({
    "channel",
      _Magick_ImageStatistics_templ::InstanceMethod("channel",
        &_Magick_ImageStatistics_templ::_wrap_Magick_ImageStatistics_channel,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: TypeMetric (_Magick_TypeMetric) */
// jsnapi_getclass
Napi::Function _Magick_TypeMetric_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_TypeMetric_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_TypeMetric_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_TypeMetric_inst>::DefineClass(env, "TypeMetric", symbolTable);
}

void _Magick_TypeMetric_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_TypeMetric_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_TypeMetric_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("ascent");
  members.insert({
    "ascent",
      _Magick_TypeMetric_templ::InstanceMethod("ascent",
        &_Magick_TypeMetric_templ::_wrap_Magick_TypeMetric_ascent,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("bounds");
  members.insert({
    "bounds",
      _Magick_TypeMetric_templ::InstanceMethod("bounds",
        &_Magick_TypeMetric_templ::_wrap_Magick_TypeMetric_bounds,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("descent");
  members.insert({
    "descent",
      _Magick_TypeMetric_templ::InstanceMethod("descent",
        &_Magick_TypeMetric_templ::_wrap_Magick_TypeMetric_descent,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("maxHorizontalAdvance");
  members.insert({
    "maxHorizontalAdvance",
      _Magick_TypeMetric_templ::InstanceMethod("maxHorizontalAdvance",
        &_Magick_TypeMetric_templ::_wrap_Magick_TypeMetric_maxHorizontalAdvance,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("origin");
  members.insert({
    "origin",
      _Magick_TypeMetric_templ::InstanceMethod("origin",
        &_Magick_TypeMetric_templ::_wrap_Magick_TypeMetric_origin,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("pixelsPerEm");
  members.insert({
    "pixelsPerEm",
      _Magick_TypeMetric_templ::InstanceMethod("pixelsPerEm",
        &_Magick_TypeMetric_templ::_wrap_Magick_TypeMetric_pixelsPerEm,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("textHeight");
  members.insert({
    "textHeight",
      _Magick_TypeMetric_templ::InstanceMethod("textHeight",
        &_Magick_TypeMetric_templ::_wrap_Magick_TypeMetric_textHeight,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("textWidth");
  members.insert({
    "textWidth",
      _Magick_TypeMetric_templ::InstanceMethod("textWidth",
        &_Magick_TypeMetric_templ::_wrap_Magick_TypeMetric_textWidth,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("underlinePosition");
  members.insert({
    "underlinePosition",
      _Magick_TypeMetric_templ::InstanceMethod("underlinePosition",
        &_Magick_TypeMetric_templ::_wrap_Magick_TypeMetric_underlinePosition,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("underlineThickness");
  members.insert({
    "underlineThickness",
      _Magick_TypeMetric_templ::InstanceMethod("underlineThickness",
        &_Magick_TypeMetric_templ::_wrap_Magick_TypeMetric_underlineThickness,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}


// js_global_setter
void _wrap_borderGeometryDefault_set(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value value = info.Length() > 0 ? info[0] : Napi::Value();
  Napi::Value jsresult;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  // js_locks_list
  SWIG_Locks_List SWIG_locks;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    // js_guard
    SWIG_Guard SWIG_guard(SWIG_locks);
    
    res1 = SWIG_AsCharPtrAndSize(value, &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "borderGeometryDefault_set" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    
    // js_lock
    SWIG_guard.lock();
    
    if (arg1) {
      size_t size = strlen(arg1) + 1;
      Magick::borderGeometryDefault = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg1, sizeof(char)*(size)));
    } else {
      Magick::borderGeometryDefault = 0;
    }
    
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
#endif
  return;
}



// js_global_getter
Napi::Value _wrap_borderGeometryDefault_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  char *result = 0 ;
  
  // js_locks_list
  SWIG_Locks_List SWIG_locks;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    // js_guard
    SWIG_Guard SWIG_guard(SWIG_locks);
    
    
    
    // js_lock
    SWIG_guard.lock();
    
    result = (char *)Magick::borderGeometryDefault;
    
    jsresult = SWIG_FromCharPtr((const char *)result);
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}



// js_global_setter
void _wrap_frameGeometryDefault_set(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value value = info.Length() > 0 ? info[0] : Napi::Value();
  Napi::Value jsresult;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  // js_locks_list
  SWIG_Locks_List SWIG_locks;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    // js_guard
    SWIG_Guard SWIG_guard(SWIG_locks);
    
    res1 = SWIG_AsCharPtrAndSize(value, &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frameGeometryDefault_set" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    
    // js_lock
    SWIG_guard.lock();
    
    if (arg1) {
      size_t size = strlen(arg1) + 1;
      Magick::frameGeometryDefault = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg1, sizeof(char)*(size)));
    } else {
      Magick::frameGeometryDefault = 0;
    }
    
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
#endif
  return;
}



// js_global_getter
Napi::Value _wrap_frameGeometryDefault_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  char *result = 0 ;
  
  // js_locks_list
  SWIG_Locks_List SWIG_locks;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    // js_guard
    SWIG_Guard SWIG_guard(SWIG_locks);
    
    
    
    // js_lock
    SWIG_guard.lock();
    
    result = (char *)Magick::frameGeometryDefault;
    
    jsresult = SWIG_FromCharPtr((const char *)result);
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}



// js_global_setter
void _wrap_raiseGeometryDefault_set(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value value = info.Length() > 0 ? info[0] : Napi::Value();
  Napi::Value jsresult;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  // js_locks_list
  SWIG_Locks_List SWIG_locks;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    // js_guard
    SWIG_Guard SWIG_guard(SWIG_locks);
    
    res1 = SWIG_AsCharPtrAndSize(value, &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raiseGeometryDefault_set" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    
    // js_lock
    SWIG_guard.lock();
    
    if (arg1) {
      size_t size = strlen(arg1) + 1;
      Magick::raiseGeometryDefault = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg1, sizeof(char)*(size)));
    } else {
      Magick::raiseGeometryDefault = 0;
    }
    
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
#endif
  return;
}



// js_global_getter
Napi::Value _wrap_raiseGeometryDefault_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  char *result = 0 ;
  
  // js_locks_list
  SWIG_Locks_List SWIG_locks;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    // js_guard
    SWIG_Guard SWIG_guard(SWIG_locks);
    
    
    
    // js_lock
    SWIG_guard.lock();
    
    result = (char *)Magick::raiseGeometryDefault;
    
    jsresult = SWIG_FromCharPtr((const char *)result);
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}



// js_global_overloaded_function
Napi::Value _wrap_equal__SWIG_8(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Magick::Image *arg1 = 0 ;
  Magick::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  // js_locks_list
  SWIG_Locks_List SWIG_locks;
  int result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    // js_guard
    SWIG_Guard SWIG_guard(SWIG_locks);
    
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_Magick__Image,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "equal" "', argument " "1"" of type '" "Magick::Image const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "equal" "', argument " "1"" of type '" "Magick::Image const &""'"); 
    }
    arg1 = reinterpret_cast< Magick::Image * >(argp1);res2 = SWIG_ConvertPtr(info[1], &argp2, SWIGTYPE_p_Magick__Image,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "equal" "', argument " "2"" of type '" "Magick::Image const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "equal" "', argument " "2"" of type '" "Magick::Image const &""'"); 
    }
    arg2 = reinterpret_cast< Magick::Image * >(argp2);
    {
      SWIG_NAPI_ObjectWrap_inst *ow = SWIG_NULLPTR;
      if (info[0].IsObject()) {
        Napi::Object obj;
        NAPI_CHECK_RESULT(info[0].ToObject(), obj);
        if (SWIG_NAPI_IsWrappedObject(env, obj)) {
          ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj);
          if (ow != SWIG_NULLPTR && SWIG_locks.count(ow) == 0) {
            SWIG_locks.insert({
              reinterpret_cast<void*>(ow), {
                [ow](){
                  ow->lock();
                }, [ow](){
                  ow->unlock();
                }
                }
            });
          }
        }
      }
    }
    {
      SWIG_NAPI_ObjectWrap_inst *ow = SWIG_NULLPTR;
      if (info[1].IsObject()) {
        Napi::Object obj;
        NAPI_CHECK_RESULT(info[1].ToObject(), obj);
        if (SWIG_NAPI_IsWrappedObject(env, obj)) {
          ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj);
          if (ow != SWIG_NULLPTR && SWIG_locks.count(ow) == 0) {
            SWIG_locks.insert({
              reinterpret_cast<void*>(ow), {
                [ow](){
                  ow->lock();
                }, [ow](){
                  ow->unlock();
                }
                }
            });
          }
        }
      }
    }
    
    
    // js_lock
    SWIG_guard.lock();
    
    
    
    {
      try {
        result = (int)Magick::operator ==((Magick::Image const &)*arg1,(Magick::Image const &)*arg2);
      } catch (const Magick::Exception &e) {
        do {
          SWIG_NAPI_Raise(env, e.what()); SWIG_fail; 
        } while (0);
        SWIG_fail;
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}



// js_global_function_dispatcher
Napi::Value _wrap_Magick__wrap_equal(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_equal__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_equal__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_equal__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_equal__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_equal__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_equal__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_equal__SWIG_3(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_equal__SWIG_3(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_equal__SWIG_4(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_equal__SWIG_4(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_equal__SWIG_5(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_equal__SWIG_5(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_equal__SWIG_6(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_equal__SWIG_6(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_equal__SWIG_7(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_equal__SWIG_7(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_equal__SWIG_8(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_equal__SWIG_8(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function equal.");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}



// js_global_overloaded_function
Napi::Value _wrap_notEqual__SWIG_8(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Magick::Image *arg1 = 0 ;
  Magick::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  // js_locks_list
  SWIG_Locks_List SWIG_locks;
  int result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    // js_guard
    SWIG_Guard SWIG_guard(SWIG_locks);
    
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_Magick__Image,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "notEqual" "', argument " "1"" of type '" "Magick::Image const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "notEqual" "', argument " "1"" of type '" "Magick::Image const &""'"); 
    }
    arg1 = reinterpret_cast< Magick::Image * >(argp1);res2 = SWIG_ConvertPtr(info[1], &argp2, SWIGTYPE_p_Magick__Image,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "notEqual" "', argument " "2"" of type '" "Magick::Image const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "notEqual" "', argument " "2"" of type '" "Magick::Image const &""'"); 
    }
    arg2 = reinterpret_cast< Magick::Image * >(argp2);
    {
      SWIG_NAPI_ObjectWrap_inst *ow = SWIG_NULLPTR;
      if (info[0].IsObject()) {
        Napi::Object obj;
        NAPI_CHECK_RESULT(info[0].ToObject(), obj);
        if (SWIG_NAPI_IsWrappedObject(env, obj)) {
          ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj);
          if (ow != SWIG_NULLPTR && SWIG_locks.count(ow) == 0) {
            SWIG_locks.insert({
              reinterpret_cast<void*>(ow), {
                [ow](){
                  ow->lock();
                }, [ow](){
                  ow->unlock();
                }
                }
            });
          }
        }
      }
    }
    {
      SWIG_NAPI_ObjectWrap_inst *ow = SWIG_NULLPTR;
      if (info[1].IsObject()) {
        Napi::Object obj;
        NAPI_CHECK_RESULT(info[1].ToObject(), obj);
        if (SWIG_NAPI_IsWrappedObject(env, obj)) {
          ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj);
          if (ow != SWIG_NULLPTR && SWIG_locks.count(ow) == 0) {
            SWIG_locks.insert({
              reinterpret_cast<void*>(ow), {
                [ow](){
                  ow->lock();
                }, [ow](){
                  ow->unlock();
                }
                }
            });
          }
        }
      }
    }
    
    
    // js_lock
    SWIG_guard.lock();
    
    
    
    {
      try {
        result = (int)Magick::operator !=((Magick::Image const &)*arg1,(Magick::Image const &)*arg2);
      } catch (const Magick::Exception &e) {
        do {
          SWIG_NAPI_Raise(env, e.what()); SWIG_fail; 
        } while (0);
        SWIG_fail;
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}



// js_global_function_dispatcher
Napi::Value _wrap_Magick__wrap_notEqual(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_notEqual__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_notEqual__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_notEqual__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_notEqual__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_notEqual__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_notEqual__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_notEqual__SWIG_3(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_notEqual__SWIG_3(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_notEqual__SWIG_4(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_notEqual__SWIG_4(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_notEqual__SWIG_5(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_notEqual__SWIG_5(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_notEqual__SWIG_6(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_notEqual__SWIG_6(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_notEqual__SWIG_7(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_notEqual__SWIG_7(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_notEqual__SWIG_8(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_notEqual__SWIG_8(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function notEqual.");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}



// js_global_overloaded_function
Napi::Value _wrap_gt__SWIG_6(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Magick::Image *arg1 = 0 ;
  Magick::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  // js_locks_list
  SWIG_Locks_List SWIG_locks;
  int result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    // js_guard
    SWIG_Guard SWIG_guard(SWIG_locks);
    
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_Magick__Image,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gt" "', argument " "1"" of type '" "Magick::Image const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gt" "', argument " "1"" of type '" "Magick::Image const &""'"); 
    }
    arg1 = reinterpret_cast< Magick::Image * >(argp1);res2 = SWIG_ConvertPtr(info[1], &argp2, SWIGTYPE_p_Magick__Image,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gt" "', argument " "2"" of type '" "Magick::Image const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gt" "', argument " "2"" of type '" "Magick::Image const &""'"); 
    }
    arg2 = reinterpret_cast< Magick::Image * >(argp2);
    {
      SWIG_NAPI_ObjectWrap_inst *ow = SWIG_NULLPTR;
      if (info[0].IsObject()) {
        Napi::Object obj;
        NAPI_CHECK_RESULT(info[0].ToObject(), obj);
        if (SWIG_NAPI_IsWrappedObject(env, obj)) {
          ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj);
          if (ow != SWIG_NULLPTR && SWIG_locks.count(ow) == 0) {
            SWIG_locks.insert({
              reinterpret_cast<void*>(ow), {
                [ow](){
                  ow->lock();
                }, [ow](){
                  ow->unlock();
                }
                }
            });
          }
        }
      }
    }
    {
      SWIG_NAPI_ObjectWrap_inst *ow = SWIG_NULLPTR;
      if (info[1].IsObject()) {
        Napi::Object obj;
        NAPI_CHECK_RESULT(info[1].ToObject(), obj);
        if (SWIG_NAPI_IsWrappedObject(env, obj)) {
          ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj);
          if (ow != SWIG_NULLPTR && SWIG_locks.count(ow) == 0) {
            SWIG_locks.insert({
              reinterpret_cast<void*>(ow), {
                [ow](){
                  ow->lock();
                }, [ow](){
                  ow->unlock();
                }
                }
            });
          }
        }
      }
    }
    
    
    // js_lock
    SWIG_guard.lock();
    
    
    
    {
      try {
        result = (int)Magick::operator >((Magick::Image const &)*arg1,(Magick::Image const &)*arg2);
      } catch (const Magick::Exception &e) {
        do {
          SWIG_NAPI_Raise(env, e.what()); SWIG_fail; 
        } while (0);
        SWIG_fail;
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}



// js_global_function_dispatcher
Napi::Value _wrap_Magick__wrap_gt(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_gt__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_gt__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_gt__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_gt__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_gt__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_gt__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_gt__SWIG_3(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_gt__SWIG_3(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_gt__SWIG_4(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_gt__SWIG_4(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_gt__SWIG_5(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_gt__SWIG_5(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_gt__SWIG_6(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_gt__SWIG_6(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function gt.");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}



// js_global_overloaded_function
Napi::Value _wrap_lt__SWIG_6(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Magick::Image *arg1 = 0 ;
  Magick::Image *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  // js_locks_list
  SWIG_Locks_List SWIG_locks;
  int result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    // js_guard
    SWIG_Guard SWIG_guard(SWIG_locks);
    
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_Magick__Image,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lt" "', argument " "1"" of type '" "Magick::Image const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lt" "', argument " "1"" of type '" "Magick::Image const &""'"); 
    }
    arg1 = reinterpret_cast< Magick::Image * >(argp1);res2 = SWIG_ConvertPtr(info[1], &argp2, SWIGTYPE_p_Magick__Image,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lt" "', argument " "2"" of type '" "Magick::Image const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lt" "', argument " "2"" of type '" "Magick::Image const &""'"); 
    }
    arg2 = reinterpret_cast< Magick::Image * >(argp2);
    {
      SWIG_NAPI_ObjectWrap_inst *ow = SWIG_NULLPTR;
      if (info[0].IsObject()) {
        Napi::Object obj;
        NAPI_CHECK_RESULT(info[0].ToObject(), obj);
        if (SWIG_NAPI_IsWrappedObject(env, obj)) {
          ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj);
          if (ow != SWIG_NULLPTR && SWIG_locks.count(ow) == 0) {
            SWIG_locks.insert({
              reinterpret_cast<void*>(ow), {
                [ow](){
                  ow->lock();
                }, [ow](){
                  ow->unlock();
                }
                }
            });
          }
        }
      }
    }
    {
      SWIG_NAPI_ObjectWrap_inst *ow = SWIG_NULLPTR;
      if (info[1].IsObject()) {
        Napi::Object obj;
        NAPI_CHECK_RESULT(info[1].ToObject(), obj);
        if (SWIG_NAPI_IsWrappedObject(env, obj)) {
          ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj);
          if (ow != SWIG_NULLPTR && SWIG_locks.count(ow) == 0) {
            SWIG_locks.insert({
              reinterpret_cast<void*>(ow), {
                [ow](){
                  ow->lock();
                }, [ow](){
                  ow->unlock();
                }
                }
            });
          }
        }
      }
    }
    
    
    // js_lock
    SWIG_guard.lock();
    
    
    
    {
      try {
        result = (int)Magick::operator <((Magick::Image const &)*arg1,(Magick::Image const &)*arg2);
      } catch (const Magick::Exception &e) {
        do {
          SWIG_NAPI_Raise(env, e.what()); SWIG_fail; 
        } while (0);
        SWIG_fail;
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


