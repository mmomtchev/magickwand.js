/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#include "swig/node-magickwand.h"


// js_global_overloaded_function
Napi::Value _wrap_gt__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Magick::Coordinate *arg1 = 0 ;
  Magick::Coordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  // js_locks_list
  SWIG_Locks_List SWIG_locks;
  int result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    // js_guard
    SWIG_Guard SWIG_guard(SWIG_locks);
    
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_Magick__Coordinate,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gt" "', argument " "1"" of type '" "Magick::Coordinate const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gt" "', argument " "1"" of type '" "Magick::Coordinate const &""'"); 
    }
    arg1 = reinterpret_cast< Magick::Coordinate * >(argp1);res2 = SWIG_ConvertPtr(info[1], &argp2, SWIGTYPE_p_Magick__Coordinate,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gt" "', argument " "2"" of type '" "Magick::Coordinate const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gt" "', argument " "2"" of type '" "Magick::Coordinate const &""'"); 
    }
    arg2 = reinterpret_cast< Magick::Coordinate * >(argp2);
    
    
    // js_lock
    SWIG_guard.lock();
    
    
    
    {
      try {
        result = (int)Magick::operator >((Magick::Coordinate const &)*arg1,(Magick::Coordinate const &)*arg2);
      } catch (const Magick::Exception &e) {
        do {
          SWIG_NAPI_Raise(env, e.what()); SWIG_fail; 
        } while (0);
        SWIG_fail;
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}



// js_global_overloaded_function
Napi::Value _wrap_lt__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Magick::Coordinate *arg1 = 0 ;
  Magick::Coordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  // js_locks_list
  SWIG_Locks_List SWIG_locks;
  int result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    // js_guard
    SWIG_Guard SWIG_guard(SWIG_locks);
    
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_Magick__Coordinate,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lt" "', argument " "1"" of type '" "Magick::Coordinate const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lt" "', argument " "1"" of type '" "Magick::Coordinate const &""'"); 
    }
    arg1 = reinterpret_cast< Magick::Coordinate * >(argp1);res2 = SWIG_ConvertPtr(info[1], &argp2, SWIGTYPE_p_Magick__Coordinate,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lt" "', argument " "2"" of type '" "Magick::Coordinate const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lt" "', argument " "2"" of type '" "Magick::Coordinate const &""'"); 
    }
    arg2 = reinterpret_cast< Magick::Coordinate * >(argp2);
    
    
    // js_lock
    SWIG_guard.lock();
    
    
    
    {
      try {
        result = (int)Magick::operator <((Magick::Coordinate const &)*arg1,(Magick::Coordinate const &)*arg2);
      } catch (const Magick::Exception &e) {
        do {
          SWIG_NAPI_Raise(env, e.what()); SWIG_fail; 
        } while (0);
        SWIG_fail;
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}



// js_global_overloaded_function
Napi::Value _wrap_gte__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Magick::Coordinate *arg1 = 0 ;
  Magick::Coordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  // js_locks_list
  SWIG_Locks_List SWIG_locks;
  int result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    // js_guard
    SWIG_Guard SWIG_guard(SWIG_locks);
    
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_Magick__Coordinate,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gte" "', argument " "1"" of type '" "Magick::Coordinate const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gte" "', argument " "1"" of type '" "Magick::Coordinate const &""'"); 
    }
    arg1 = reinterpret_cast< Magick::Coordinate * >(argp1);res2 = SWIG_ConvertPtr(info[1], &argp2, SWIGTYPE_p_Magick__Coordinate,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gte" "', argument " "2"" of type '" "Magick::Coordinate const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gte" "', argument " "2"" of type '" "Magick::Coordinate const &""'"); 
    }
    arg2 = reinterpret_cast< Magick::Coordinate * >(argp2);
    
    
    // js_lock
    SWIG_guard.lock();
    
    
    
    {
      try {
        result = (int)Magick::operator >=((Magick::Coordinate const &)*arg1,(Magick::Coordinate const &)*arg2);
      } catch (const Magick::Exception &e) {
        do {
          SWIG_NAPI_Raise(env, e.what()); SWIG_fail; 
        } while (0);
        SWIG_fail;
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}



// js_global_overloaded_function
Napi::Value _wrap_lte__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Magick::Coordinate *arg1 = 0 ;
  Magick::Coordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  // js_locks_list
  SWIG_Locks_List SWIG_locks;
  int result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    // js_guard
    SWIG_Guard SWIG_guard(SWIG_locks);
    
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_Magick__Coordinate,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lte" "', argument " "1"" of type '" "Magick::Coordinate const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lte" "', argument " "1"" of type '" "Magick::Coordinate const &""'"); 
    }
    arg1 = reinterpret_cast< Magick::Coordinate * >(argp1);res2 = SWIG_ConvertPtr(info[1], &argp2, SWIGTYPE_p_Magick__Coordinate,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lte" "', argument " "2"" of type '" "Magick::Coordinate const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lte" "', argument " "2"" of type '" "Magick::Coordinate const &""'"); 
    }
    arg2 = reinterpret_cast< Magick::Coordinate * >(argp2);
    
    
    // js_lock
    SWIG_guard.lock();
    
    
    
    {
      try {
        result = (int)Magick::operator <=((Magick::Coordinate const &)*arg1,(Magick::Coordinate const &)*arg2);
      } catch (const Magick::Exception &e) {
        do {
          SWIG_NAPI_Raise(env, e.what()); SWIG_fail; 
        } while (0);
        SWIG_fail;
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


/* Class: DrawableBase (_Magick_DrawableBase) */
// jsnapi_getclass
Napi::Function _Magick_DrawableBase_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableBase_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableBase_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableBase_inst>::DefineClass(env, "DrawableBase", symbolTable);
}

void _Magick_DrawableBase_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableBase_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableBase_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: Drawable (_Magick_Drawable) */
// jsnapi_getclass
Napi::Function _Magick_Drawable_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_Drawable_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_Drawable_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_Drawable_inst>::DefineClass(env, "Drawable", symbolTable);
}

void _Magick_Drawable_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_Drawable_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_Drawable_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("clone");
  members.insert({
    "clone",
      _Magick_Drawable_templ::InstanceMethod("clone",
        &_Magick_Drawable_templ::_wrap_Magick_Drawable_clone,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_Drawable_templ::InstanceMethod("call",
        &_Magick_Drawable_templ::_wrap_Magick_Drawable_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: VPathBase (_Magick_VPathBase) */
// jsnapi_getclass
Napi::Function _Magick_VPathBase_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_VPathBase_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_VPathBase_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_VPathBase_inst>::DefineClass(env, "VPathBase", symbolTable);
}

void _Magick_VPathBase_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_VPathBase_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_VPathBase_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_VPathBase_templ::InstanceMethod("call",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_VPathBase_templ::InstanceMethod("copy",
        &_Magick_VPathBase_templ::_wrap_Magick_VPathBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: VPath (_Magick_VPath) */
// jsnapi_getclass
Napi::Function _Magick_VPath_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_VPath_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_VPath_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_VPath_inst>::DefineClass(env, "VPath", symbolTable);
}

void _Magick_VPath_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_VPath_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_VPath_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("clone");
  members.insert({
    "clone",
      _Magick_VPath_templ::InstanceMethod("clone",
        &_Magick_VPath_templ::_wrap_Magick_VPath_clone,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_VPath_templ::InstanceMethod("call",
        &_Magick_VPath_templ::_wrap_Magick_VPath_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableAffine (_Magick_DrawableAffine) */
// jsnapi_getclass
Napi::Function _Magick_DrawableAffine_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableAffine_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableAffine_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableAffine_inst>::DefineClass(env, "DrawableAffine", symbolTable);
}

void _Magick_DrawableAffine_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableAffine_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableAffine_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableAffine_templ::InstanceMethod("call",
        &_Magick_DrawableAffine_templ::_wrap_Magick_DrawableAffine_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableAffine_templ::InstanceMethod("copy",
        &_Magick_DrawableAffine_templ::_wrap_Magick_DrawableAffine_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("sx");
  members.insert({
    "sx",
      _Magick_DrawableAffine_templ::InstanceMethod("sx",
        &_Magick_DrawableAffine_templ::_wrap_DrawableAffine__wrap_Magick_DrawableAffine_sx,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("sy");
  members.insert({
    "sy",
      _Magick_DrawableAffine_templ::InstanceMethod("sy",
        &_Magick_DrawableAffine_templ::_wrap_DrawableAffine__wrap_Magick_DrawableAffine_sy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("rx");
  members.insert({
    "rx",
      _Magick_DrawableAffine_templ::InstanceMethod("rx",
        &_Magick_DrawableAffine_templ::_wrap_DrawableAffine__wrap_Magick_DrawableAffine_rx,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("ry");
  members.insert({
    "ry",
      _Magick_DrawableAffine_templ::InstanceMethod("ry",
        &_Magick_DrawableAffine_templ::_wrap_DrawableAffine__wrap_Magick_DrawableAffine_ry,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("tx");
  members.insert({
    "tx",
      _Magick_DrawableAffine_templ::InstanceMethod("tx",
        &_Magick_DrawableAffine_templ::_wrap_DrawableAffine__wrap_Magick_DrawableAffine_tx,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("ty");
  members.insert({
    "ty",
      _Magick_DrawableAffine_templ::InstanceMethod("ty",
        &_Magick_DrawableAffine_templ::_wrap_DrawableAffine__wrap_Magick_DrawableAffine_ty,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableAlpha (_Magick_DrawableAlpha) */
// jsnapi_getclass
Napi::Function _Magick_DrawableAlpha_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableAlpha_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableAlpha_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableAlpha_inst>::DefineClass(env, "DrawableAlpha", symbolTable);
}

void _Magick_DrawableAlpha_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableAlpha_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableAlpha_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableAlpha_templ::InstanceMethod("call",
        &_Magick_DrawableAlpha_templ::_wrap_Magick_DrawableAlpha_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableAlpha_templ::InstanceMethod("copy",
        &_Magick_DrawableAlpha_templ::_wrap_Magick_DrawableAlpha_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("x");
  members.insert({
    "x",
      _Magick_DrawableAlpha_templ::InstanceMethod("x",
        &_Magick_DrawableAlpha_templ::_wrap_DrawableAlpha__wrap_Magick_DrawableAlpha_x,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("y");
  members.insert({
    "y",
      _Magick_DrawableAlpha_templ::InstanceMethod("y",
        &_Magick_DrawableAlpha_templ::_wrap_DrawableAlpha__wrap_Magick_DrawableAlpha_y,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("paintMethod");
  members.insert({
    "paintMethod",
      _Magick_DrawableAlpha_templ::InstanceMethod("paintMethod",
        &_Magick_DrawableAlpha_templ::_wrap_DrawableAlpha__wrap_Magick_DrawableAlpha_paintMethod,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableArc (_Magick_DrawableArc) */
// jsnapi_getclass
Napi::Function _Magick_DrawableArc_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableArc_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableArc_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableArc_inst>::DefineClass(env, "DrawableArc", symbolTable);
}

void _Magick_DrawableArc_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableArc_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableArc_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableArc_templ::InstanceMethod("call",
        &_Magick_DrawableArc_templ::_wrap_Magick_DrawableArc_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableArc_templ::InstanceMethod("copy",
        &_Magick_DrawableArc_templ::_wrap_Magick_DrawableArc_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("startX");
  members.insert({
    "startX",
      _Magick_DrawableArc_templ::InstanceMethod("startX",
        &_Magick_DrawableArc_templ::_wrap_DrawableArc__wrap_Magick_DrawableArc_startX,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("startY");
  members.insert({
    "startY",
      _Magick_DrawableArc_templ::InstanceMethod("startY",
        &_Magick_DrawableArc_templ::_wrap_DrawableArc__wrap_Magick_DrawableArc_startY,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("endX");
  members.insert({
    "endX",
      _Magick_DrawableArc_templ::InstanceMethod("endX",
        &_Magick_DrawableArc_templ::_wrap_DrawableArc__wrap_Magick_DrawableArc_endX,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("endY");
  members.insert({
    "endY",
      _Magick_DrawableArc_templ::InstanceMethod("endY",
        &_Magick_DrawableArc_templ::_wrap_DrawableArc__wrap_Magick_DrawableArc_endY,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("startDegrees");
  members.insert({
    "startDegrees",
      _Magick_DrawableArc_templ::InstanceMethod("startDegrees",
        &_Magick_DrawableArc_templ::_wrap_DrawableArc__wrap_Magick_DrawableArc_startDegrees,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("endDegrees");
  members.insert({
    "endDegrees",
      _Magick_DrawableArc_templ::InstanceMethod("endDegrees",
        &_Magick_DrawableArc_templ::_wrap_DrawableArc__wrap_Magick_DrawableArc_endDegrees,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableBezier (_Magick_DrawableBezier) */
// jsnapi_getclass
Napi::Function _Magick_DrawableBezier_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableBezier_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableBezier_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableBezier_inst>::DefineClass(env, "DrawableBezier", symbolTable);
}

void _Magick_DrawableBezier_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableBezier_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableBezier_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBezier_templ::InstanceMethod("call",
        &_Magick_DrawableBezier_templ::_wrap_Magick_DrawableBezier_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBezier_templ::InstanceMethod("copy",
        &_Magick_DrawableBezier_templ::_wrap_Magick_DrawableBezier_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableBorderColor (_Magick_DrawableBorderColor) */
// jsnapi_getclass
Napi::Function _Magick_DrawableBorderColor_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableBorderColor_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableBorderColor_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableBorderColor_inst>::DefineClass(env, "DrawableBorderColor", symbolTable);
}

void _Magick_DrawableBorderColor_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableBorderColor_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableBorderColor_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBorderColor_templ::InstanceMethod("call",
        &_Magick_DrawableBorderColor_templ::_wrap_Magick_DrawableBorderColor_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("color");
  members.insert({
    "color",
      _Magick_DrawableBorderColor_templ::InstanceMethod("color",
        &_Magick_DrawableBorderColor_templ::_wrap_DrawableBorderColor__wrap_Magick_DrawableBorderColor_color,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBorderColor_templ::InstanceMethod("copy",
        &_Magick_DrawableBorderColor_templ::_wrap_Magick_DrawableBorderColor_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableClipRule (_Magick_DrawableClipRule) */
// jsnapi_getclass
Napi::Function _Magick_DrawableClipRule_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableClipRule_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableClipRule_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableClipRule_inst>::DefineClass(env, "DrawableClipRule", symbolTable);
}

void _Magick_DrawableClipRule_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableClipRule_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableClipRule_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableClipRule_templ::InstanceMethod("call",
        &_Magick_DrawableClipRule_templ::_wrap_Magick_DrawableClipRule_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("fillRule");
  members.insert({
    "fillRule",
      _Magick_DrawableClipRule_templ::InstanceMethod("fillRule",
        &_Magick_DrawableClipRule_templ::_wrap_DrawableClipRule__wrap_Magick_DrawableClipRule_fillRule,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableClipRule_templ::InstanceMethod("copy",
        &_Magick_DrawableClipRule_templ::_wrap_Magick_DrawableClipRule_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableClipUnits (_Magick_DrawableClipUnits) */
// jsnapi_getclass
Napi::Function _Magick_DrawableClipUnits_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableClipUnits_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableClipUnits_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableClipUnits_inst>::DefineClass(env, "DrawableClipUnits", symbolTable);
}

void _Magick_DrawableClipUnits_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableClipUnits_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableClipUnits_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableClipUnits_templ::InstanceMethod("call",
        &_Magick_DrawableClipUnits_templ::_wrap_Magick_DrawableClipUnits_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("units");
  members.insert({
    "units",
      _Magick_DrawableClipUnits_templ::InstanceMethod("units",
        &_Magick_DrawableClipUnits_templ::_wrap_DrawableClipUnits__wrap_Magick_DrawableClipUnits_units,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableClipUnits_templ::InstanceMethod("copy",
        &_Magick_DrawableClipUnits_templ::_wrap_Magick_DrawableClipUnits_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawablePopClipPath (_Magick_DrawablePopClipPath) */
// jsnapi_getclass
Napi::Function _Magick_DrawablePopClipPath_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawablePopClipPath_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawablePopClipPath_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawablePopClipPath_inst>::DefineClass(env, "DrawablePopClipPath", symbolTable);
}

void _Magick_DrawablePopClipPath_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawablePopClipPath_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawablePopClipPath_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawablePopClipPath_templ::InstanceMethod("call",
        &_Magick_DrawablePopClipPath_templ::_wrap_Magick_DrawablePopClipPath_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawablePopClipPath_templ::InstanceMethod("copy",
        &_Magick_DrawablePopClipPath_templ::_wrap_Magick_DrawablePopClipPath_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawablePushClipPath (_Magick_DrawablePushClipPath) */
// jsnapi_getclass
Napi::Function _Magick_DrawablePushClipPath_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawablePushClipPath_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawablePushClipPath_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawablePushClipPath_inst>::DefineClass(env, "DrawablePushClipPath", symbolTable);
}

void _Magick_DrawablePushClipPath_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawablePushClipPath_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawablePushClipPath_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawablePushClipPath_templ::InstanceMethod("call",
        &_Magick_DrawablePushClipPath_templ::_wrap_Magick_DrawablePushClipPath_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawablePushClipPath_templ::InstanceMethod("copy",
        &_Magick_DrawablePushClipPath_templ::_wrap_Magick_DrawablePushClipPath_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableClipPath (_Magick_DrawableClipPath) */
// jsnapi_getclass
Napi::Function _Magick_DrawableClipPath_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableClipPath_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableClipPath_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableClipPath_inst>::DefineClass(env, "DrawableClipPath", symbolTable);
}

void _Magick_DrawableClipPath_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableClipPath_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableClipPath_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableClipPath_templ::InstanceMethod("call",
        &_Magick_DrawableClipPath_templ::_wrap_Magick_DrawableClipPath_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableClipPath_templ::InstanceMethod("copy",
        &_Magick_DrawableClipPath_templ::_wrap_Magick_DrawableClipPath_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("clip_path");
  members.insert({
    "clip_path",
      _Magick_DrawableClipPath_templ::InstanceMethod("clip_path",
        &_Magick_DrawableClipPath_templ::_wrap_DrawableClipPath__wrap_Magick_DrawableClipPath_clip_path,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableCircle (_Magick_DrawableCircle) */
// jsnapi_getclass
Napi::Function _Magick_DrawableCircle_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableCircle_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableCircle_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableCircle_inst>::DefineClass(env, "DrawableCircle", symbolTable);
}

void _Magick_DrawableCircle_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableCircle_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableCircle_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableCircle_templ::InstanceMethod("call",
        &_Magick_DrawableCircle_templ::_wrap_Magick_DrawableCircle_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableCircle_templ::InstanceMethod("copy",
        &_Magick_DrawableCircle_templ::_wrap_Magick_DrawableCircle_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("originX");
  members.insert({
    "originX",
      _Magick_DrawableCircle_templ::InstanceMethod("originX",
        &_Magick_DrawableCircle_templ::_wrap_DrawableCircle__wrap_Magick_DrawableCircle_originX,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("originY");
  members.insert({
    "originY",
      _Magick_DrawableCircle_templ::InstanceMethod("originY",
        &_Magick_DrawableCircle_templ::_wrap_DrawableCircle__wrap_Magick_DrawableCircle_originY,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("perimX");
  members.insert({
    "perimX",
      _Magick_DrawableCircle_templ::InstanceMethod("perimX",
        &_Magick_DrawableCircle_templ::_wrap_DrawableCircle__wrap_Magick_DrawableCircle_perimX,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("perimY");
  members.insert({
    "perimY",
      _Magick_DrawableCircle_templ::InstanceMethod("perimY",
        &_Magick_DrawableCircle_templ::_wrap_DrawableCircle__wrap_Magick_DrawableCircle_perimY,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableColor (_Magick_DrawableColor) */
// jsnapi_getclass
Napi::Function _Magick_DrawableColor_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableColor_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableColor_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableColor_inst>::DefineClass(env, "DrawableColor", symbolTable);
}

void _Magick_DrawableColor_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableColor_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableColor_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableColor_templ::InstanceMethod("call",
        &_Magick_DrawableColor_templ::_wrap_Magick_DrawableColor_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableColor_templ::InstanceMethod("copy",
        &_Magick_DrawableColor_templ::_wrap_Magick_DrawableColor_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("x");
  members.insert({
    "x",
      _Magick_DrawableColor_templ::InstanceMethod("x",
        &_Magick_DrawableColor_templ::_wrap_DrawableColor__wrap_Magick_DrawableColor_x,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("y");
  members.insert({
    "y",
      _Magick_DrawableColor_templ::InstanceMethod("y",
        &_Magick_DrawableColor_templ::_wrap_DrawableColor__wrap_Magick_DrawableColor_y,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("paintMethod");
  members.insert({
    "paintMethod",
      _Magick_DrawableColor_templ::InstanceMethod("paintMethod",
        &_Magick_DrawableColor_templ::_wrap_DrawableColor__wrap_Magick_DrawableColor_paintMethod,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableCompositeImage (_Magick_DrawableCompositeImage) */
// jsnapi_getclass
Napi::Function _Magick_DrawableCompositeImage_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableCompositeImage_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableCompositeImage_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableCompositeImage_inst>::DefineClass(env, "DrawableCompositeImage", symbolTable);
}

void _Magick_DrawableCompositeImage_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableCompositeImage_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableCompositeImage_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("clone");
  members.insert({
    "clone",
      _Magick_DrawableCompositeImage_templ::InstanceMethod("clone",
        &_Magick_DrawableCompositeImage_templ::_wrap_Magick_DrawableCompositeImage_clone,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableCompositeImage_templ::InstanceMethod("call",
        &_Magick_DrawableCompositeImage_templ::_wrap_Magick_DrawableCompositeImage_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableCompositeImage_templ::InstanceMethod("copy",
        &_Magick_DrawableCompositeImage_templ::_wrap_Magick_DrawableCompositeImage_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("composition");
  members.insert({
    "composition",
      _Magick_DrawableCompositeImage_templ::InstanceMethod("composition",
        &_Magick_DrawableCompositeImage_templ::_wrap_DrawableCompositeImage__wrap_Magick_DrawableCompositeImage_composition,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("filename");
  members.insert({
    "filename",
      _Magick_DrawableCompositeImage_templ::InstanceMethod("filename",
        &_Magick_DrawableCompositeImage_templ::_wrap_DrawableCompositeImage__wrap_Magick_DrawableCompositeImage_filename,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("x");
  members.insert({
    "x",
      _Magick_DrawableCompositeImage_templ::InstanceMethod("x",
        &_Magick_DrawableCompositeImage_templ::_wrap_DrawableCompositeImage__wrap_Magick_DrawableCompositeImage_x,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("y");
  members.insert({
    "y",
      _Magick_DrawableCompositeImage_templ::InstanceMethod("y",
        &_Magick_DrawableCompositeImage_templ::_wrap_DrawableCompositeImage__wrap_Magick_DrawableCompositeImage_y,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("width");
  members.insert({
    "width",
      _Magick_DrawableCompositeImage_templ::InstanceMethod("width",
        &_Magick_DrawableCompositeImage_templ::_wrap_DrawableCompositeImage__wrap_Magick_DrawableCompositeImage_width,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("height");
  members.insert({
    "height",
      _Magick_DrawableCompositeImage_templ::InstanceMethod("height",
        &_Magick_DrawableCompositeImage_templ::_wrap_DrawableCompositeImage__wrap_Magick_DrawableCompositeImage_height,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("image");
  members.insert({
    "image",
      _Magick_DrawableCompositeImage_templ::InstanceMethod("image",
        &_Magick_DrawableCompositeImage_templ::_wrap_DrawableCompositeImage__wrap_Magick_DrawableCompositeImage_image,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("magick");
  members.insert({
    "magick",
      _Magick_DrawableCompositeImage_templ::InstanceMethod("magick",
        &_Magick_DrawableCompositeImage_templ::_wrap_DrawableCompositeImage__wrap_Magick_DrawableCompositeImage_magick,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableDensity (_Magick_DrawableDensity) */
// jsnapi_getclass
Napi::Function _Magick_DrawableDensity_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableDensity_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableDensity_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableDensity_inst>::DefineClass(env, "DrawableDensity", symbolTable);
}

void _Magick_DrawableDensity_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableDensity_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableDensity_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableDensity_templ::InstanceMethod("call",
        &_Magick_DrawableDensity_templ::_wrap_Magick_DrawableDensity_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableDensity_templ::InstanceMethod("copy",
        &_Magick_DrawableDensity_templ::_wrap_Magick_DrawableDensity_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableEllipse (_Magick_DrawableEllipse) */
// jsnapi_getclass
Napi::Function _Magick_DrawableEllipse_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableEllipse_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableEllipse_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableEllipse_inst>::DefineClass(env, "DrawableEllipse", symbolTable);
}

void _Magick_DrawableEllipse_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableEllipse_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableEllipse_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableEllipse_templ::InstanceMethod("call",
        &_Magick_DrawableEllipse_templ::_wrap_Magick_DrawableEllipse_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableEllipse_templ::InstanceMethod("copy",
        &_Magick_DrawableEllipse_templ::_wrap_Magick_DrawableEllipse_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("originX");
  members.insert({
    "originX",
      _Magick_DrawableEllipse_templ::InstanceMethod("originX",
        &_Magick_DrawableEllipse_templ::_wrap_DrawableEllipse__wrap_Magick_DrawableEllipse_originX,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("originY");
  members.insert({
    "originY",
      _Magick_DrawableEllipse_templ::InstanceMethod("originY",
        &_Magick_DrawableEllipse_templ::_wrap_DrawableEllipse__wrap_Magick_DrawableEllipse_originY,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("radiusX");
  members.insert({
    "radiusX",
      _Magick_DrawableEllipse_templ::InstanceMethod("radiusX",
        &_Magick_DrawableEllipse_templ::_wrap_DrawableEllipse__wrap_Magick_DrawableEllipse_radiusX,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("radiusY");
  members.insert({
    "radiusY",
      _Magick_DrawableEllipse_templ::InstanceMethod("radiusY",
        &_Magick_DrawableEllipse_templ::_wrap_DrawableEllipse__wrap_Magick_DrawableEllipse_radiusY,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("arcStart");
  members.insert({
    "arcStart",
      _Magick_DrawableEllipse_templ::InstanceMethod("arcStart",
        &_Magick_DrawableEllipse_templ::_wrap_DrawableEllipse__wrap_Magick_DrawableEllipse_arcStart,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("arcEnd");
  members.insert({
    "arcEnd",
      _Magick_DrawableEllipse_templ::InstanceMethod("arcEnd",
        &_Magick_DrawableEllipse_templ::_wrap_DrawableEllipse__wrap_Magick_DrawableEllipse_arcEnd,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableFillColor (_Magick_DrawableFillColor) */
// jsnapi_getclass
Napi::Function _Magick_DrawableFillColor_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableFillColor_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableFillColor_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableFillColor_inst>::DefineClass(env, "DrawableFillColor", symbolTable);
}

void _Magick_DrawableFillColor_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableFillColor_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableFillColor_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableFillColor_templ::InstanceMethod("call",
        &_Magick_DrawableFillColor_templ::_wrap_Magick_DrawableFillColor_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableFillColor_templ::InstanceMethod("copy",
        &_Magick_DrawableFillColor_templ::_wrap_Magick_DrawableFillColor_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("color");
  members.insert({
    "color",
      _Magick_DrawableFillColor_templ::InstanceMethod("color",
        &_Magick_DrawableFillColor_templ::_wrap_DrawableFillColor__wrap_Magick_DrawableFillColor_color,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableFillPatternUrl (_Magick_DrawableFillPatternUrl) */
// jsnapi_getclass
Napi::Function _Magick_DrawableFillPatternUrl_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableFillPatternUrl_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableFillPatternUrl_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableFillPatternUrl_inst>::DefineClass(env, "DrawableFillPatternUrl", symbolTable);
}

void _Magick_DrawableFillPatternUrl_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableFillPatternUrl_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableFillPatternUrl_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableFillPatternUrl_templ::InstanceMethod("call",
        &_Magick_DrawableFillPatternUrl_templ::_wrap_Magick_DrawableFillPatternUrl_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("url");
  members.insert({
    "url",
      _Magick_DrawableFillPatternUrl_templ::InstanceMethod("url",
        &_Magick_DrawableFillPatternUrl_templ::_wrap_DrawableFillPatternUrl__wrap_Magick_DrawableFillPatternUrl_url,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableFillPatternUrl_templ::InstanceMethod("copy",
        &_Magick_DrawableFillPatternUrl_templ::_wrap_Magick_DrawableFillPatternUrl_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableFillRule (_Magick_DrawableFillRule) */
// jsnapi_getclass
Napi::Function _Magick_DrawableFillRule_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableFillRule_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableFillRule_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableFillRule_inst>::DefineClass(env, "DrawableFillRule", symbolTable);
}

void _Magick_DrawableFillRule_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableFillRule_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableFillRule_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableFillRule_templ::InstanceMethod("call",
        &_Magick_DrawableFillRule_templ::_wrap_Magick_DrawableFillRule_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableFillRule_templ::InstanceMethod("copy",
        &_Magick_DrawableFillRule_templ::_wrap_Magick_DrawableFillRule_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("fillRule");
  members.insert({
    "fillRule",
      _Magick_DrawableFillRule_templ::InstanceMethod("fillRule",
        &_Magick_DrawableFillRule_templ::_wrap_DrawableFillRule__wrap_Magick_DrawableFillRule_fillRule,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableFillOpacity (_Magick_DrawableFillOpacity) */
// jsnapi_getclass
Napi::Function _Magick_DrawableFillOpacity_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableFillOpacity_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableFillOpacity_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableFillOpacity_inst>::DefineClass(env, "DrawableFillOpacity", symbolTable);
}

void _Magick_DrawableFillOpacity_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableFillOpacity_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableFillOpacity_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableFillOpacity_templ::InstanceMethod("call",
        &_Magick_DrawableFillOpacity_templ::_wrap_Magick_DrawableFillOpacity_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableFillOpacity_templ::InstanceMethod("copy",
        &_Magick_DrawableFillOpacity_templ::_wrap_Magick_DrawableFillOpacity_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("opacity");
  members.insert({
    "opacity",
      _Magick_DrawableFillOpacity_templ::InstanceMethod("opacity",
        &_Magick_DrawableFillOpacity_templ::_wrap_DrawableFillOpacity__wrap_Magick_DrawableFillOpacity_opacity,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableFont (_Magick_DrawableFont) */
// jsnapi_getclass
Napi::Function _Magick_DrawableFont_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableFont_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableFont_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableFont_inst>::DefineClass(env, "DrawableFont", symbolTable);
}

void _Magick_DrawableFont_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableFont_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableFont_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableFont_templ::InstanceMethod("call",
        &_Magick_DrawableFont_templ::_wrap_Magick_DrawableFont_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableFont_templ::InstanceMethod("copy",
        &_Magick_DrawableFont_templ::_wrap_Magick_DrawableFont_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("font");
  members.insert({
    "font",
      _Magick_DrawableFont_templ::InstanceMethod("font",
        &_Magick_DrawableFont_templ::_wrap_DrawableFont__wrap_Magick_DrawableFont_font,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableGravity (_Magick_DrawableGravity) */
// jsnapi_getclass
Napi::Function _Magick_DrawableGravity_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableGravity_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableGravity_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableGravity_inst>::DefineClass(env, "DrawableGravity", symbolTable);
}

void _Magick_DrawableGravity_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableGravity_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableGravity_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableGravity_templ::InstanceMethod("call",
        &_Magick_DrawableGravity_templ::_wrap_Magick_DrawableGravity_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableGravity_templ::InstanceMethod("copy",
        &_Magick_DrawableGravity_templ::_wrap_Magick_DrawableGravity_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("gravity");
  members.insert({
    "gravity",
      _Magick_DrawableGravity_templ::InstanceMethod("gravity",
        &_Magick_DrawableGravity_templ::_wrap_DrawableGravity__wrap_Magick_DrawableGravity_gravity,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableLine (_Magick_DrawableLine) */
// jsnapi_getclass
Napi::Function _Magick_DrawableLine_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableLine_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableLine_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableLine_inst>::DefineClass(env, "DrawableLine", symbolTable);
}

void _Magick_DrawableLine_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableLine_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableLine_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableLine_templ::InstanceMethod("call",
        &_Magick_DrawableLine_templ::_wrap_Magick_DrawableLine_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableLine_templ::InstanceMethod("copy",
        &_Magick_DrawableLine_templ::_wrap_Magick_DrawableLine_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("startX");
  members.insert({
    "startX",
      _Magick_DrawableLine_templ::InstanceMethod("startX",
        &_Magick_DrawableLine_templ::_wrap_DrawableLine__wrap_Magick_DrawableLine_startX,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("startY");
  members.insert({
    "startY",
      _Magick_DrawableLine_templ::InstanceMethod("startY",
        &_Magick_DrawableLine_templ::_wrap_DrawableLine__wrap_Magick_DrawableLine_startY,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("endX");
  members.insert({
    "endX",
      _Magick_DrawableLine_templ::InstanceMethod("endX",
        &_Magick_DrawableLine_templ::_wrap_DrawableLine__wrap_Magick_DrawableLine_endX,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("endY");
  members.insert({
    "endY",
      _Magick_DrawableLine_templ::InstanceMethod("endY",
        &_Magick_DrawableLine_templ::_wrap_DrawableLine__wrap_Magick_DrawableLine_endY,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawablePath (_Magick_DrawablePath) */
// jsnapi_getclass
Napi::Function _Magick_DrawablePath_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawablePath_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawablePath_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawablePath_inst>::DefineClass(env, "DrawablePath", symbolTable);
}

void _Magick_DrawablePath_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawablePath_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawablePath_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawablePath_templ::InstanceMethod("call",
        &_Magick_DrawablePath_templ::_wrap_Magick_DrawablePath_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawablePath_templ::InstanceMethod("copy",
        &_Magick_DrawablePath_templ::_wrap_Magick_DrawablePath_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawablePoint (_Magick_DrawablePoint) */
// jsnapi_getclass
Napi::Function _Magick_DrawablePoint_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawablePoint_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawablePoint_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawablePoint_inst>::DefineClass(env, "DrawablePoint", symbolTable);
}

void _Magick_DrawablePoint_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawablePoint_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawablePoint_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawablePoint_templ::InstanceMethod("call",
        &_Magick_DrawablePoint_templ::_wrap_Magick_DrawablePoint_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawablePoint_templ::InstanceMethod("copy",
        &_Magick_DrawablePoint_templ::_wrap_Magick_DrawablePoint_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("x");
  members.insert({
    "x",
      _Magick_DrawablePoint_templ::InstanceMethod("x",
        &_Magick_DrawablePoint_templ::_wrap_DrawablePoint__wrap_Magick_DrawablePoint_x,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("y");
  members.insert({
    "y",
      _Magick_DrawablePoint_templ::InstanceMethod("y",
        &_Magick_DrawablePoint_templ::_wrap_DrawablePoint__wrap_Magick_DrawablePoint_y,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawablePointSize (_Magick_DrawablePointSize) */
// jsnapi_getclass
Napi::Function _Magick_DrawablePointSize_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawablePointSize_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawablePointSize_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawablePointSize_inst>::DefineClass(env, "DrawablePointSize", symbolTable);
}

void _Magick_DrawablePointSize_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawablePointSize_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawablePointSize_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawablePointSize_templ::InstanceMethod("call",
        &_Magick_DrawablePointSize_templ::_wrap_Magick_DrawablePointSize_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawablePointSize_templ::InstanceMethod("copy",
        &_Magick_DrawablePointSize_templ::_wrap_Magick_DrawablePointSize_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("pointSize");
  members.insert({
    "pointSize",
      _Magick_DrawablePointSize_templ::InstanceMethod("pointSize",
        &_Magick_DrawablePointSize_templ::_wrap_DrawablePointSize__wrap_Magick_DrawablePointSize_pointSize,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawablePolygon (_Magick_DrawablePolygon) */
// jsnapi_getclass
Napi::Function _Magick_DrawablePolygon_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawablePolygon_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawablePolygon_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawablePolygon_inst>::DefineClass(env, "DrawablePolygon", symbolTable);
}

void _Magick_DrawablePolygon_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawablePolygon_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawablePolygon_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawablePolygon_templ::InstanceMethod("call",
        &_Magick_DrawablePolygon_templ::_wrap_Magick_DrawablePolygon_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawablePolygon_templ::InstanceMethod("copy",
        &_Magick_DrawablePolygon_templ::_wrap_Magick_DrawablePolygon_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawablePolyline (_Magick_DrawablePolyline) */
// jsnapi_getclass
Napi::Function _Magick_DrawablePolyline_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawablePolyline_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawablePolyline_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawablePolyline_inst>::DefineClass(env, "DrawablePolyline", symbolTable);
}

void _Magick_DrawablePolyline_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawablePolyline_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawablePolyline_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawablePolyline_templ::InstanceMethod("call",
        &_Magick_DrawablePolyline_templ::_wrap_Magick_DrawablePolyline_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawablePolyline_templ::InstanceMethod("copy",
        &_Magick_DrawablePolyline_templ::_wrap_Magick_DrawablePolyline_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawablePopGraphicContext (_Magick_DrawablePopGraphicContext) */
// jsnapi_getclass
Napi::Function _Magick_DrawablePopGraphicContext_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawablePopGraphicContext_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawablePopGraphicContext_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawablePopGraphicContext_inst>::DefineClass(env, "DrawablePopGraphicContext", symbolTable);
}

void _Magick_DrawablePopGraphicContext_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawablePopGraphicContext_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawablePopGraphicContext_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawablePopGraphicContext_templ::InstanceMethod("call",
        &_Magick_DrawablePopGraphicContext_templ::_wrap_Magick_DrawablePopGraphicContext_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawablePopGraphicContext_templ::InstanceMethod("copy",
        &_Magick_DrawablePopGraphicContext_templ::_wrap_Magick_DrawablePopGraphicContext_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawablePushGraphicContext (_Magick_DrawablePushGraphicContext) */
// jsnapi_getclass
Napi::Function _Magick_DrawablePushGraphicContext_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawablePushGraphicContext_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawablePushGraphicContext_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawablePushGraphicContext_inst>::DefineClass(env, "DrawablePushGraphicContext", symbolTable);
}

void _Magick_DrawablePushGraphicContext_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawablePushGraphicContext_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawablePushGraphicContext_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawablePushGraphicContext_templ::InstanceMethod("call",
        &_Magick_DrawablePushGraphicContext_templ::_wrap_Magick_DrawablePushGraphicContext_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawablePushGraphicContext_templ::InstanceMethod("copy",
        &_Magick_DrawablePushGraphicContext_templ::_wrap_Magick_DrawablePushGraphicContext_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawablePopPattern (_Magick_DrawablePopPattern) */
// jsnapi_getclass
Napi::Function _Magick_DrawablePopPattern_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawablePopPattern_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawablePopPattern_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawablePopPattern_inst>::DefineClass(env, "DrawablePopPattern", symbolTable);
}

void _Magick_DrawablePopPattern_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawablePopPattern_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawablePopPattern_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawablePopPattern_templ::InstanceMethod("call",
        &_Magick_DrawablePopPattern_templ::_wrap_Magick_DrawablePopPattern_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawablePopPattern_templ::InstanceMethod("copy",
        &_Magick_DrawablePopPattern_templ::_wrap_Magick_DrawablePopPattern_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawablePushPattern (_Magick_DrawablePushPattern) */
// jsnapi_getclass
Napi::Function _Magick_DrawablePushPattern_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawablePushPattern_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawablePushPattern_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawablePushPattern_inst>::DefineClass(env, "DrawablePushPattern", symbolTable);
}

void _Magick_DrawablePushPattern_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawablePushPattern_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawablePushPattern_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawablePushPattern_templ::InstanceMethod("call",
        &_Magick_DrawablePushPattern_templ::_wrap_Magick_DrawablePushPattern_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawablePushPattern_templ::InstanceMethod("copy",
        &_Magick_DrawablePushPattern_templ::_wrap_Magick_DrawablePushPattern_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableRectangle (_Magick_DrawableRectangle) */
// jsnapi_getclass
Napi::Function _Magick_DrawableRectangle_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableRectangle_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableRectangle_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableRectangle_inst>::DefineClass(env, "DrawableRectangle", symbolTable);
}

void _Magick_DrawableRectangle_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableRectangle_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableRectangle_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableRectangle_templ::InstanceMethod("call",
        &_Magick_DrawableRectangle_templ::_wrap_Magick_DrawableRectangle_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableRectangle_templ::InstanceMethod("copy",
        &_Magick_DrawableRectangle_templ::_wrap_Magick_DrawableRectangle_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("upperLeftX");
  members.insert({
    "upperLeftX",
      _Magick_DrawableRectangle_templ::InstanceMethod("upperLeftX",
        &_Magick_DrawableRectangle_templ::_wrap_DrawableRectangle__wrap_Magick_DrawableRectangle_upperLeftX,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("upperLeftY");
  members.insert({
    "upperLeftY",
      _Magick_DrawableRectangle_templ::InstanceMethod("upperLeftY",
        &_Magick_DrawableRectangle_templ::_wrap_DrawableRectangle__wrap_Magick_DrawableRectangle_upperLeftY,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("lowerRightX");
  members.insert({
    "lowerRightX",
      _Magick_DrawableRectangle_templ::InstanceMethod("lowerRightX",
        &_Magick_DrawableRectangle_templ::_wrap_DrawableRectangle__wrap_Magick_DrawableRectangle_lowerRightX,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("lowerRightY");
  members.insert({
    "lowerRightY",
      _Magick_DrawableRectangle_templ::InstanceMethod("lowerRightY",
        &_Magick_DrawableRectangle_templ::_wrap_DrawableRectangle__wrap_Magick_DrawableRectangle_lowerRightY,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableRotation (_Magick_DrawableRotation) */
// jsnapi_getclass
Napi::Function _Magick_DrawableRotation_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableRotation_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableRotation_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableRotation_inst>::DefineClass(env, "DrawableRotation", symbolTable);
}

void _Magick_DrawableRotation_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableRotation_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableRotation_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableRotation_templ::InstanceMethod("call",
        &_Magick_DrawableRotation_templ::_wrap_Magick_DrawableRotation_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableRotation_templ::InstanceMethod("copy",
        &_Magick_DrawableRotation_templ::_wrap_Magick_DrawableRotation_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("angle");
  members.insert({
    "angle",
      _Magick_DrawableRotation_templ::InstanceMethod("angle",
        &_Magick_DrawableRotation_templ::_wrap_DrawableRotation__wrap_Magick_DrawableRotation_angle,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

/* Class: DrawableRoundRectangle (_Magick_DrawableRoundRectangle) */
// jsnapi_getclass
Napi::Function _Magick_DrawableRoundRectangle_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_DrawableRoundRectangle_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_DrawableRoundRectangle_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_DrawableRoundRectangle_inst>::DefineClass(env, "DrawableRoundRectangle", symbolTable);
}

void _Magick_DrawableRoundRectangle_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_DrawableRoundRectangle_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_DrawableRoundRectangle_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _Magick_DrawableBase_templ<_Magick_DrawableBase_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _Magick_DrawableBase_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableBase_templ::InstanceMethod("call",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableBase_templ::InstanceMethod("copy",
        &_Magick_DrawableBase_templ::_wrap_Magick_DrawableBase_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("call");
  members.insert({
    "call",
      _Magick_DrawableRoundRectangle_templ::InstanceMethod("call",
        &_Magick_DrawableRoundRectangle_templ::_wrap_Magick_DrawableRoundRectangle_call,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copy");
  members.insert({
    "copy",
      _Magick_DrawableRoundRectangle_templ::InstanceMethod("copy",
        &_Magick_DrawableRoundRectangle_templ::_wrap_Magick_DrawableRoundRectangle_copy,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("upperLeftX");
  members.insert({
    "upperLeftX",
      _Magick_DrawableRoundRectangle_templ::InstanceMethod("upperLeftX",
        &_Magick_DrawableRoundRectangle_templ::_wrap_DrawableRoundRectangle__wrap_Magick_DrawableRoundRectangle_upperLeftX,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("upperLeftY");
  members.insert({
    "upperLeftY",
      _Magick_DrawableRoundRectangle_templ::InstanceMethod("upperLeftY",
        &_Magick_DrawableRoundRectangle_templ::_wrap_DrawableRoundRectangle__wrap_Magick_DrawableRoundRectangle_upperLeftY,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("lowerRightX");
  members.insert({
    "lowerRightX",
      _Magick_DrawableRoundRectangle_templ::InstanceMethod("lowerRightX",
        &_Magick_DrawableRoundRectangle_templ::_wrap_DrawableRoundRectangle__wrap_Magick_DrawableRoundRectangle_lowerRightX,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("lowerRightY");
  members.insert({
    "lowerRightY",
      _Magick_DrawableRoundRectangle_templ::InstanceMethod("lowerRightY",
        &_Magick_DrawableRoundRectangle_templ::_wrap_DrawableRoundRectangle__wrap_Magick_DrawableRoundRectangle_lowerRightY,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("cornerWidth");
  members.insert({
    "cornerWidth",
      _Magick_DrawableRoundRectangle_templ::InstanceMethod("cornerWidth",
        &_Magick_DrawableRoundRectangle_templ::_wrap_DrawableRoundRectangle__wrap_Magick_DrawableRoundRectangle_cornerWidth,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("cornerHeight");
  members.insert({
    "cornerHeight",
      _Magick_DrawableRoundRectangle_templ::InstanceMethod("cornerHeight",
        &_Magick_DrawableRoundRectangle_templ::_wrap_DrawableRoundRectangle__wrap_Magick_DrawableRoundRectangle_cornerHeight,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}

