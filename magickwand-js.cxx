/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#include "swig/magickwand-js.h"

/* -----------------------------------------------------------------------------
 * swigrun_body.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* ---------------------------------------------------------------------------
 * SWIG Node-API runtime : code
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME Napi::Error SWIG_NAPI_NewError(Napi::Env env, int type, const char *msg) {
  switch(type) {
    default:
    case SWIG_IOError:
    case SWIG_MemoryError:
    case SWIG_SystemError:
    case SWIG_RuntimeError:
    case SWIG_DivisionByZero:
    case SWIG_SyntaxError:
      return Napi::Error::New(env, msg);
    case SWIG_OverflowError:
    case SWIG_IndexError:
      return Napi::RangeError::New(env, msg);
    case SWIG_ValueError:
    case SWIG_TypeError:
      return Napi::TypeError::New(env, msg);
  }
}

SWIGRUNTIME inline Napi::Error SWIG_NAPI_NewError(Napi::Env env, const char *msg) {
  return SWIG_NAPI_NewError(env, SWIG_RuntimeError, msg);
}

SWIGRUNTIME inline Napi::Error SWIG_NAPI_NewError(Napi::Env env, Napi::Value obj, const char *msg, swig_type_info *info) {
  return Napi::Error(env, obj);
}

#ifdef NAPI_CPP_EXCEPTIONS

SWIGRUNTIME void SWIG_NAPI_Raise(Napi::Env env, const char *msg) {
  SWIG_NAPI_ASSERT_NOTNULL_ENV;
  throw Napi::Error::New(env, msg);
}

SWIGRUNTIME void SWIG_NAPI_Raise(Napi::Env env, int type, const char *msg) {
  SWIG_NAPI_ASSERT_NOTNULL_ENV;
  switch(type) {
    default:
    case SWIG_IOError:
    case SWIG_MemoryError:
    case SWIG_SystemError:
    case SWIG_RuntimeError:
    case SWIG_DivisionByZero:
    case SWIG_SyntaxError:
      throw Napi::Error::New(env, msg);
    case SWIG_OverflowError:
    case SWIG_IndexError:
      throw Napi::RangeError::New(env, msg);
    case SWIG_ValueError:
    case SWIG_TypeError:
      throw Napi::TypeError::New(env, msg);
  }
}

SWIGRUNTIME void SWIG_NAPI_Raise(Napi::Env env, Napi::Value obj,
        const char *msg, swig_type_info *info) {
  SWIG_NAPI_ASSERT_NOTNULL_ENV;
  throw Napi::Error(env, obj);
}

#else // NAPI_CPP_EXCEPTIONS

SWIGRUNTIME inline void SWIG_NAPI_Raise(Napi::Env env, int type, const char *msg) {
  SWIG_NAPI_NewError(env, type, msg).ThrowAsJavaScriptException();
}

SWIGRUNTIME inline void SWIG_NAPI_Raise(Napi::Env env, const char *msg) {
  SWIG_NAPI_Raise(env, SWIG_RuntimeError, msg);
}

SWIGRUNTIME inline void SWIG_NAPI_Raise(Napi::Env env, Napi::Value obj,
        const char *msg, swig_type_info *info) {
  SWIG_NAPI_NewError(env, obj, msg, info).ThrowAsJavaScriptException();
}

#endif // NAPI_CPP_EXCEPTIONS

void JS_veto_set_variable(const Napi::CallbackInfo &info) {
  SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

SWIG_Guard::SWIG_Guard(SWIG_Locks_List &_list) : list(_list), locked(false) {}
SWIG_Guard::~SWIG_Guard() {
  if (locked) {
    for (auto const &lock : list) {
      lock.second.second();
    }
  }
}

template <typename SWIG_OBJ_WRAP>
SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>::SWIG_NAPI_ObjectWrap_templ(const Napi::CallbackInfo &info) :
        Napi::ObjectWrap<SWIG_OBJ_WRAP>(info), size(0), info(SWIG_NULLPTR), _lock() { 
  Napi::Env env = info.Env();
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object of unknown type in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
  } else {
    SWIG_Error(SWIG_ERROR, "This constructor is not accessible from JS");
  }
  return;
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

template <typename SWIG_OBJ_WRAP>
Napi::Value SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>::ToString(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  static char repr[128];
  const char *name = SWIG_TypePrettyName(this->info);
  snprintf(repr, sizeof(repr), "{SwigObject %s (%s) at %p %s}",
    this->info ? this->info->name : "unknown",
    name ? name : "unknown",
    this->self,
    this->owned ? "[owned]" : "[copy]");
  return Napi::String::New(env, repr);
}

template <typename SWIG_OBJ_WRAP>
void SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
  SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
  SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

void SWIG_NAPI_ObjectWrap_inst::GetMembers(
        Napi::Env env,
        std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &members,
        std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &
) {
  members.erase("toString");
  members.insert({"toString", SWIG_NAPI_ObjectWrap_templ::InstanceMethod("toString", &SWIG_NAPI_ObjectWrap_templ::ToString)});
}

Napi::Function SWIG_NAPI_ObjectWrap_inst::GetClass(Napi::Env env) {
  return Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::DefineClass(env, "SwigObject", {});
}

SWIGRUNTIME bool SWIG_NAPI_IsWrappedObject(Napi::Env env, Napi::Object v) {
  SWIG_NAPI_ASSERT_NOTNULL_ENV;
  // Check if this is a SWIG wrapper
  Napi::FunctionReference *ctor = env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor;
  bool instanceOf;
  NAPI_CHECK_RESULT(v.InstanceOf(ctor->Value()), instanceOf);
  return instanceOf;
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return false;
#endif
}

SWIGRUNTIME int SWIG_NAPI_ConvertInstancePtr(Napi::Object objRef, void **ptr, swig_type_info *info, int flags) {
  SWIG_NAPI_ObjectWrap_inst *ow;
  Napi::Env env = objRef.Env();
  if(!objRef.IsObject()) return SWIG_ERROR;

  if (!SWIG_NAPI_IsWrappedObject(env, objRef)) {
    return SWIG_TypeError;
  }

  ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(objRef);

  // Now check if the SWIG type is compatible unless the types match exactly or the type is unknown
  if(info && ow->info != info && ow->info != SWIG_NULLPTR) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(ow->info, info);
    if (!tc && ow->info->name) {
      tc = SWIG_TypeCheck(ow->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
    int newmemory = 0;
    *ptr = SWIG_TypeCast(tc, ow->self, &newmemory);
    assert(!newmemory); /* newmemory handling not yet implemented */
  } else {
    *ptr = ow->self;
  }

  if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !ow->owned) {
    return SWIG_ERROR_RELEASE_NOT_OWNED;
  } else {
    if (flags & SWIG_POINTER_DISOWN) {
      ow->owned = false;
    }
    if (flags & SWIG_POINTER_CLEAR) {
      ow->self = SWIG_NULLPTR;
    }
  }
  return SWIG_OK;
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return SWIG_ERROR;
#endif
}


SWIGRUNTIME int SWIG_NAPI_GetInstancePtr(Napi::Value valRef, void **ptr) {
  SWIG_NAPI_ObjectWrap_inst *ow;
  if(!valRef.IsObject()) {
    return SWIG_TypeError;
  }
  Napi::Object objRef;
  NAPI_CHECK_RESULT(valRef.ToObject(), objRef);
  ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(objRef);

  if(ow->self == SWIG_NULLPTR) {
    return SWIG_ERROR;
  }

  *ptr = ow->self;
  return SWIG_OK;
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return SWIG_ERROR;
#endif
}


SWIGRUNTIME int SWIG_NAPI_ConvertPtr(Napi::Value valRef, void **ptr, swig_type_info *info, int flags) {
  // special case: JavaScript null => C NULL pointer
  if (valRef.IsNull()) {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  if (!valRef.IsObject()) {
    return SWIG_TypeError;
  }

  Napi::Object objRef;
  NAPI_CHECK_RESULT(valRef.ToObject(), objRef);
  return SWIG_NAPI_ConvertInstancePtr(objRef, ptr, info, flags);
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return SWIG_ERROR;
#endif
}

SWIGRUNTIME Napi::Value SWIG_NAPI_NewPointerObj(Napi::Env env, void *ptr, swig_type_info *info, int flags) {
  SWIG_NAPI_ASSERT_NOTNULL_ENV;
  Napi::External<void> native;
  Napi::FunctionReference *ctor;

  if (ptr == SWIG_NULLPTR) {
    return env.Null();
  }
  native = Napi::External<void>::New(env, ptr);

  size_t *idx = info != SWIG_NULLPTR ?
        reinterpret_cast<SWIG_NAPI_ClientData *>(info->clientdata) :
        SWIG_NULLPTR;
  if (idx == SWIG_NULLPTR) {
    // This type does not have a dedicated wrapper
    ctor = env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor;
  } else {
    ctor = env.GetInstanceData<EnvInstanceData>()->ctor[*idx];
  }

  Napi::Value wrapped;
  NAPI_CHECK_RESULT(ctor->New({native}), wrapped);

  // Preserve the type even if using the generic wrapper
  if (idx == SWIG_NULLPTR && info != SWIG_NULLPTR) {
    Napi::Object obj;
    NAPI_CHECK_RESULT(wrapped.ToObject(), obj);
    Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->info = info;
  }

  if ((flags & SWIG_POINTER_OWN) == SWIG_POINTER_OWN) {
    Napi::Object obj;
    NAPI_CHECK_RESULT(wrapped.ToObject(), obj);
    Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->owned = true;
  }

  return wrapped;
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return Napi::Value();
#endif
}

SWIGRUNTIME Napi::Value _SWIG_NAPI_wrap_equals(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(info.Length() != 1) SWIG_Error(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(info.This(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_Error(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(info[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_Error(SWIG_ArgError(res2), " in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult = Napi::Boolean::New(env, result);

  return jsresult;
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return Napi::Value();
#endif
}

SWIGRUNTIME Napi::Value _wrap_getCPtr(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(info.This(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_Error(SWIG_ArgError(res1), " in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = Napi::Number::New(env, result);

  return jsresult;
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return Napi::Value();
#endif
}

/* ---------------------------------------------------------------------------
 * PackedData object
 * (objects visible to JS that do not have a dedicated wrapper but must preserve type)
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME
Napi::Value SWIG_NAPI_NewPackedObj(Napi::Env env, void *data, size_t size, swig_type_info *type) {
  void *data_copy = new uint8_t[size];
  memcpy(data_copy, data, size);
  Napi::Value val = SWIG_NAPI_NewPointerObj(env, data_copy, type, SWIG_POINTER_OWN);
  Napi::Object obj;
  if (val.IsEmpty()) goto fail;

  NAPI_CHECK_RESULT(val.ToObject(), obj);
  Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->size = size;

fail:
  return val;
}

SWIGRUNTIME
int SWIG_NAPI_ConvertPacked(Napi::Value valRef, void *ptr, size_t size, swig_type_info *type) {
  void *tmp;
  if (!SWIG_IsOK(SWIG_NAPI_ConvertPtr(valRef, &tmp, type, 0))) {
    return SWIG_ERROR;
  }
  memcpy(ptr, tmp, size);
  return SWIG_OK;
}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_NAPI_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_NAPI_NewPackedObj(env, ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME
Napi::Value SWIG_NAPI_AppendOutput(Napi::Env env, Napi::Value result, Napi::Value obj) {
  if (result.IsUndefined()) {
    result = Napi::Array::New(env);
  } else if (!result.IsArray()) {
    Napi::Array tmparr = Napi::Array::New(env);
    tmparr.Set(static_cast<uint32_t>(0), result);
    result = tmparr;
  }

  Napi::Array arr = result.As<Napi::Array>();
  arr.Set(arr.Length(), obj);
  return arr;
}


// js_global_getter
Napi::Value exports_NAPI_VERSION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(6));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickCoreSignature_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(0xabacadabUL));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickPathExtent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(4096));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickTimeExtent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(26));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickEpsilon_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_double  SWIG_NAPI_FROM_CALL_ARGS(static_cast< double >(1.0e-12));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickMaximumValue_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_double  SWIG_NAPI_FROM_CALL_ARGS(static_cast< double >(1.79769313486231570E+308));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickMinimumValue_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_double  SWIG_NAPI_FROM_CALL_ARGS(static_cast< double >(2.22507385850720140E-308));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickOffsetFormat_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"lld");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickSizeFormat_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"llu");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedClass_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedClass));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DirectClass_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DirectClass));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PseudoClass_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PseudoClass));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MagickFalse_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MagickFalse));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MagickTrue_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MagickTrue));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ForgetGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ForgetGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NorthWestGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NorthWestGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NorthGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NorthGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NorthEastGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NorthEastGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WestGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WestGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CenterGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CenterGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_EastGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::EastGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SouthWestGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SouthWestGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SouthGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SouthGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SouthEastGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SouthEastGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CMYColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CMYColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CMYKColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CMYKColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GRAYColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GRAYColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HCLColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HCLColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HCLpColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HCLpColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HSBColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HSBColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HSIColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HSIColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HSLColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HSLColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HSVColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HSVColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HWBColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HWBColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LabColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LabColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LCHColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LCHColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LCHabColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LCHabColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LCHuvColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LCHuvColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LogColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LogColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LMSColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LMSColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LuvColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LuvColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OHTAColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OHTAColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_Rec601YCbCrColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::Rec601YCbCrColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_Rec709YCbCrColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::Rec709YCbCrColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RGBColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RGBColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_scRGBColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::scRGBColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_sRGBColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::sRGBColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TransparentColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TransparentColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_xyYColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::xyYColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_XYZColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::XYZColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_YCbCrColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::YCbCrColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_YCCColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::YCCColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_YDbDrColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::YDbDrColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_YIQColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::YIQColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_YPbPrColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::YPbPrColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_YUVColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::YUVColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LinearGRAYColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LinearGRAYColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_JzazbzColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::JzazbzColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DisplayP3Colorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DisplayP3Colorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_Adobe98Colorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::Adobe98Colorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ProPhotoColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ProPhotoColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OklabColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OklabColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OklchColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OklchColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RedChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RedChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GrayChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GrayChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CyanChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CyanChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GreenChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GreenChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MagentaChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MagentaChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_aChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::aChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlueChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlueChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_bChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::bChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_YellowChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::YellowChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlackChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlackChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AlphaChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AlphaChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OpacityChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OpacityChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_IndexChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::IndexChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ReadMaskChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ReadMaskChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WriteMaskChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WriteMaskChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MetaChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MetaChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CompositeMaskChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CompositeMaskChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CompositeChannels_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CompositeChannels));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AllChannels_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AllChannels));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TrueAlphaChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TrueAlphaChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RGBChannels_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RGBChannels));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GrayChannels_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GrayChannels));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SyncChannels_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SyncChannels));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DefaultChannels_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DefaultChannels));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedPixel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedPixel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CharPixel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CharPixel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DoublePixel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DoublePixel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FloatPixel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FloatPixel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LongPixel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LongPixel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LongLongPixel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LongLongPixel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_QuantumPixel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::QuantumPixel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ShortPixel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ShortPixel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickMaxBufferExtent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(81920));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickMinBufferExtent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(16384));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedException_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedException));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WarningException_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WarningException));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ResourceLimitWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ResourceLimitWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TypeWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TypeWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OptionWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OptionWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DelegateWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DelegateWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MissingDelegateWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MissingDelegateWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CorruptImageWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CorruptImageWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FileOpenWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FileOpenWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlobWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlobWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StreamWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StreamWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CacheWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CacheWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CoderWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CoderWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FilterWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FilterWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ModuleWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ModuleWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DrawWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DrawWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImageWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImageWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WandWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WandWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RandomWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RandomWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_XServerWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::XServerWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MonitorWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MonitorWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RegistryWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RegistryWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ConfigureWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ConfigureWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PolicyWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PolicyWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ErrorException_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ErrorException));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ResourceLimitError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ResourceLimitError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TypeError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TypeError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OptionError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OptionError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DelegateError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DelegateError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MissingDelegateError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MissingDelegateError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CorruptImageError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CorruptImageError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FileOpenError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FileOpenError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlobError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlobError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StreamError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StreamError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CacheError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CacheError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CoderError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CoderError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FilterError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FilterError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ModuleError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ModuleError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DrawError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DrawError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImageError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImageError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WandError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WandError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RandomError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RandomError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_XServerError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::XServerError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MonitorError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MonitorError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RegistryError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RegistryError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ConfigureError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ConfigureError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PolicyError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PolicyError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FatalErrorException_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FatalErrorException));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ResourceLimitFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ResourceLimitFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TypeFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TypeFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OptionFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OptionFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DelegateFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DelegateFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MissingDelegateFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MissingDelegateFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CorruptImageFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CorruptImageFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FileOpenFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FileOpenFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlobFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlobFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StreamFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StreamFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CacheFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CacheFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CoderFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CoderFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FilterFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FilterFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ModuleFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ModuleFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DrawFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DrawFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImageFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImageFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WandFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WandFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RandomFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RandomFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_XServerFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::XServerFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MonitorFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MonitorFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RegistryFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RegistryFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ConfigureFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ConfigureFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PolicyFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PolicyFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedCompliance_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedCompliance));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NoCompliance_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NoCompliance));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CSSCompliance_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CSSCompliance));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SVGCompliance_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SVGCompliance));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_X11Compliance_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::X11Compliance));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_XPMCompliance_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::XPMCompliance));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MVGCompliance_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MVGCompliance));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AllCompliance_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AllCompliance));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedIlluminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedIlluminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AIlluminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AIlluminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BIlluminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BIlluminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CIlluminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CIlluminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_D50Illuminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::D50Illuminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_D55Illuminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::D55Illuminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_D65Illuminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::D65Illuminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_D75Illuminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::D75Illuminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_EIlluminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::EIlluminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_F2Illuminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::F2Illuminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_F7Illuminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::F7Illuminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_F11Illuminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::F11Illuminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AlphaCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AlphaCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AtopCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AtopCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlendCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlendCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlurCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlurCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BumpmapCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BumpmapCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ChangeMaskCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ChangeMaskCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ClearCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ClearCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ColorBurnCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ColorBurnCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ColorDodgeCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ColorDodgeCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ColorizeCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ColorizeCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CopyBlackCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CopyBlackCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CopyBlueCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CopyBlueCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CopyCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CopyCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CopyCyanCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CopyCyanCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CopyGreenCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CopyGreenCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CopyMagentaCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CopyMagentaCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CopyAlphaCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CopyAlphaCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CopyRedCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CopyRedCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CopyYellowCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CopyYellowCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DarkenCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DarkenCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DarkenIntensityCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DarkenIntensityCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DifferenceCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DifferenceCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DisplaceCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DisplaceCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DissolveCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DissolveCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DistortCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DistortCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DivideDstCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DivideDstCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DivideSrcCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DivideSrcCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DstAtopCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DstAtopCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DstCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DstCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DstInCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DstInCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DstOutCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DstOutCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DstOverCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DstOverCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ExclusionCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ExclusionCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HardLightCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HardLightCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HardMixCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HardMixCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HueCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HueCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_InCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::InCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_IntensityCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::IntensityCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LightenCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LightenCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LightenIntensityCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LightenIntensityCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LinearBurnCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LinearBurnCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LinearDodgeCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LinearDodgeCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LinearLightCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LinearLightCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LuminizeCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LuminizeCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MathematicsCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MathematicsCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MinusDstCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MinusDstCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MinusSrcCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MinusSrcCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ModulateCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ModulateCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ModulusAddCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ModulusAddCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ModulusSubtractCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ModulusSubtractCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MultiplyCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MultiplyCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NoCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NoCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OutCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OutCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OverCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OverCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OverlayCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OverlayCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PegtopLightCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PegtopLightCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PinLightCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PinLightCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PlusCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PlusCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ReplaceCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ReplaceCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SaturateCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SaturateCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ScreenCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ScreenCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SoftLightCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SoftLightCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SrcAtopCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SrcAtopCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SrcCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SrcCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SrcInCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SrcInCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SrcOutCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SrcOutCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SrcOverCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SrcOverCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ThresholdCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ThresholdCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_VividLightCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::VividLightCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_XorCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::XorCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StereoCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StereoCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FreezeCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FreezeCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_InterpolateCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::InterpolateCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NegateCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NegateCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ReflectCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ReflectCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SoftBurnCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SoftBurnCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SoftDodgeCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SoftDodgeCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StampCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StampCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RMSECompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RMSECompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SaliencyBlendCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SaliencyBlendCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SeamlessBlendCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SeamlessBlendCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_B44ACompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::B44ACompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_B44Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::B44Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BZipCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BZipCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DXT1Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DXT1Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DXT3Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DXT3Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DXT5Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DXT5Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FaxCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FaxCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_Group4Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::Group4Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_JBIG1Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::JBIG1Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_JBIG2Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::JBIG2Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_JPEG2000Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::JPEG2000Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_JPEGCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::JPEGCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LosslessJPEGCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LosslessJPEGCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LZMACompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LZMACompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LZWCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LZWCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NoCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NoCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PizCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PizCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_Pxr24Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::Pxr24Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RLECompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RLECompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ZipCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ZipCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ZipSCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ZipSCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ZstdCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ZstdCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WebPCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WebPCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DWAACompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DWAACompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DWABCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DWABCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BC7Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BC7Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BC5Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BC5Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LERCCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LERCCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UnityKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UnityKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GaussianKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GaussianKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DoGKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DoGKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LoGKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LoGKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlurKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlurKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CometKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CometKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BinomialKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BinomialKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LaplacianKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LaplacianKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SobelKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SobelKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FreiChenKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FreiChenKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RobertsKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RobertsKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PrewittKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PrewittKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CompassKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CompassKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_KirschKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::KirschKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DiamondKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DiamondKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SquareKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SquareKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RectangleKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RectangleKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OctagonKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OctagonKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DiskKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DiskKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PlusKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PlusKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CrossKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CrossKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RingKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RingKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PeaksKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PeaksKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_EdgesKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::EdgesKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CornersKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CornersKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DiagonalsKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DiagonalsKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LineEndsKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LineEndsKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LineJunctionsKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LineJunctionsKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RidgesKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RidgesKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ConvexHullKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ConvexHullKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ThinSEKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ThinSEKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SkeletonKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SkeletonKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ChebyshevKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ChebyshevKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ManhattanKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ManhattanKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OctagonalKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OctagonalKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_EuclideanKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::EuclideanKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UserDefinedKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UserDefinedKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RotatePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RotatePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ShearPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ShearPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RollPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RollPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HuePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HuePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SaturationPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SaturationPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BrightnessPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BrightnessPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GammaPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GammaPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SpiffPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SpiffPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DullPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DullPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GrayscalePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GrayscalePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_QuantizePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::QuantizePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DespecklePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DespecklePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ReduceNoisePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ReduceNoisePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AddNoisePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AddNoisePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SharpenPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SharpenPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlurPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlurPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ThresholdPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ThresholdPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_EdgeDetectPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::EdgeDetectPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SpreadPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SpreadPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SolarizePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SolarizePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ShadePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ShadePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RaisePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RaisePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SegmentPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SegmentPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SwirlPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SwirlPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImplodePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImplodePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WavePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WavePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OilPaintPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OilPaintPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CharcoalDrawingPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CharcoalDrawingPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_JPEGPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::JPEGPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UnrecognizedDispose_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UnrecognizedDispose));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedDispose_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedDispose));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NoneDispose_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NoneDispose));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BackgroundDispose_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BackgroundDispose));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PreviousDispose_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PreviousDispose));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedEndian_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedEndian));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LSBEndian_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LSBEndian));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MSBEndian_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MSBEndian));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedQuantumAlpha_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedQuantumAlpha));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AssociatedQuantumAlpha_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AssociatedQuantumAlpha));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DisassociatedQuantumAlpha_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DisassociatedQuantumAlpha));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedQuantumFormat_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedQuantumFormat));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FloatingPointQuantumFormat_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FloatingPointQuantumFormat));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SignedQuantumFormat_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SignedQuantumFormat));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UnsignedQuantumFormat_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UnsignedQuantumFormat));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AlphaQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AlphaQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BGRAQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BGRAQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BGROQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BGROQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BGRQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BGRQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlackQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlackQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlueQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlueQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CbYCrAQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CbYCrAQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CbYCrQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CbYCrQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CbYCrYQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CbYCrYQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CMYKAQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CMYKAQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CMYKOQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CMYKOQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CMYKQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CMYKQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CyanQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CyanQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GrayAlphaQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GrayAlphaQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GrayQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GrayQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GreenQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GreenQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_IndexAlphaQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::IndexAlphaQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_IndexQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::IndexQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MagentaQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MagentaQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OpacityQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OpacityQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RedQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RedQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RGBAQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RGBAQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RGBOQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RGBOQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RGBPadQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RGBPadQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RGBQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RGBQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_YellowQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::YellowQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MultispectralQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MultispectralQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PointFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PointFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BoxFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BoxFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TriangleFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TriangleFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HermiteFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HermiteFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HannFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HannFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HammingFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HammingFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlackmanFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlackmanFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GaussianFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GaussianFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_QuadraticFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::QuadraticFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CubicFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CubicFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CatromFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CatromFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MitchellFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MitchellFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_JincFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::JincFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SincFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SincFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SincFastFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SincFastFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_KaiserFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::KaiserFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WelchFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WelchFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ParzenFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ParzenFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BohmanFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BohmanFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BartlettFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BartlettFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LagrangeFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LagrangeFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LanczosFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LanczosFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LanczosSharpFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LanczosSharpFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_Lanczos2Filter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::Lanczos2Filter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_Lanczos2SharpFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::Lanczos2SharpFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RobidouxFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RobidouxFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RobidouxSharpFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RobidouxSharpFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CosineFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CosineFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SplineFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SplineFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LanczosRadiusFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LanczosRadiusFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CubicSplineFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CubicSplineFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SentinelFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SentinelFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BilevelType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BilevelType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GrayscaleType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GrayscaleType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GrayscaleAlphaType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GrayscaleAlphaType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PaletteType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PaletteType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PaletteAlphaType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PaletteAlphaType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TrueColorType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TrueColorType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TrueColorAlphaType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TrueColorAlphaType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ColorSeparationType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ColorSeparationType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ColorSeparationAlphaType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ColorSeparationAlphaType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OptimizeType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OptimizeType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PaletteBilevelAlphaType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PaletteBilevelAlphaType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedInterlace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedInterlace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NoInterlace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NoInterlace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LineInterlace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LineInterlace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PlaneInterlace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PlaneInterlace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PartitionInterlace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PartitionInterlace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GIFInterlace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GIFInterlace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_JPEGInterlace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::JPEGInterlace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PNGInterlace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PNGInterlace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedOrientation_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedOrientation));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TopLeftOrientation_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TopLeftOrientation));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TopRightOrientation_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TopRightOrientation));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BottomRightOrientation_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BottomRightOrientation));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BottomLeftOrientation_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BottomLeftOrientation));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LeftTopOrientation_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LeftTopOrientation));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RightTopOrientation_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RightTopOrientation));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RightBottomOrientation_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RightBottomOrientation));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LeftBottomOrientation_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LeftBottomOrientation));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedResolution_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedResolution));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PixelsPerInchResolution_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PixelsPerInchResolution));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PixelsPerCentimeterResolution_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PixelsPerCentimeterResolution));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedTransmitType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedTransmitType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FileTransmitType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FileTransmitType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlobTransmitType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlobTransmitType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StreamTransmitType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StreamTransmitType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImageTransmitType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImageTransmitType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NormalStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NormalStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UltraCondensedStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UltraCondensedStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ExtraCondensedStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ExtraCondensedStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CondensedStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CondensedStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SemiCondensedStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SemiCondensedStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SemiExpandedStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SemiExpandedStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ExpandedStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ExpandedStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ExtraExpandedStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ExtraExpandedStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UltraExpandedStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UltraExpandedStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AnyStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AnyStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedStyle_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedStyle));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NormalStyle_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NormalStyle));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ItalicStyle_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ItalicStyle));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ObliqueStyle_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ObliqueStyle));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AnyStyle_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AnyStyle));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BoldStyle_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BoldStyle));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedAlign_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedAlign));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LeftAlign_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LeftAlign));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CenterAlign_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CenterAlign));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RightAlign_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RightAlign));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedDecoration_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedDecoration));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NoDecoration_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NoDecoration));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UnderlineDecoration_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UnderlineDecoration));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OverlineDecoration_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OverlineDecoration));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LineThroughDecoration_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LineThroughDecoration));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedDirection_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedDirection));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RightToLeftDirection_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RightToLeftDirection));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LeftToRightDirection_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LeftToRightDirection));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TopToBottomDirection_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TopToBottomDirection));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedGradient_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedGradient));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LinearGradient_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LinearGradient));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RadialGradient_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RadialGradient));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedPrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedPrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AlphaPrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AlphaPrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ArcPrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ArcPrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BezierPrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BezierPrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CirclePrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CirclePrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ColorPrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ColorPrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_EllipsePrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::EllipsePrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImagePrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImagePrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LinePrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LinePrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PathPrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PathPrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PointPrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PointPrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PolygonPrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PolygonPrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PolylinePrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PolylinePrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RectanglePrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RectanglePrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RoundRectanglePrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RoundRectanglePrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TextPrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TextPrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedReference_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedReference));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GradientReference_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GradientReference));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedWordBreakType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedWordBreakType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NormalWordBreakType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NormalWordBreakType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BreakWordBreakType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BreakWordBreakType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedCache_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedCache));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DiskCache_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DiskCache));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DistributedCache_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DistributedCache));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MapCache_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MapCache));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MemoryCache_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MemoryCache));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PingCache_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PingCache));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AbsoluteErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AbsoluteErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FuzzErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FuzzErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MeanAbsoluteErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MeanAbsoluteErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MeanErrorPerPixelErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MeanErrorPerPixelErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MeanSquaredErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MeanSquaredErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NormalizedCrossCorrelationErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NormalizedCrossCorrelationErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PeakAbsoluteErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PeakAbsoluteErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PeakSignalToNoiseRatioErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PeakSignalToNoiseRatioErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PerceptualHashErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PerceptualHashErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RootMeanSquaredErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RootMeanSquaredErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StructuralSimilarityErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StructuralSimilarityErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StructuralDissimilarityErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StructuralDissimilarityErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedFormatType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedFormatType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImplicitFormatType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImplicitFormatType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ExplicitFormatType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ExplicitFormatType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedComplexOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedComplexOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AddComplexOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AddComplexOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ConjugateComplexOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ConjugateComplexOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DivideComplexOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DivideComplexOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MagnitudePhaseComplexOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MagnitudePhaseComplexOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MultiplyComplexOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MultiplyComplexOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RealImaginaryComplexOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RealImaginaryComplexOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SubtractComplexOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SubtractComplexOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickLogFilename_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"log.xml");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedEvents_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedEvents));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NoEvents_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NoEvents));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AccelerateEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AccelerateEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AnnotateEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AnnotateEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlobEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlobEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CacheEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CacheEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CoderEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CoderEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ConfigureEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ConfigureEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DeprecateEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DeprecateEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DrawEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DrawEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ExceptionEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ExceptionEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImageEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImageEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LocaleEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LocaleEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ModuleEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ModuleEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PixelEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PixelEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PolicyEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PolicyEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ResourceEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ResourceEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TraceEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TraceEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TransformEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TransformEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UserEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UserEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WandEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WandEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_X11Event_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::X11Event));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CommandEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CommandEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AllEvents_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AllEvents));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickPackageName_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"ImageMagick");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickCopyright_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"(C) 1999 ImageMagick Studio LLC");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickLibVersion_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x711));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickLibVersionText_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"7.1.1");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickLibAddendum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"-22");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickLibInterface_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(10));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickLibMinInterface_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(10));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickPlatform_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"x86_64");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickppLibVersionText_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"7.1.1");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickppLibAddendum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"-22");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickppLibInterface_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(5));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickppLibMinInterface_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(5));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickGitRevision_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"b5350adcb:20231203");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickReleaseDate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"2023-12-03");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickAuthoritativeLicense_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"https://imagemagick.org/script/license.php");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickAuthoritativeURL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"https://imagemagick.org");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickHomeURL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"file:///home/mmom/src/magickwand.js/lib/binding/linux-x64/ImageMagick/share/doc/ImageMagick-7/index.html");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickQuantumDepth_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"Q16");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickQuantumRange_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"65535");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickHDRISupport_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"-HDRI");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickVersion_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"ImageMagick 7.1.1-22 Q16-HDRI x86_64 b5350adcb:20231203 https://imagemagick.org");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MagickImageCoderModule_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MagickImageCoderModule));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MagickImageFilterModule_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MagickImageFilterModule));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedCLDeviceType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedCLDeviceType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CpuCLDeviceType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CpuCLDeviceType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GpuCLDeviceType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GpuCLDeviceType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NoValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NoValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ColorspaceValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ColorspaceValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CompareValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CompareValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CompositeValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CompositeValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ConvertValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ConvertValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FormatsDiskValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FormatsDiskValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FormatsMapValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FormatsMapValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FormatsMemoryValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FormatsMemoryValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_IdentifyValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::IdentifyValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImportExportValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImportExportValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MontageValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MontageValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StreamValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StreamValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MagickValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MagickValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AllValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AllValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedPolicyDomain_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedPolicyDomain));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CoderPolicyDomain_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CoderPolicyDomain));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DelegatePolicyDomain_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DelegatePolicyDomain));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FilterPolicyDomain_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FilterPolicyDomain));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PathPolicyDomain_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PathPolicyDomain));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ResourcePolicyDomain_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ResourcePolicyDomain));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SystemPolicyDomain_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SystemPolicyDomain));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CachePolicyDomain_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CachePolicyDomain));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ModulePolicyDomain_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ModulePolicyDomain));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedPolicyRights_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedPolicyRights));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NoPolicyRights_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NoPolicyRights));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ReadPolicyRights_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ReadPolicyRights));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WritePolicyRights_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WritePolicyRights));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ExecutePolicyRights_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ExecutePolicyRights));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AllPolicyRights_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AllPolicyRights));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(Napi::Value valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef.IsString()) {
    Napi::String js_str;
    NAPI_CHECK_RESULT(valRef.ToString(), js_str);

    std::string str = js_str.Utf8Value();
    size_t len = str.size() + 1;
    char* cstr = (char*) (new char[len]());
    memcpy(cstr, str.data(), len);
    
    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;
    
    return SWIG_OK;
  } else {
    if(valRef.IsObject()) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      Napi::Object obj;
      NAPI_CHECK_RESULT(valRef.ToObject(), obj);
      // try if the object is a wrapped char[]
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
    }
  }
  goto fail;
fail:
  return SWIG_TypeError;
}


SWIGINTERN
int SWIG_AsVal_int (Napi::Value valRef, int* val)
{
  if (!valRef.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(valRef.ToNumber(), num);
    *val = static_cast<int>(num.Int32Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


// js_global_getter
Napi::Value MagickCore_UndefinedRegistryType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedRegistryType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImageRegistryType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImageRegistryType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImageInfoRegistryType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImageInfoRegistryType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StringRegistryType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StringRegistryType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AreaResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AreaResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DiskResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DiskResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FileResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FileResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HeightResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HeightResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MapResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MapResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MemoryResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MemoryResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ThreadResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ThreadResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ThrottleResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ThrottleResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TimeResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TimeResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WidthResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WidthResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ListLengthResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ListLengthResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AbsEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AbsEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AddEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AddEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AddModulusEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AddModulusEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AndEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AndEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CosineEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CosineEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DivideEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DivideEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ExponentialEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ExponentialEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GaussianNoiseEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GaussianNoiseEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImpulseNoiseEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImpulseNoiseEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LaplacianNoiseEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LaplacianNoiseEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LeftShiftEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LeftShiftEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LogEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LogEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MaxEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MaxEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MeanEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MeanEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MedianEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MedianEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MinEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MinEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MultiplicativeNoiseEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MultiplicativeNoiseEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MultiplyEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MultiplyEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OrEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OrEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PoissonNoiseEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PoissonNoiseEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PowEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PowEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RightShiftEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RightShiftEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RootMeanSquareEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RootMeanSquareEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SetEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SetEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SineEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SineEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SubtractEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SubtractEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SumEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SumEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ThresholdBlackEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ThresholdBlackEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ThresholdEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ThresholdEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ThresholdWhiteEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ThresholdWhiteEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UniformNoiseEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UniformNoiseEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_XorEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::XorEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_InverseLogEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::InverseLogEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GradientStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GradientStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MaximumStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MaximumStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MeanStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MeanStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MedianStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MedianStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MinimumStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MinimumStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ModeStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ModeStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NonpeakStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NonpeakStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RootMeanSquareStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RootMeanSquareStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StandardDeviationStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StandardDeviationStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ContrastStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ContrastStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedPath_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedPath));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MagickPath_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MagickPath));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RootPath_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RootPath));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HeadPath_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HeadPath));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TailPath_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TailPath));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BasePath_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BasePath));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ExtensionPath_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ExtensionPath));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SubimagePath_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SubimagePath));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CanonicalPath_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CanonicalPath));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SubcanonicalPath_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SubcanonicalPath));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BasePathSansCompressExtension_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BasePathSansCompressExtension));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedNoise_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedNoise));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UniformNoise_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UniformNoise));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GaussianNoise_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GaussianNoise));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MultiplicativeGaussianNoise_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MultiplicativeGaussianNoise));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImpulseNoise_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImpulseNoise));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LaplacianNoise_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LaplacianNoise));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PoissonNoise_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PoissonNoise));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RandomNoise_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RandomNoise));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickWandSignature_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(0xabacadabUL));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


SWIGINTERN
Napi::Value SWIG_From_bool(Napi::Env env, bool val)
{
  return Napi::Boolean::New(env, val);
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_long (Napi::Value obj, unsigned long *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    if (num.Int64Value() < 0) {
      return SWIG_TypeError;
    }
    *val = static_cast<unsigned long>(num.Int64Value());
  }
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsPtr_std_string (Napi::Value obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}



SWIG_NAPI_AsyncContext::SWIG_NAPI_AsyncContext(Napi::Env _env) : 
    env(_env),
    SWIG_NAPI_deferred(Napi::Promise::Deferred(_env)),
    SWIG_NAPI_deferred_finalized(false) {}

SWIG_NAPI_AsyncContext::~SWIG_NAPI_AsyncContext() {
  if (!SWIG_NAPI_deferred_finalized) {
    // This fixes a very vicious leak
    // Once a Deferred has been created, it won't be destroyed
    // unless it is resolved or rejected - its destructor is a no-op
    // This code is triggered when synchronously throwing while parsing the args
    SWIG_NAPI_deferred.Resolve(env.Undefined());
    SWIG_NAPI_deferred_finalized = true;
  }
}

#ifdef NAPI_CPP_EXCEPTIONS
void SWIG_NAPI_AsyncContext::SWIG_NAPI_Fail(const Napi::Error &error) {
  if (!SWIG_NAPI_Cleanup()) goto fail;
  SWIG_NAPI_deferred_finalized = true;
  SWIG_NAPI_deferred.Reject(error.Value());
  goto fail;
fail:
  return;
}
#endif

SWIG_NAPI_AsyncWorker::SWIG_NAPI_AsyncWorker(
      Napi::Env _env,
      const char *name,
      SWIG_NAPI_AsyncContext *_context) :
    Napi::AsyncWorker(_env, name),
    context(_context),
    persistent(),
    saved_exception(nullptr) {}

SWIG_NAPI_AsyncWorker::~SWIG_NAPI_AsyncWorker() {
  // Release the persistent references
  for (Napi::ObjectReference *ref : persistent) {
    delete ref;
  }
  persistent.clear();
}

void SWIG_NAPI_AsyncWorker::OnOK() {
  Napi::Env env(Env());
  Napi::HandleScope scope(env);
#ifdef NAPI_CPP_EXCEPTIONS
  try {
    context->SWIG_NAPI_Rethrow(saved_exception);
  } catch (Napi::Error &error) {
    context->SWIG_NAPI_Fail(error);
    delete context;
    return;
  } catch (std::exception &ex) {
    Napi::Error error = Napi::Error::New(env, ex.what());
    context->SWIG_NAPI_Fail(error);
    delete context;
    return;
  }
#endif
  context->SWIG_NAPI_Resolve();
  delete context;
}

void SWIG_NAPI_AsyncWorker::OnError(const Napi::Error &error) {
  // This should never happen, we catch all errors now
  abort();
}

void SWIG_NAPI_AsyncWorker::Execute() {
#ifdef NAPI_CPP_EXCEPTIONS
  try {
    context->SWIG_NAPI_Execute();
  } catch (...) {
    saved_exception = std::current_exception();
  }
#else
  context->SWIG_NAPI_Execute();
#endif
}

Napi::Value SWIG_NAPI_AsyncWorker::Run(const Napi::CallbackInfo &info) {
  SWIG_NAPI_AsyncContext::Status rc;

#ifdef NAPI_CPP_EXCEPTIONS
  try {
    rc = context->SWIG_NAPI_Init(info);
  } catch (...) {
    delete context;
    delete this;
    throw;
  }
#else
  rc = context->SWIG_NAPI_Init(info);
#endif
  if (rc == SWIG_NAPI_AsyncContext::Status::REJECT) {
    Napi::Value r = context->SWIG_NAPI_Promise();
    context->SWIG_NAPI_Cleanup();
    delete context;
    delete this;
    return r;
  } else if (rc == SWIG_NAPI_AsyncContext::Status::THROW) {
    context->SWIG_NAPI_Cleanup();
    delete context;
    delete this;
    return Napi::Value();
  }

  Persist(info.This());
  for (size_t i = 0; i < info.Length(); i++) Persist(info[i]);
  Queue();
  return context->SWIG_NAPI_Promise();
}


SWIGINTERN
int SWIG_AsVal_float (Napi::Value obj, float *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }

  if(val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<float>(num.DoubleValue());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
int SWIG_AsVal_double (Napi::Value obj, double *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }

  if(val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<double>(num.DoubleValue());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
int SWIG_AsVal_bool (Napi::Value obj, bool *val)
{
  if(!obj.IsBoolean()) {
    return SWIG_TypeError;
  }

  Napi::Boolean b;
  NAPI_CHECK_RESULT(obj.ToBoolean(), b);
  if (val) *val = b.Value();
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_int (Napi::Value valRef, unsigned int* val)
{
  if (!valRef.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(valRef.ToNumber(), num);
    if (num.Int64Value() < 0) {
      return SWIG_TypeError;
    }
    *val = static_cast<unsigned int>(num.Uint32Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
int SWIG_AsVal_unsigned_SS_long_SS_long (Napi::Value obj, unsigned long long *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }
  if (obj.ToNumber().Int64Value() < 0) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<unsigned long long>(num.Int64Value());
  }
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}
#endif


// js_global_getter
Napi::Value exports_Magick_CoderInfo_header_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(1));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Magick__ColorCMYKTo_p_Magick__Color(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Color *)  ((Magick::ColorCMYK *) x));
}
static void *_p_Magick__ColorGrayTo_p_Magick__Color(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Color *)  ((Magick::ColorGray *) x));
}
static void *_p_Magick__ColorHSLTo_p_Magick__Color(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Color *)  ((Magick::ColorHSL *) x));
}
static void *_p_Magick__ColorMonoTo_p_Magick__Color(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Color *)  ((Magick::ColorMono *) x));
}
static void *_p_Magick__ColorRGBTo_p_Magick__Color(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Color *)  ((Magick::ColorRGB *) x));
}
static void *_p_Magick__ColorYUVTo_p_Magick__Color(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Color *)  ((Magick::ColorYUV *) x));
}
static void *_p_Magick__DrawableAffineTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableAffine *) x));
}
static void *_p_Magick__DrawableAlphaTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableAlpha *) x));
}
static void *_p_Magick__DrawableArcTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableArc *) x));
}
static void *_p_Magick__DrawableBezierTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableBezier *) x));
}
static void *_p_Magick__DrawableBorderColorTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableBorderColor *) x));
}
static void *_p_Magick__DrawableCircleTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableCircle *) x));
}
static void *_p_Magick__DrawableClipPathTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableClipPath *) x));
}
static void *_p_Magick__DrawableClipRuleTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableClipRule *) x));
}
static void *_p_Magick__DrawableClipUnitsTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableClipUnits *) x));
}
static void *_p_Magick__DrawableColorTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableColor *) x));
}
static void *_p_Magick__DrawableCompositeImageTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableCompositeImage *) x));
}
static void *_p_Magick__DrawableDensityTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableDensity *) x));
}
static void *_p_Magick__DrawableEllipseTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableEllipse *) x));
}
static void *_p_Magick__DrawableFillColorTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableFillColor *) x));
}
static void *_p_Magick__DrawableFillOpacityTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableFillOpacity *) x));
}
static void *_p_Magick__DrawableFillPatternUrlTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableFillPatternUrl *) x));
}
static void *_p_Magick__DrawableFillRuleTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableFillRule *) x));
}
static void *_p_Magick__DrawableFontTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableFont *) x));
}
static void *_p_Magick__DrawableGravityTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableGravity *) x));
}
static void *_p_Magick__DrawableLineTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableLine *) x));
}
static void *_p_Magick__DrawableMiterLimitTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableMiterLimit *) x));
}
static void *_p_Magick__DrawablePathTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawablePath *) x));
}
static void *_p_Magick__DrawablePointTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawablePoint *) x));
}
static void *_p_Magick__DrawablePointSizeTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawablePointSize *) x));
}
static void *_p_Magick__DrawablePolygonTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawablePolygon *) x));
}
static void *_p_Magick__DrawablePolylineTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawablePolyline *) x));
}
static void *_p_Magick__DrawablePopClipPathTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawablePopClipPath *) x));
}
static void *_p_Magick__DrawablePopGraphicContextTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawablePopGraphicContext *) x));
}
static void *_p_Magick__DrawablePopPatternTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawablePopPattern *) x));
}
static void *_p_Magick__DrawablePushClipPathTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawablePushClipPath *) x));
}
static void *_p_Magick__DrawablePushGraphicContextTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawablePushGraphicContext *) x));
}
static void *_p_Magick__DrawablePushPatternTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawablePushPattern *) x));
}
static void *_p_Magick__DrawableRectangleTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableRectangle *) x));
}
static void *_p_Magick__DrawableRotationTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableRotation *) x));
}
static void *_p_Magick__DrawableRoundRectangleTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableRoundRectangle *) x));
}
static void *_p_Magick__DrawableScalingTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableScaling *) x));
}
static void *_p_Magick__DrawableSkewXTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableSkewX *) x));
}
static void *_p_Magick__DrawableSkewYTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableSkewY *) x));
}
static void *_p_Magick__DrawableStrokeAntialiasTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableStrokeAntialias *) x));
}
static void *_p_Magick__DrawableStrokeColorTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableStrokeColor *) x));
}
static void *_p_Magick__DrawableStrokeDashArrayTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableStrokeDashArray *) x));
}
static void *_p_Magick__DrawableStrokeDashOffsetTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableStrokeDashOffset *) x));
}
static void *_p_Magick__DrawableStrokeLineCapTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableStrokeLineCap *) x));
}
static void *_p_Magick__DrawableStrokeLineJoinTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableStrokeLineJoin *) x));
}
static void *_p_Magick__DrawableStrokeOpacityTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableStrokeOpacity *) x));
}
static void *_p_Magick__DrawableStrokePatternUrlTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableStrokePatternUrl *) x));
}
static void *_p_Magick__DrawableStrokeWidthTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableStrokeWidth *) x));
}
static void *_p_Magick__DrawableTextTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableText *) x));
}
static void *_p_Magick__DrawableTextAlignmentTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableTextAlignment *) x));
}
static void *_p_Magick__DrawableTextAntialiasTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableTextAntialias *) x));
}
static void *_p_Magick__DrawableTextDecorationTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableTextDecoration *) x));
}
static void *_p_Magick__DrawableTextDirectionTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableTextDirection *) x));
}
static void *_p_Magick__DrawableTextInterlineSpacingTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableTextInterlineSpacing *) x));
}
static void *_p_Magick__DrawableTextInterwordSpacingTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableTextInterwordSpacing *) x));
}
static void *_p_Magick__DrawableTextKerningTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableTextKerning *) x));
}
static void *_p_Magick__DrawableTextUnderColorTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableTextUnderColor *) x));
}
static void *_p_Magick__DrawableTranslationTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableTranslation *) x));
}
static void *_p_Magick__DrawableViewboxTo_p_Magick__DrawableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::DrawableBase *)  ((Magick::DrawableViewbox *) x));
}
static void *_p_Magick__ErrorBlobTo_p_Magick__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Error *)  ((Magick::ErrorBlob *) x));
}
static void *_p_Magick__ErrorCacheTo_p_Magick__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Error *)  ((Magick::ErrorCache *) x));
}
static void *_p_Magick__ErrorCoderTo_p_Magick__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Error *)  ((Magick::ErrorCoder *) x));
}
static void *_p_Magick__ErrorConfigureTo_p_Magick__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Error *)  ((Magick::ErrorConfigure *) x));
}
static void *_p_Magick__ErrorCorruptImageTo_p_Magick__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Error *)  ((Magick::ErrorCorruptImage *) x));
}
static void *_p_Magick__ErrorDelegateTo_p_Magick__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Error *)  ((Magick::ErrorDelegate *) x));
}
static void *_p_Magick__ErrorDrawTo_p_Magick__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Error *)  ((Magick::ErrorDraw *) x));
}
static void *_p_Magick__ErrorFileOpenTo_p_Magick__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Error *)  ((Magick::ErrorFileOpen *) x));
}
static void *_p_Magick__ErrorImageTo_p_Magick__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Error *)  ((Magick::ErrorImage *) x));
}
static void *_p_Magick__ErrorMissingDelegateTo_p_Magick__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Error *)  ((Magick::ErrorMissingDelegate *) x));
}
static void *_p_Magick__ErrorModuleTo_p_Magick__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Error *)  ((Magick::ErrorModule *) x));
}
static void *_p_Magick__ErrorMonitorTo_p_Magick__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Error *)  ((Magick::ErrorMonitor *) x));
}
static void *_p_Magick__ErrorOptionTo_p_Magick__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Error *)  ((Magick::ErrorOption *) x));
}
static void *_p_Magick__ErrorPolicyTo_p_Magick__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Error *)  ((Magick::ErrorPolicy *) x));
}
static void *_p_Magick__ErrorRegistryTo_p_Magick__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Error *)  ((Magick::ErrorRegistry *) x));
}
static void *_p_Magick__ErrorResourceLimitTo_p_Magick__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Error *)  ((Magick::ErrorResourceLimit *) x));
}
static void *_p_Magick__ErrorStreamTo_p_Magick__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Error *)  ((Magick::ErrorStream *) x));
}
static void *_p_Magick__ErrorTypeTo_p_Magick__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Error *)  ((Magick::ErrorType *) x));
}
static void *_p_Magick__ErrorUndefinedTo_p_Magick__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Error *)  ((Magick::ErrorUndefined *) x));
}
static void *_p_Magick__ErrorXServerTo_p_Magick__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Error *)  ((Magick::ErrorXServer *) x));
}
static void *_p_Magick__ErrorTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *)  ((Magick::Error *) x));
}
static void *_p_Magick__ErrorBlobTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Error *) ((Magick::ErrorBlob *) x));
}
static void *_p_Magick__ErrorCacheTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Error *) ((Magick::ErrorCache *) x));
}
static void *_p_Magick__ErrorCoderTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Error *) ((Magick::ErrorCoder *) x));
}
static void *_p_Magick__ErrorConfigureTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Error *) ((Magick::ErrorConfigure *) x));
}
static void *_p_Magick__ErrorCorruptImageTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Error *) ((Magick::ErrorCorruptImage *) x));
}
static void *_p_Magick__ErrorDelegateTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Error *) ((Magick::ErrorDelegate *) x));
}
static void *_p_Magick__ErrorDrawTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Error *) ((Magick::ErrorDraw *) x));
}
static void *_p_Magick__ErrorFileOpenTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Error *) ((Magick::ErrorFileOpen *) x));
}
static void *_p_Magick__ErrorImageTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Error *) ((Magick::ErrorImage *) x));
}
static void *_p_Magick__ErrorMissingDelegateTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Error *) ((Magick::ErrorMissingDelegate *) x));
}
static void *_p_Magick__ErrorModuleTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Error *) ((Magick::ErrorModule *) x));
}
static void *_p_Magick__ErrorMonitorTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Error *) ((Magick::ErrorMonitor *) x));
}
static void *_p_Magick__ErrorOptionTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Error *) ((Magick::ErrorOption *) x));
}
static void *_p_Magick__ErrorPolicyTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Error *) ((Magick::ErrorPolicy *) x));
}
static void *_p_Magick__ErrorRegistryTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Error *) ((Magick::ErrorRegistry *) x));
}
static void *_p_Magick__ErrorResourceLimitTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Error *) ((Magick::ErrorResourceLimit *) x));
}
static void *_p_Magick__ErrorStreamTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Error *) ((Magick::ErrorStream *) x));
}
static void *_p_Magick__ErrorTypeTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Error *) ((Magick::ErrorType *) x));
}
static void *_p_Magick__ErrorUndefinedTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Error *) ((Magick::ErrorUndefined *) x));
}
static void *_p_Magick__ErrorXServerTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Error *) ((Magick::ErrorXServer *) x));
}
static void *_p_Magick__WarningTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *)  ((Magick::Warning *) x));
}
static void *_p_Magick__WarningBlobTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Warning *) ((Magick::WarningBlob *) x));
}
static void *_p_Magick__WarningCacheTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Warning *) ((Magick::WarningCache *) x));
}
static void *_p_Magick__WarningCoderTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Warning *) ((Magick::WarningCoder *) x));
}
static void *_p_Magick__WarningConfigureTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Warning *) ((Magick::WarningConfigure *) x));
}
static void *_p_Magick__WarningCorruptImageTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Warning *) ((Magick::WarningCorruptImage *) x));
}
static void *_p_Magick__WarningDelegateTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Warning *) ((Magick::WarningDelegate *) x));
}
static void *_p_Magick__WarningDrawTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Warning *) ((Magick::WarningDraw *) x));
}
static void *_p_Magick__WarningFileOpenTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Warning *) ((Magick::WarningFileOpen *) x));
}
static void *_p_Magick__WarningImageTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Warning *) ((Magick::WarningImage *) x));
}
static void *_p_Magick__WarningMissingDelegateTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Warning *) ((Magick::WarningMissingDelegate *) x));
}
static void *_p_Magick__WarningModuleTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Warning *) ((Magick::WarningModule *) x));
}
static void *_p_Magick__WarningMonitorTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Warning *) ((Magick::WarningMonitor *) x));
}
static void *_p_Magick__WarningOptionTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Warning *) ((Magick::WarningOption *) x));
}
static void *_p_Magick__WarningPolicyTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Warning *) ((Magick::WarningPolicy *) x));
}
static void *_p_Magick__WarningRegistryTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Warning *) ((Magick::WarningRegistry *) x));
}
static void *_p_Magick__WarningResourceLimitTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Warning *) ((Magick::WarningResourceLimit *) x));
}
static void *_p_Magick__WarningStreamTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Warning *) ((Magick::WarningStream *) x));
}
static void *_p_Magick__WarningTypeTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Warning *) ((Magick::WarningType *) x));
}
static void *_p_Magick__WarningUndefinedTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Warning *) ((Magick::WarningUndefined *) x));
}
static void *_p_Magick__WarningXServerTo_p_Magick__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Exception *) (Magick::Warning *) ((Magick::WarningXServer *) x));
}
static void *_p_Magick__MontageFramedTo_p_Magick__Montage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Montage *)  ((Magick::MontageFramed *) x));
}
static void *_p_Magick__PathArcAbsTo_p_Magick__VPathBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::VPathBase *)  ((Magick::PathArcAbs *) x));
}
static void *_p_Magick__PathArcRelTo_p_Magick__VPathBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::VPathBase *)  ((Magick::PathArcRel *) x));
}
static void *_p_Magick__PathClosePathTo_p_Magick__VPathBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::VPathBase *)  ((Magick::PathClosePath *) x));
}
static void *_p_Magick__PathCurvetoAbsTo_p_Magick__VPathBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::VPathBase *)  ((Magick::PathCurvetoAbs *) x));
}
static void *_p_Magick__PathCurvetoRelTo_p_Magick__VPathBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::VPathBase *)  ((Magick::PathCurvetoRel *) x));
}
static void *_p_Magick__PathLinetoAbsTo_p_Magick__VPathBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::VPathBase *)  ((Magick::PathLinetoAbs *) x));
}
static void *_p_Magick__PathLinetoHorizontalAbsTo_p_Magick__VPathBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::VPathBase *)  ((Magick::PathLinetoHorizontalAbs *) x));
}
static void *_p_Magick__PathLinetoHorizontalRelTo_p_Magick__VPathBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::VPathBase *)  ((Magick::PathLinetoHorizontalRel *) x));
}
static void *_p_Magick__PathLinetoRelTo_p_Magick__VPathBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::VPathBase *)  ((Magick::PathLinetoRel *) x));
}
static void *_p_Magick__PathLinetoVerticalAbsTo_p_Magick__VPathBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::VPathBase *)  ((Magick::PathLinetoVerticalAbs *) x));
}
static void *_p_Magick__PathLinetoVerticalRelTo_p_Magick__VPathBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::VPathBase *)  ((Magick::PathLinetoVerticalRel *) x));
}
static void *_p_Magick__PathMovetoAbsTo_p_Magick__VPathBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::VPathBase *)  ((Magick::PathMovetoAbs *) x));
}
static void *_p_Magick__PathMovetoRelTo_p_Magick__VPathBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::VPathBase *)  ((Magick::PathMovetoRel *) x));
}
static void *_p_Magick__PathQuadraticCurvetoAbsTo_p_Magick__VPathBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::VPathBase *)  ((Magick::PathQuadraticCurvetoAbs *) x));
}
static void *_p_Magick__PathQuadraticCurvetoRelTo_p_Magick__VPathBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::VPathBase *)  ((Magick::PathQuadraticCurvetoRel *) x));
}
static void *_p_Magick__PathSmoothCurvetoAbsTo_p_Magick__VPathBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::VPathBase *)  ((Magick::PathSmoothCurvetoAbs *) x));
}
static void *_p_Magick__PathSmoothCurvetoRelTo_p_Magick__VPathBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::VPathBase *)  ((Magick::PathSmoothCurvetoRel *) x));
}
static void *_p_Magick__PathSmoothQuadraticCurvetoAbsTo_p_Magick__VPathBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::VPathBase *)  ((Magick::PathSmoothQuadraticCurvetoAbs *) x));
}
static void *_p_Magick__PathSmoothQuadraticCurvetoRelTo_p_Magick__VPathBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::VPathBase *)  ((Magick::PathSmoothQuadraticCurvetoRel *) x));
}
static void *_p_Magick__WarningBlobTo_p_Magick__Warning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Warning *)  ((Magick::WarningBlob *) x));
}
static void *_p_Magick__WarningCacheTo_p_Magick__Warning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Warning *)  ((Magick::WarningCache *) x));
}
static void *_p_Magick__WarningCoderTo_p_Magick__Warning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Warning *)  ((Magick::WarningCoder *) x));
}
static void *_p_Magick__WarningConfigureTo_p_Magick__Warning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Warning *)  ((Magick::WarningConfigure *) x));
}
static void *_p_Magick__WarningCorruptImageTo_p_Magick__Warning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Warning *)  ((Magick::WarningCorruptImage *) x));
}
static void *_p_Magick__WarningDelegateTo_p_Magick__Warning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Warning *)  ((Magick::WarningDelegate *) x));
}
static void *_p_Magick__WarningDrawTo_p_Magick__Warning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Warning *)  ((Magick::WarningDraw *) x));
}
static void *_p_Magick__WarningFileOpenTo_p_Magick__Warning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Warning *)  ((Magick::WarningFileOpen *) x));
}
static void *_p_Magick__WarningImageTo_p_Magick__Warning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Warning *)  ((Magick::WarningImage *) x));
}
static void *_p_Magick__WarningMissingDelegateTo_p_Magick__Warning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Warning *)  ((Magick::WarningMissingDelegate *) x));
}
static void *_p_Magick__WarningModuleTo_p_Magick__Warning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Warning *)  ((Magick::WarningModule *) x));
}
static void *_p_Magick__WarningMonitorTo_p_Magick__Warning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Warning *)  ((Magick::WarningMonitor *) x));
}
static void *_p_Magick__WarningOptionTo_p_Magick__Warning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Warning *)  ((Magick::WarningOption *) x));
}
static void *_p_Magick__WarningPolicyTo_p_Magick__Warning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Warning *)  ((Magick::WarningPolicy *) x));
}
static void *_p_Magick__WarningRegistryTo_p_Magick__Warning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Warning *)  ((Magick::WarningRegistry *) x));
}
static void *_p_Magick__WarningResourceLimitTo_p_Magick__Warning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Warning *)  ((Magick::WarningResourceLimit *) x));
}
static void *_p_Magick__WarningStreamTo_p_Magick__Warning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Warning *)  ((Magick::WarningStream *) x));
}
static void *_p_Magick__WarningTypeTo_p_Magick__Warning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Warning *)  ((Magick::WarningType *) x));
}
static void *_p_Magick__WarningUndefinedTo_p_Magick__Warning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Warning *)  ((Magick::WarningUndefined *) x));
}
static void *_p_Magick__WarningXServerTo_p_Magick__Warning(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Magick::Warning *)  ((Magick::WarningXServer *) x));
}
static void *_p_Magick__ErrorTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *) ((Magick::Error *) x));
}
static void *_p_Magick__ErrorBlobTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Error *) ((Magick::ErrorBlob *) x));
}
static void *_p_Magick__ErrorCacheTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Error *) ((Magick::ErrorCache *) x));
}
static void *_p_Magick__ErrorCoderTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Error *) ((Magick::ErrorCoder *) x));
}
static void *_p_Magick__ErrorConfigureTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Error *) ((Magick::ErrorConfigure *) x));
}
static void *_p_Magick__ErrorCorruptImageTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Error *) ((Magick::ErrorCorruptImage *) x));
}
static void *_p_Magick__ErrorDelegateTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Error *) ((Magick::ErrorDelegate *) x));
}
static void *_p_Magick__ErrorDrawTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Error *) ((Magick::ErrorDraw *) x));
}
static void *_p_Magick__ErrorFileOpenTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Error *) ((Magick::ErrorFileOpen *) x));
}
static void *_p_Magick__ErrorImageTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Error *) ((Magick::ErrorImage *) x));
}
static void *_p_Magick__ErrorMissingDelegateTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Error *) ((Magick::ErrorMissingDelegate *) x));
}
static void *_p_Magick__ErrorModuleTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Error *) ((Magick::ErrorModule *) x));
}
static void *_p_Magick__ErrorMonitorTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Error *) ((Magick::ErrorMonitor *) x));
}
static void *_p_Magick__ErrorOptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Error *) ((Magick::ErrorOption *) x));
}
static void *_p_Magick__ErrorPolicyTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Error *) ((Magick::ErrorPolicy *) x));
}
static void *_p_Magick__ErrorRegistryTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Error *) ((Magick::ErrorRegistry *) x));
}
static void *_p_Magick__ErrorResourceLimitTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Error *) ((Magick::ErrorResourceLimit *) x));
}
static void *_p_Magick__ErrorStreamTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Error *) ((Magick::ErrorStream *) x));
}
static void *_p_Magick__ErrorTypeTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Error *) ((Magick::ErrorType *) x));
}
static void *_p_Magick__ErrorUndefinedTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Error *) ((Magick::ErrorUndefined *) x));
}
static void *_p_Magick__ErrorXServerTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Error *) ((Magick::ErrorXServer *) x));
}
static void *_p_Magick__ExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((Magick::Exception *) x));
}
static void *_p_Magick__WarningTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *) ((Magick::Warning *) x));
}
static void *_p_Magick__WarningBlobTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Warning *) ((Magick::WarningBlob *) x));
}
static void *_p_Magick__WarningCacheTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Warning *) ((Magick::WarningCache *) x));
}
static void *_p_Magick__WarningCoderTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Warning *) ((Magick::WarningCoder *) x));
}
static void *_p_Magick__WarningConfigureTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Warning *) ((Magick::WarningConfigure *) x));
}
static void *_p_Magick__WarningCorruptImageTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Warning *) ((Magick::WarningCorruptImage *) x));
}
static void *_p_Magick__WarningDelegateTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Warning *) ((Magick::WarningDelegate *) x));
}
static void *_p_Magick__WarningDrawTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Warning *) ((Magick::WarningDraw *) x));
}
static void *_p_Magick__WarningFileOpenTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Warning *) ((Magick::WarningFileOpen *) x));
}
static void *_p_Magick__WarningImageTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Warning *) ((Magick::WarningImage *) x));
}
static void *_p_Magick__WarningMissingDelegateTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Warning *) ((Magick::WarningMissingDelegate *) x));
}
static void *_p_Magick__WarningModuleTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Warning *) ((Magick::WarningModule *) x));
}
static void *_p_Magick__WarningMonitorTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Warning *) ((Magick::WarningMonitor *) x));
}
static void *_p_Magick__WarningOptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Warning *) ((Magick::WarningOption *) x));
}
static void *_p_Magick__WarningPolicyTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Warning *) ((Magick::WarningPolicy *) x));
}
static void *_p_Magick__WarningRegistryTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Warning *) ((Magick::WarningRegistry *) x));
}
static void *_p_Magick__WarningResourceLimitTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Warning *) ((Magick::WarningResourceLimit *) x));
}
static void *_p_Magick__WarningStreamTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Warning *) ((Magick::WarningStream *) x));
}
static void *_p_Magick__WarningTypeTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Warning *) ((Magick::WarningType *) x));
}
static void *_p_Magick__WarningUndefinedTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Warning *) ((Magick::WarningUndefined *) x));
}
static void *_p_Magick__WarningXServerTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Magick::Exception *)(Magick::Warning *) ((Magick::WarningXServer *) x));
}
SWIGINTERN swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_ImageListContainer = {"_p_ImageListContainer", "ImageListContainer *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_ImageListIterator = {"_p_ImageListIterator", "ImageListIterator *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__AlignType = {"_p_MagickCore__AlignType", "MagickCore::AlignType *|enum MagickCore::AlignType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__CacheType = {"_p_MagickCore__CacheType", "MagickCore::CacheType *|enum MagickCore::CacheType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__ChannelType = {"_p_MagickCore__ChannelType", "MagickCore::ChannelType *|enum MagickCore::ChannelType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__ClassType = {"_p_MagickCore__ClassType", "MagickCore::ClassType *|enum MagickCore::ClassType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__ColorspaceType = {"_p_MagickCore__ColorspaceType", "MagickCore::ColorspaceType *|enum MagickCore::ColorspaceType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__ComplexOperator = {"_p_MagickCore__ComplexOperator", "MagickCore::ComplexOperator *|enum MagickCore::ComplexOperator *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__ComplianceType = {"_p_MagickCore__ComplianceType", "MagickCore::ComplianceType *|enum MagickCore::ComplianceType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__CompositeOperator = {"_p_MagickCore__CompositeOperator", "MagickCore::CompositeOperator *|enum MagickCore::CompositeOperator *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__CompressionType = {"_p_MagickCore__CompressionType", "MagickCore::CompressionType *|enum MagickCore::CompressionType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__DecorationType = {"_p_MagickCore__DecorationType", "MagickCore::DecorationType *|enum MagickCore::DecorationType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__DirectionType = {"_p_MagickCore__DirectionType", "MagickCore::DirectionType *|enum MagickCore::DirectionType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__DisposeType = {"_p_MagickCore__DisposeType", "MagickCore::DisposeType *|enum MagickCore::DisposeType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__EndianType = {"_p_MagickCore__EndianType", "MagickCore::EndianType *|enum MagickCore::EndianType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__ExceptionType = {"_p_MagickCore__ExceptionType", "MagickCore::ExceptionType *|enum MagickCore::ExceptionType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__FilterType = {"_p_MagickCore__FilterType", "MagickCore::FilterType *|enum MagickCore::FilterType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__GradientType = {"_p_MagickCore__GradientType", "MagickCore::GradientType *|enum MagickCore::GradientType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__GravityType = {"_p_MagickCore__GravityType", "MagickCore::GravityType *|enum MagickCore::GravityType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__IlluminantType = {"_p_MagickCore__IlluminantType", "MagickCore::IlluminantType *|enum MagickCore::IlluminantType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__ImageType = {"_p_MagickCore__ImageType", "MagickCore::ImageType *|enum MagickCore::ImageType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__InterlaceType = {"_p_MagickCore__InterlaceType", "MagickCore::InterlaceType *|enum MagickCore::InterlaceType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__KernelInfoType = {"_p_MagickCore__KernelInfoType", "MagickCore::KernelInfoType *|enum MagickCore::KernelInfoType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__LogEventType = {"_p_MagickCore__LogEventType", "MagickCore::LogEventType *|enum MagickCore::LogEventType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__MagickBooleanType = {"_p_MagickCore__MagickBooleanType", "MagickCore::MagickBooleanType *|enum MagickCore::MagickBooleanType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__MagickCLDeviceType = {"_p_MagickCore__MagickCLDeviceType", "MagickCore::MagickCLDeviceType *|enum MagickCore::MagickCLDeviceType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__MagickEvaluateOperator = {"_p_MagickCore__MagickEvaluateOperator", "MagickCore::MagickEvaluateOperator *|enum MagickCore::MagickEvaluateOperator *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__MagickFormatType = {"_p_MagickCore__MagickFormatType", "MagickCore::MagickFormatType *|enum MagickCore::MagickFormatType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__MagickModuleType = {"_p_MagickCore__MagickModuleType", "MagickCore::MagickModuleType *|enum MagickCore::MagickModuleType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__MetricType = {"_p_MagickCore__MetricType", "MagickCore::MetricType *|enum MagickCore::MetricType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__NoiseType = {"_p_MagickCore__NoiseType", "MagickCore::NoiseType *|enum MagickCore::NoiseType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__OrientationType = {"_p_MagickCore__OrientationType", "MagickCore::OrientationType *|enum MagickCore::OrientationType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__PathType = {"_p_MagickCore__PathType", "MagickCore::PathType *|enum MagickCore::PathType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__PolicyDomain = {"_p_MagickCore__PolicyDomain", "MagickCore::PolicyDomain *|enum MagickCore::PolicyDomain *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__PolicyRights = {"_p_MagickCore__PolicyRights", "MagickCore::PolicyRights *|enum MagickCore::PolicyRights *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__PreviewType = {"_p_MagickCore__PreviewType", "MagickCore::PreviewType *|enum MagickCore::PreviewType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__PrimitiveType = {"_p_MagickCore__PrimitiveType", "MagickCore::PrimitiveType *|enum MagickCore::PrimitiveType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__QuantumAlphaType = {"_p_MagickCore__QuantumAlphaType", "MagickCore::QuantumAlphaType *|enum MagickCore::QuantumAlphaType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__QuantumFormatType = {"_p_MagickCore__QuantumFormatType", "MagickCore::QuantumFormatType *|enum MagickCore::QuantumFormatType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__QuantumType = {"_p_MagickCore__QuantumType", "MagickCore::QuantumType *|enum MagickCore::QuantumType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__ReferenceType = {"_p_MagickCore__ReferenceType", "MagickCore::ReferenceType *|enum MagickCore::ReferenceType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__RegistryType = {"_p_MagickCore__RegistryType", "MagickCore::RegistryType *|enum MagickCore::RegistryType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__ResolutionType = {"_p_MagickCore__ResolutionType", "MagickCore::ResolutionType *|enum MagickCore::ResolutionType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__ResourceType = {"_p_MagickCore__ResourceType", "MagickCore::ResourceType *|enum MagickCore::ResourceType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__StatisticType = {"_p_MagickCore__StatisticType", "MagickCore::StatisticType *|enum MagickCore::StatisticType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__StorageType = {"_p_MagickCore__StorageType", "MagickCore::StorageType *|enum MagickCore::StorageType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__StretchType = {"_p_MagickCore__StretchType", "MagickCore::StretchType *|enum MagickCore::StretchType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__StyleType = {"_p_MagickCore__StyleType", "MagickCore::StyleType *|enum MagickCore::StyleType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__TransmitType = {"_p_MagickCore__TransmitType", "MagickCore::TransmitType *|enum MagickCore::TransmitType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__ValidateType = {"_p_MagickCore__ValidateType", "MagickCore::ValidateType *|enum MagickCore::ValidateType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore__WordBreakType = {"_p_MagickCore__WordBreakType", "MagickCore::WordBreakType *|enum MagickCore::WordBreakType *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore___ChannelMoments = {"_p_MagickCore___ChannelMoments", "MagickCore::ChannelMoments *|MagickCore::_ChannelMoments *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore___ChannelPerceptualHash = {"_p_MagickCore___ChannelPerceptualHash", "MagickCore::ChannelPerceptualHash *|MagickCore::_ChannelPerceptualHash *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore___ChannelStatistics = {"_p_MagickCore___ChannelStatistics", "MagickCore::ChannelStatistics *|MagickCore::_ChannelStatistics *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore___ExceptionInfo = {"_p_MagickCore___ExceptionInfo", "MagickCore::ExceptionInfo *|MagickCore::_ExceptionInfo *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore___Image = {"_p_MagickCore___Image", "MagickCore::Image *|MagickCore::_Image *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore___ImageInfo = {"_p_MagickCore___ImageInfo", "MagickCore::ImageInfo *|MagickCore::_ImageInfo *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore___MontageInfo = {"_p_MagickCore___MontageInfo", "MagickCore::MontageInfo *|MagickCore::_MontageInfo *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore___QuantizeInfo = {"_p_MagickCore___QuantizeInfo", "MagickCore::QuantizeInfo *|MagickCore::_QuantizeInfo *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickCore___RectangleInfo = {"_p_MagickCore___RectangleInfo", "MagickCore::RectangleInfo *|MagickCore::_RectangleInfo *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_MagickWand = {"_p_MagickWand", "MagickWand *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__Blob = {"_p_Magick__Blob", "Magick::Blob *|p_Magick__Blob", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ChannelMoments = {"_p_Magick__ChannelMoments", "Magick::ChannelMoments *|p_Magick__ChannelMoments", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ChannelPerceptualHash = {"_p_Magick__ChannelPerceptualHash", "p_Magick__ChannelPerceptualHash|Magick::ChannelPerceptualHash *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ChannelStatistics = {"_p_Magick__ChannelStatistics", "p_Magick__ChannelStatistics|Magick::ChannelStatistics *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__CoderInfo = {"_p_Magick__CoderInfo", "p_Magick__CoderInfo|std::vector< Magick::CoderInfo >::value_type *|Magick::CoderInfo *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__Color = {"_p_Magick__Color", "p_Magick__Color|Magick::Color *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ColorCMYK = {"_p_Magick__ColorCMYK", "Magick::ColorCMYK *|p_Magick__ColorCMYK", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ColorGray = {"_p_Magick__ColorGray", "Magick::ColorGray *|p_Magick__ColorGray", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ColorHSL = {"_p_Magick__ColorHSL", "p_Magick__ColorHSL|Magick::ColorHSL *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ColorMono = {"_p_Magick__ColorMono", "p_Magick__ColorMono|Magick::ColorMono *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ColorRGB = {"_p_Magick__ColorRGB", "Magick::ColorRGB *|p_Magick__ColorRGB", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ColorYUV = {"_p_Magick__ColorYUV", "Magick::ColorYUV *|p_Magick__ColorYUV", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__Coordinate = {"_p_Magick__Coordinate", "p_Magick__Coordinate|Magick::Coordinate *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__Drawable = {"_p_Magick__Drawable", "p_Magick__Drawable|Magick::Drawable *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableAffine = {"_p_Magick__DrawableAffine", "Magick::DrawableAffine *|p_Magick__DrawableAffine", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableAlpha = {"_p_Magick__DrawableAlpha", "p_Magick__DrawableAlpha|Magick::DrawableAlpha *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableArc = {"_p_Magick__DrawableArc", "p_Magick__DrawableArc|Magick::DrawableArc *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableBase = {"_p_Magick__DrawableBase", "p_Magick__DrawableBase|Magick::DrawableBase *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableBezier = {"_p_Magick__DrawableBezier", "Magick::DrawableBezier *|p_Magick__DrawableBezier", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableBorderColor = {"_p_Magick__DrawableBorderColor", "p_Magick__DrawableBorderColor|Magick::DrawableBorderColor *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableCircle = {"_p_Magick__DrawableCircle", "Magick::DrawableCircle *|p_Magick__DrawableCircle", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableClipPath = {"_p_Magick__DrawableClipPath", "Magick::DrawableClipPath *|p_Magick__DrawableClipPath", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableClipRule = {"_p_Magick__DrawableClipRule", "Magick::DrawableClipRule *|p_Magick__DrawableClipRule", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableClipUnits = {"_p_Magick__DrawableClipUnits", "p_Magick__DrawableClipUnits|Magick::DrawableClipUnits *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableColor = {"_p_Magick__DrawableColor", "Magick::DrawableColor *|p_Magick__DrawableColor", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableCompositeImage = {"_p_Magick__DrawableCompositeImage", "p_Magick__DrawableCompositeImage|Magick::DrawableCompositeImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableDensity = {"_p_Magick__DrawableDensity", "Magick::DrawableDensity *|p_Magick__DrawableDensity", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableEllipse = {"_p_Magick__DrawableEllipse", "Magick::DrawableEllipse *|p_Magick__DrawableEllipse", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableFillColor = {"_p_Magick__DrawableFillColor", "p_Magick__DrawableFillColor|Magick::DrawableFillColor *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableFillOpacity = {"_p_Magick__DrawableFillOpacity", "Magick::DrawableFillOpacity *|p_Magick__DrawableFillOpacity", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableFillPatternUrl = {"_p_Magick__DrawableFillPatternUrl", "p_Magick__DrawableFillPatternUrl|Magick::DrawableFillPatternUrl *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableFillRule = {"_p_Magick__DrawableFillRule", "p_Magick__DrawableFillRule|Magick::DrawableFillRule *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableFont = {"_p_Magick__DrawableFont", "p_Magick__DrawableFont|Magick::DrawableFont *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableGravity = {"_p_Magick__DrawableGravity", "Magick::DrawableGravity *|p_Magick__DrawableGravity", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableLine = {"_p_Magick__DrawableLine", "p_Magick__DrawableLine|Magick::DrawableLine *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableMiterLimit = {"_p_Magick__DrawableMiterLimit", "Magick::DrawableMiterLimit *|p_Magick__DrawableMiterLimit", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawablePath = {"_p_Magick__DrawablePath", "Magick::DrawablePath *|p_Magick__DrawablePath", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawablePoint = {"_p_Magick__DrawablePoint", "p_Magick__DrawablePoint|Magick::DrawablePoint *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawablePointSize = {"_p_Magick__DrawablePointSize", "Magick::DrawablePointSize *|p_Magick__DrawablePointSize", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawablePolygon = {"_p_Magick__DrawablePolygon", "Magick::DrawablePolygon *|p_Magick__DrawablePolygon", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawablePolyline = {"_p_Magick__DrawablePolyline", "Magick::DrawablePolyline *|p_Magick__DrawablePolyline", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawablePopClipPath = {"_p_Magick__DrawablePopClipPath", "p_Magick__DrawablePopClipPath|Magick::DrawablePopClipPath *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawablePopGraphicContext = {"_p_Magick__DrawablePopGraphicContext", "p_Magick__DrawablePopGraphicContext|Magick::DrawablePopGraphicContext *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawablePopPattern = {"_p_Magick__DrawablePopPattern", "p_Magick__DrawablePopPattern|Magick::DrawablePopPattern *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawablePushClipPath = {"_p_Magick__DrawablePushClipPath", "Magick::DrawablePushClipPath *|p_Magick__DrawablePushClipPath", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawablePushGraphicContext = {"_p_Magick__DrawablePushGraphicContext", "p_Magick__DrawablePushGraphicContext|Magick::DrawablePushGraphicContext *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawablePushPattern = {"_p_Magick__DrawablePushPattern", "p_Magick__DrawablePushPattern|Magick::DrawablePushPattern *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableRectangle = {"_p_Magick__DrawableRectangle", "p_Magick__DrawableRectangle|Magick::DrawableRectangle *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableRotation = {"_p_Magick__DrawableRotation", "p_Magick__DrawableRotation|Magick::DrawableRotation *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableRoundRectangle = {"_p_Magick__DrawableRoundRectangle", "p_Magick__DrawableRoundRectangle|Magick::DrawableRoundRectangle *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableScaling = {"_p_Magick__DrawableScaling", "Magick::DrawableScaling *|p_Magick__DrawableScaling", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableSkewX = {"_p_Magick__DrawableSkewX", "Magick::DrawableSkewX *|p_Magick__DrawableSkewX", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableSkewY = {"_p_Magick__DrawableSkewY", "Magick::DrawableSkewY *|p_Magick__DrawableSkewY", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableStrokeAntialias = {"_p_Magick__DrawableStrokeAntialias", "Magick::DrawableStrokeAntialias *|p_Magick__DrawableStrokeAntialias", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableStrokeColor = {"_p_Magick__DrawableStrokeColor", "p_Magick__DrawableStrokeColor|Magick::DrawableStrokeColor *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableStrokeDashArray = {"_p_Magick__DrawableStrokeDashArray", "Magick::DrawableStrokeDashArray *|p_Magick__DrawableStrokeDashArray", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableStrokeDashOffset = {"_p_Magick__DrawableStrokeDashOffset", "Magick::DrawableStrokeDashOffset *|p_Magick__DrawableStrokeDashOffset", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableStrokeLineCap = {"_p_Magick__DrawableStrokeLineCap", "Magick::DrawableStrokeLineCap *|p_Magick__DrawableStrokeLineCap", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableStrokeLineJoin = {"_p_Magick__DrawableStrokeLineJoin", "Magick::DrawableStrokeLineJoin *|p_Magick__DrawableStrokeLineJoin", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableStrokeOpacity = {"_p_Magick__DrawableStrokeOpacity", "p_Magick__DrawableStrokeOpacity|Magick::DrawableStrokeOpacity *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableStrokePatternUrl = {"_p_Magick__DrawableStrokePatternUrl", "Magick::DrawableStrokePatternUrl *|p_Magick__DrawableStrokePatternUrl", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableStrokeWidth = {"_p_Magick__DrawableStrokeWidth", "p_Magick__DrawableStrokeWidth|Magick::DrawableStrokeWidth *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableText = {"_p_Magick__DrawableText", "p_Magick__DrawableText|Magick::DrawableText *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableTextAlignment = {"_p_Magick__DrawableTextAlignment", "Magick::DrawableTextAlignment *|p_Magick__DrawableTextAlignment", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableTextAntialias = {"_p_Magick__DrawableTextAntialias", "Magick::DrawableTextAntialias *|p_Magick__DrawableTextAntialias", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableTextDecoration = {"_p_Magick__DrawableTextDecoration", "p_Magick__DrawableTextDecoration|Magick::DrawableTextDecoration *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableTextDirection = {"_p_Magick__DrawableTextDirection", "Magick::DrawableTextDirection *|p_Magick__DrawableTextDirection", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableTextInterlineSpacing = {"_p_Magick__DrawableTextInterlineSpacing", "Magick::DrawableTextInterlineSpacing *|p_Magick__DrawableTextInterlineSpacing", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableTextInterwordSpacing = {"_p_Magick__DrawableTextInterwordSpacing", "p_Magick__DrawableTextInterwordSpacing|Magick::DrawableTextInterwordSpacing *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableTextKerning = {"_p_Magick__DrawableTextKerning", "Magick::DrawableTextKerning *|p_Magick__DrawableTextKerning", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableTextUnderColor = {"_p_Magick__DrawableTextUnderColor", "p_Magick__DrawableTextUnderColor|Magick::DrawableTextUnderColor *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableTranslation = {"_p_Magick__DrawableTranslation", "p_Magick__DrawableTranslation|Magick::DrawableTranslation *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__DrawableViewbox = {"_p_Magick__DrawableViewbox", "Magick::DrawableViewbox *|p_Magick__DrawableViewbox", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__Error = {"_p_Magick__Error", "Magick::Error *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ErrorBlob = {"_p_Magick__ErrorBlob", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ErrorCache = {"_p_Magick__ErrorCache", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ErrorCoder = {"_p_Magick__ErrorCoder", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ErrorConfigure = {"_p_Magick__ErrorConfigure", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ErrorCorruptImage = {"_p_Magick__ErrorCorruptImage", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ErrorDelegate = {"_p_Magick__ErrorDelegate", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ErrorDraw = {"_p_Magick__ErrorDraw", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ErrorFileOpen = {"_p_Magick__ErrorFileOpen", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ErrorImage = {"_p_Magick__ErrorImage", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ErrorMissingDelegate = {"_p_Magick__ErrorMissingDelegate", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ErrorModule = {"_p_Magick__ErrorModule", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ErrorMonitor = {"_p_Magick__ErrorMonitor", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ErrorOption = {"_p_Magick__ErrorOption", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ErrorRegistry = {"_p_Magick__ErrorRegistry", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ErrorResourceLimit = {"_p_Magick__ErrorResourceLimit", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ErrorStream = {"_p_Magick__ErrorStream", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ErrorUndefined = {"_p_Magick__ErrorUndefined", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ErrorXServer = {"_p_Magick__ErrorXServer", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ErrorPolicy = {"_p_Magick__ErrorPolicy", "p_Magick__ErrorPolicy", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ErrorType = {"_p_Magick__ErrorType", "p_Magick__ErrorType", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__Exception = {"_p_Magick__Exception", "Magick::Exception *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__WarningBlob = {"_p_Magick__WarningBlob", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__WarningCache = {"_p_Magick__WarningCache", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__WarningCoder = {"_p_Magick__WarningCoder", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__WarningConfigure = {"_p_Magick__WarningConfigure", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__WarningCorruptImage = {"_p_Magick__WarningCorruptImage", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__WarningDelegate = {"_p_Magick__WarningDelegate", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__WarningDraw = {"_p_Magick__WarningDraw", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__WarningFileOpen = {"_p_Magick__WarningFileOpen", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__WarningImage = {"_p_Magick__WarningImage", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__WarningMissingDelegate = {"_p_Magick__WarningMissingDelegate", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__WarningModule = {"_p_Magick__WarningModule", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__WarningMonitor = {"_p_Magick__WarningMonitor", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__WarningOption = {"_p_Magick__WarningOption", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__WarningRegistry = {"_p_Magick__WarningRegistry", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__WarningResourceLimit = {"_p_Magick__WarningResourceLimit", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__WarningStream = {"_p_Magick__WarningStream", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__WarningUndefined = {"_p_Magick__WarningUndefined", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__WarningXServer = {"_p_Magick__WarningXServer", 0, 0, 0, 0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__Geometry = {"_p_Magick__Geometry", "Magick::Geometry *|p_Magick__Geometry", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__Image = {"_p_Magick__Image", "p_Magick__Image|Magick::Image *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ImageMoments = {"_p_Magick__ImageMoments", "p_Magick__ImageMoments|Magick::ImageMoments *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ImagePerceptualHash = {"_p_Magick__ImagePerceptualHash", "Magick::ImagePerceptualHash *|p_Magick__ImagePerceptualHash", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ImageStatistics = {"_p_Magick__ImageStatistics", "p_Magick__ImageStatistics|Magick::ImageStatistics *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__Montage = {"_p_Magick__Montage", "p_Magick__Montage|Magick::Montage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__MontageFramed = {"_p_Magick__MontageFramed", "Magick::MontageFramed *|p_Magick__MontageFramed", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__Offset = {"_p_Magick__Offset", "Magick::Offset *|p_Magick__Offset", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__Options = {"_p_Magick__Options", "Magick::Options *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathArcAbs = {"_p_Magick__PathArcAbs", "p_Magick__PathArcAbs|Magick::PathArcAbs *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathArcArgs = {"_p_Magick__PathArcArgs", "p_Magick__PathArcArgs|Magick::PathArcArgs *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathArcRel = {"_p_Magick__PathArcRel", "p_Magick__PathArcRel|Magick::PathArcRel *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathClosePath = {"_p_Magick__PathClosePath", "Magick::PathClosePath *|p_Magick__PathClosePath", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathCurvetoAbs = {"_p_Magick__PathCurvetoAbs", "p_Magick__PathCurvetoAbs|Magick::PathCurvetoAbs *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathCurvetoArgs = {"_p_Magick__PathCurvetoArgs", "Magick::PathCurvetoArgs *|p_Magick__PathCurvetoArgs", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathCurvetoRel = {"_p_Magick__PathCurvetoRel", "p_Magick__PathCurvetoRel|Magick::PathCurvetoRel *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathLinetoAbs = {"_p_Magick__PathLinetoAbs", "p_Magick__PathLinetoAbs|Magick::PathLinetoAbs *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathLinetoHorizontalAbs = {"_p_Magick__PathLinetoHorizontalAbs", "p_Magick__PathLinetoHorizontalAbs|Magick::PathLinetoHorizontalAbs *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathLinetoHorizontalRel = {"_p_Magick__PathLinetoHorizontalRel", "p_Magick__PathLinetoHorizontalRel|Magick::PathLinetoHorizontalRel *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathLinetoRel = {"_p_Magick__PathLinetoRel", "Magick::PathLinetoRel *|p_Magick__PathLinetoRel", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathLinetoVerticalAbs = {"_p_Magick__PathLinetoVerticalAbs", "Magick::PathLinetoVerticalAbs *|p_Magick__PathLinetoVerticalAbs", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathLinetoVerticalRel = {"_p_Magick__PathLinetoVerticalRel", "Magick::PathLinetoVerticalRel *|p_Magick__PathLinetoVerticalRel", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathMovetoAbs = {"_p_Magick__PathMovetoAbs", "Magick::PathMovetoAbs *|p_Magick__PathMovetoAbs", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathMovetoRel = {"_p_Magick__PathMovetoRel", "p_Magick__PathMovetoRel|Magick::PathMovetoRel *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathQuadraticCurvetoAbs = {"_p_Magick__PathQuadraticCurvetoAbs", "p_Magick__PathQuadraticCurvetoAbs|Magick::PathQuadraticCurvetoAbs *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathQuadraticCurvetoArgs = {"_p_Magick__PathQuadraticCurvetoArgs", "Magick::PathQuadraticCurvetoArgs *|p_Magick__PathQuadraticCurvetoArgs", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathQuadraticCurvetoRel = {"_p_Magick__PathQuadraticCurvetoRel", "p_Magick__PathQuadraticCurvetoRel|Magick::PathQuadraticCurvetoRel *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathSmoothCurvetoAbs = {"_p_Magick__PathSmoothCurvetoAbs", "Magick::PathSmoothCurvetoAbs *|p_Magick__PathSmoothCurvetoAbs", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathSmoothCurvetoRel = {"_p_Magick__PathSmoothCurvetoRel", "Magick::PathSmoothCurvetoRel *|p_Magick__PathSmoothCurvetoRel", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathSmoothQuadraticCurvetoAbs = {"_p_Magick__PathSmoothQuadraticCurvetoAbs", "p_Magick__PathSmoothQuadraticCurvetoAbs|Magick::PathSmoothQuadraticCurvetoAbs *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__PathSmoothQuadraticCurvetoRel = {"_p_Magick__PathSmoothQuadraticCurvetoRel", "p_Magick__PathSmoothQuadraticCurvetoRel|Magick::PathSmoothQuadraticCurvetoRel *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__Point = {"_p_Magick__Point", "Magick::Point *|p_Magick__Point", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ReadOptions = {"_p_Magick__ReadOptions", "Magick::ReadOptions *|p_Magick__ReadOptions", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__ResourceLimits = {"_p_Magick__ResourceLimits", "p_Magick__ResourceLimits", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__TypeMetric = {"_p_Magick__TypeMetric", "p_Magick__TypeMetric|Magick::TypeMetric *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__VPath = {"_p_Magick__VPath", "p_Magick__VPath|Magick::VPath *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__VPathBase = {"_p_Magick__VPathBase", "Magick::VPathBase *|p_Magick__VPathBase", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__Warning = {"_p_Magick__Warning", "Magick::Warning *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__WarningPolicy = {"_p_Magick__WarningPolicy", "p_Magick__WarningPolicy", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__WarningType = {"_p_Magick__WarningType", "p_Magick__WarningType", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__adaptiveBlurImage = {"_p_Magick__adaptiveBlurImage", "p_Magick__adaptiveBlurImage|Magick::adaptiveBlurImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__adaptiveThresholdImage = {"_p_Magick__adaptiveThresholdImage", "p_Magick__adaptiveThresholdImage|Magick::adaptiveThresholdImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__addNoiseImage = {"_p_Magick__addNoiseImage", "Magick::addNoiseImage *|p_Magick__addNoiseImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__adjoinImage = {"_p_Magick__adjoinImage", "Magick::adjoinImage *|p_Magick__adjoinImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__affineTransformImage = {"_p_Magick__affineTransformImage", "p_Magick__affineTransformImage|Magick::affineTransformImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__alphaFlagImage = {"_p_Magick__alphaFlagImage", "Magick::alphaFlagImage *|p_Magick__alphaFlagImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__alphaImage = {"_p_Magick__alphaImage", "p_Magick__alphaImage|Magick::alphaImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__animationDelayImage = {"_p_Magick__animationDelayImage", "Magick::animationDelayImage *|p_Magick__animationDelayImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__animationIterationsImage = {"_p_Magick__animationIterationsImage", "Magick::animationIterationsImage *|p_Magick__animationIterationsImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__annotateImage = {"_p_Magick__annotateImage", "Magick::annotateImage *|p_Magick__annotateImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__backgroundColorImage = {"_p_Magick__backgroundColorImage", "Magick::backgroundColorImage *|p_Magick__backgroundColorImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__backgroundTextureImage = {"_p_Magick__backgroundTextureImage", "p_Magick__backgroundTextureImage|Magick::backgroundTextureImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__blurImage = {"_p_Magick__blurImage", "p_Magick__blurImage|Magick::blurImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__borderColorImage = {"_p_Magick__borderColorImage", "p_Magick__borderColorImage|Magick::borderColorImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__borderImage = {"_p_Magick__borderImage", "p_Magick__borderImage|Magick::borderImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__boxColorImage = {"_p_Magick__boxColorImage", "Magick::boxColorImage *|p_Magick__boxColorImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__cdlImage = {"_p_Magick__cdlImage", "Magick::cdlImage *|p_Magick__cdlImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__channelImage = {"_p_Magick__channelImage", "Magick::channelImage *|p_Magick__channelImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__charcoalImage = {"_p_Magick__charcoalImage", "p_Magick__charcoalImage|Magick::charcoalImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__chopImage = {"_p_Magick__chopImage", "Magick::chopImage *|p_Magick__chopImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__chromaBluePrimaryImage = {"_p_Magick__chromaBluePrimaryImage", "p_Magick__chromaBluePrimaryImage|Magick::chromaBluePrimaryImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__chromaGreenPrimaryImage = {"_p_Magick__chromaGreenPrimaryImage", "Magick::chromaGreenPrimaryImage *|p_Magick__chromaGreenPrimaryImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__chromaRedPrimaryImage = {"_p_Magick__chromaRedPrimaryImage", "p_Magick__chromaRedPrimaryImage|Magick::chromaRedPrimaryImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__chromaWhitePointImage = {"_p_Magick__chromaWhitePointImage", "p_Magick__chromaWhitePointImage|Magick::chromaWhitePointImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__colorFuzzImage = {"_p_Magick__colorFuzzImage", "p_Magick__colorFuzzImage|Magick::colorFuzzImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__colorMapImage = {"_p_Magick__colorMapImage", "p_Magick__colorMapImage|Magick::colorMapImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__colorMatrixImage = {"_p_Magick__colorMatrixImage", "Magick::colorMatrixImage *|p_Magick__colorMatrixImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__colorSpaceImage = {"_p_Magick__colorSpaceImage", "p_Magick__colorSpaceImage|Magick::colorSpaceImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__colorizeImage = {"_p_Magick__colorizeImage", "p_Magick__colorizeImage|Magick::colorizeImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__commentImage = {"_p_Magick__commentImage", "p_Magick__commentImage|Magick::commentImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__composeImage = {"_p_Magick__composeImage", "p_Magick__composeImage|Magick::composeImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__compositeImage = {"_p_Magick__compositeImage", "p_Magick__compositeImage|Magick::compositeImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__compressTypeImage = {"_p_Magick__compressTypeImage", "Magick::compressTypeImage *|p_Magick__compressTypeImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__contrastImage = {"_p_Magick__contrastImage", "Magick::contrastImage *|p_Magick__contrastImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__cropImage = {"_p_Magick__cropImage", "Magick::cropImage *|p_Magick__cropImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__cycleColormapImage = {"_p_Magick__cycleColormapImage", "p_Magick__cycleColormapImage|Magick::cycleColormapImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__densityImage = {"_p_Magick__densityImage", "Magick::densityImage *|p_Magick__densityImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__depthImage = {"_p_Magick__depthImage", "p_Magick__depthImage|Magick::depthImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__despeckleImage = {"_p_Magick__despeckleImage", "Magick::despeckleImage *|p_Magick__despeckleImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__distortImage = {"_p_Magick__distortImage", "p_Magick__distortImage|Magick::distortImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__drawImage = {"_p_Magick__drawImage", "p_Magick__drawImage|Magick::drawImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__edgeImage = {"_p_Magick__edgeImage", "p_Magick__edgeImage|Magick::edgeImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__embossImage = {"_p_Magick__embossImage", "Magick::embossImage *|p_Magick__embossImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__endianImage = {"_p_Magick__endianImage", "Magick::endianImage *|p_Magick__endianImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__enhanceImage = {"_p_Magick__enhanceImage", "p_Magick__enhanceImage|Magick::enhanceImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__equalizeImage = {"_p_Magick__equalizeImage", "Magick::equalizeImage *|p_Magick__equalizeImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__fileNameImage = {"_p_Magick__fileNameImage", "p_Magick__fileNameImage|Magick::fileNameImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__fillColorImage = {"_p_Magick__fillColorImage", "p_Magick__fillColorImage|Magick::fillColorImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__filterTypeImage = {"_p_Magick__filterTypeImage", "Magick::filterTypeImage *|p_Magick__filterTypeImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__flipImage = {"_p_Magick__flipImage", "Magick::flipImage *|p_Magick__flipImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__floodFillAlphaImage = {"_p_Magick__floodFillAlphaImage", "p_Magick__floodFillAlphaImage|Magick::floodFillAlphaImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__floodFillColorImage = {"_p_Magick__floodFillColorImage", "Magick::floodFillColorImage *|p_Magick__floodFillColorImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__floodFillTextureImage = {"_p_Magick__floodFillTextureImage", "Magick::floodFillTextureImage *|p_Magick__floodFillTextureImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__flopImage = {"_p_Magick__flopImage", "Magick::flopImage *|p_Magick__flopImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__fontImage = {"_p_Magick__fontImage", "p_Magick__fontImage|Magick::fontImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__fontPointsizeImage = {"_p_Magick__fontPointsizeImage", "Magick::fontPointsizeImage *|p_Magick__fontPointsizeImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__frameImage = {"_p_Magick__frameImage", "p_Magick__frameImage|Magick::frameImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__gammaImage = {"_p_Magick__gammaImage", "p_Magick__gammaImage|Magick::gammaImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__gaussianBlurImage = {"_p_Magick__gaussianBlurImage", "Magick::gaussianBlurImage *|p_Magick__gaussianBlurImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__gifDisposeMethodImage = {"_p_Magick__gifDisposeMethodImage", "p_Magick__gifDisposeMethodImage|Magick::gifDisposeMethodImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__haldClutImage = {"_p_Magick__haldClutImage", "p_Magick__haldClutImage|Magick::haldClutImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__implodeImage = {"_p_Magick__implodeImage", "p_Magick__implodeImage|Magick::implodeImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__interlaceTypeImage = {"_p_Magick__interlaceTypeImage", "p_Magick__interlaceTypeImage|Magick::interlaceTypeImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__inverseFourierTransformImage = {"_p_Magick__inverseFourierTransformImage", "Magick::inverseFourierTransformImage *|p_Magick__inverseFourierTransformImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__isValidImage = {"_p_Magick__isValidImage", "p_Magick__isValidImage|Magick::isValidImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__labelImage = {"_p_Magick__labelImage", "Magick::labelImage *|p_Magick__labelImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__levelImage = {"_p_Magick__levelImage", "p_Magick__levelImage|Magick::levelImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__magickImage = {"_p_Magick__magickImage", "p_Magick__magickImage|Magick::magickImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__magnifyImage = {"_p_Magick__magnifyImage", "Magick::magnifyImage *|p_Magick__magnifyImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__mapImage = {"_p_Magick__mapImage", "p_Magick__mapImage|Magick::mapImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__matteColorImage = {"_p_Magick__matteColorImage", "Magick::matteColorImage *|p_Magick__matteColorImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__medianConvolveImage = {"_p_Magick__medianConvolveImage", "p_Magick__medianConvolveImage|Magick::medianConvolveImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__minifyImage = {"_p_Magick__minifyImage", "Magick::minifyImage *|p_Magick__minifyImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__modulateImage = {"_p_Magick__modulateImage", "Magick::modulateImage *|p_Magick__modulateImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__monochromeImage = {"_p_Magick__monochromeImage", "Magick::monochromeImage *|p_Magick__monochromeImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__negateImage = {"_p_Magick__negateImage", "Magick::negateImage *|p_Magick__negateImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__normalizeImage = {"_p_Magick__normalizeImage", "Magick::normalizeImage *|p_Magick__normalizeImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__oilPaintImage = {"_p_Magick__oilPaintImage", "p_Magick__oilPaintImage|Magick::oilPaintImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__opaqueImage = {"_p_Magick__opaqueImage", "p_Magick__opaqueImage|Magick::opaqueImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__pageImage = {"_p_Magick__pageImage", "p_Magick__pageImage|Magick::pageImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__pixelColorImage = {"_p_Magick__pixelColorImage", "p_Magick__pixelColorImage|Magick::pixelColorImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__qualityImage = {"_p_Magick__qualityImage", "p_Magick__qualityImage|Magick::qualityImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__quantizeColorSpaceImage = {"_p_Magick__quantizeColorSpaceImage", "Magick::quantizeColorSpaceImage *|p_Magick__quantizeColorSpaceImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__quantizeColorsImage = {"_p_Magick__quantizeColorsImage", "Magick::quantizeColorsImage *|p_Magick__quantizeColorsImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__quantizeDitherImage = {"_p_Magick__quantizeDitherImage", "Magick::quantizeDitherImage *|p_Magick__quantizeDitherImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__quantizeImage = {"_p_Magick__quantizeImage", "Magick::quantizeImage *|p_Magick__quantizeImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__quantizeTreeDepthImage = {"_p_Magick__quantizeTreeDepthImage", "p_Magick__quantizeTreeDepthImage|Magick::quantizeTreeDepthImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__raiseImage = {"_p_Magick__raiseImage", "p_Magick__raiseImage|Magick::raiseImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__reduceNoiseImage = {"_p_Magick__reduceNoiseImage", "Magick::reduceNoiseImage *|p_Magick__reduceNoiseImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__renderingIntentImage = {"_p_Magick__renderingIntentImage", "p_Magick__renderingIntentImage|Magick::renderingIntentImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__resizeImage = {"_p_Magick__resizeImage", "p_Magick__resizeImage|Magick::resizeImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__resolutionUnitsImage = {"_p_Magick__resolutionUnitsImage", "Magick::resolutionUnitsImage *|p_Magick__resolutionUnitsImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__rollImage = {"_p_Magick__rollImage", "Magick::rollImage *|p_Magick__rollImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__rotateImage = {"_p_Magick__rotateImage", "p_Magick__rotateImage|Magick::rotateImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__sampleImage = {"_p_Magick__sampleImage", "Magick::sampleImage *|p_Magick__sampleImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__scaleImage = {"_p_Magick__scaleImage", "p_Magick__scaleImage|Magick::scaleImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__sceneImage = {"_p_Magick__sceneImage", "p_Magick__sceneImage|Magick::sceneImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__segmentImage = {"_p_Magick__segmentImage", "Magick::segmentImage *|p_Magick__segmentImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__shadeImage = {"_p_Magick__shadeImage", "p_Magick__shadeImage|Magick::shadeImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__shadowImage = {"_p_Magick__shadowImage", "p_Magick__shadowImage|Magick::shadowImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__sharpenImage = {"_p_Magick__sharpenImage", "p_Magick__sharpenImage|Magick::sharpenImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__shaveImage = {"_p_Magick__shaveImage", "p_Magick__shaveImage|Magick::shaveImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__shearImage = {"_p_Magick__shearImage", "Magick::shearImage *|p_Magick__shearImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__sizeImage = {"_p_Magick__sizeImage", "p_Magick__sizeImage|Magick::sizeImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__solarizeImage = {"_p_Magick__solarizeImage", "p_Magick__solarizeImage|Magick::solarizeImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__spliceImage = {"_p_Magick__spliceImage", "p_Magick__spliceImage|Magick::spliceImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__spreadImage = {"_p_Magick__spreadImage", "p_Magick__spreadImage|Magick::spreadImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__steganoImage = {"_p_Magick__steganoImage", "p_Magick__steganoImage|Magick::steganoImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__stereoImage = {"_p_Magick__stereoImage", "Magick::stereoImage *|p_Magick__stereoImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__stripImage = {"_p_Magick__stripImage", "p_Magick__stripImage|Magick::stripImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__strokeColorImage = {"_p_Magick__strokeColorImage", "Magick::strokeColorImage *|p_Magick__strokeColorImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__subImageImage = {"_p_Magick__subImageImage", "Magick::subImageImage *|p_Magick__subImageImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__subRangeImage = {"_p_Magick__subRangeImage", "Magick::subRangeImage *|p_Magick__subRangeImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__swirlImage = {"_p_Magick__swirlImage", "Magick::swirlImage *|p_Magick__swirlImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__textAntiAliasImage = {"_p_Magick__textAntiAliasImage", "p_Magick__textAntiAliasImage|Magick::textAntiAliasImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__textureImage = {"_p_Magick__textureImage", "p_Magick__textureImage|Magick::textureImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__thresholdImage = {"_p_Magick__thresholdImage", "Magick::thresholdImage *|p_Magick__thresholdImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__transparentImage = {"_p_Magick__transparentImage", "Magick::transparentImage *|p_Magick__transparentImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__trimImage = {"_p_Magick__trimImage", "p_Magick__trimImage|Magick::trimImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__typeImage = {"_p_Magick__typeImage", "Magick::typeImage *|p_Magick__typeImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__verboseImage = {"_p_Magick__verboseImage", "p_Magick__verboseImage|Magick::verboseImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__waveImage = {"_p_Magick__waveImage", "Magick::waveImage *|p_Magick__waveImage", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__x11DisplayImage = {"_p_Magick__x11DisplayImage", "p_Magick__x11DisplayImage|Magick::x11DisplayImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_Magick__zoomImage = {"_p_Magick__zoomImage", "p_Magick__zoomImage|Magick::zoomImage *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p__DrawingWand = {"_p__DrawingWand", "MagickCore::DrawingWand *|_DrawingWand *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p__PolicyInfo = {"_p__PolicyInfo", "MagickCore::PolicyInfo *|_PolicyInfo *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_double = {"_p_double", "MagickCore::MagickDoubleType *|MagickCore::MagickRealType *|double *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_float = {"_p_float", "Magick::Quantum *|MagickCore::MagickFloatType *|float *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_long_long = {"_p_long_long", "MagickCore::MagickOffsetType *|long long *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_p_MagickCore___Image = {"_p_p_MagickCore___Image", "MagickCore::Image **|MagickCore::_Image **", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_std__exception = {"_p_std__exception", "std::exception *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_std__vectorT_Magick__CoderInfo_t = {"_p_std__vectorT_Magick__CoderInfo_t", "p_std__vectorT_Magick__CoderInfo_t|std::vector< Magick::CoderInfo > *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_std__vectorT_Magick__Coordinate_t = {"_p_std__vectorT_Magick__Coordinate_t", "Magick::CoordinateList *|std::vector< Magick::Coordinate > *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_std__vectorT_Magick__Drawable_t = {"_p_std__vectorT_Magick__Drawable_t", "Magick::DrawableList *|std::vector< Magick::Drawable > *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_std__vectorT_Magick__PathArcArgs_t = {"_p_std__vectorT_Magick__PathArcArgs_t", "Magick::PathArcArgsList *|std::vector< Magick::PathArcArgs > *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_std__vectorT_Magick__PathCurvetoArgs_t = {"_p_std__vectorT_Magick__PathCurvetoArgs_t", "Magick::PathCurveToArgsList *|std::vector< Magick::PathCurvetoArgs > *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_std__vectorT_Magick__PathQuadraticCurvetoArgs_t = {"_p_std__vectorT_Magick__PathQuadraticCurvetoArgs_t", "Magick::PathQuadraticCurvetoArgsList *|std::vector< Magick::PathQuadraticCurvetoArgs > *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_std__vectorT_Magick__VPath_t = {"_p_std__vectorT_Magick__VPath_t", "Magick::VPathList *|std::vector< Magick::VPath > *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_uintptr_t = {"_p_uintptr_t", "MagickCore::MagickAddressType *|uintptr_t *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "MagickCore::MagickStatusType *|unsigned int *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "MagickCore::MagickSizeType *|unsigned long long *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
SWIGINTERN swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

SWIGINTERN swig_type_info *swig_type_initial[] = {
  &_swigt__p_FILE,
  &_swigt__p_ImageListContainer,
  &_swigt__p_ImageListIterator,
  &_swigt__p_MagickCore__AlignType,
  &_swigt__p_MagickCore__CacheType,
  &_swigt__p_MagickCore__ChannelType,
  &_swigt__p_MagickCore__ClassType,
  &_swigt__p_MagickCore__ColorspaceType,
  &_swigt__p_MagickCore__ComplexOperator,
  &_swigt__p_MagickCore__ComplianceType,
  &_swigt__p_MagickCore__CompositeOperator,
  &_swigt__p_MagickCore__CompressionType,
  &_swigt__p_MagickCore__DecorationType,
  &_swigt__p_MagickCore__DirectionType,
  &_swigt__p_MagickCore__DisposeType,
  &_swigt__p_MagickCore__EndianType,
  &_swigt__p_MagickCore__ExceptionType,
  &_swigt__p_MagickCore__FilterType,
  &_swigt__p_MagickCore__GradientType,
  &_swigt__p_MagickCore__GravityType,
  &_swigt__p_MagickCore__IlluminantType,
  &_swigt__p_MagickCore__ImageType,
  &_swigt__p_MagickCore__InterlaceType,
  &_swigt__p_MagickCore__KernelInfoType,
  &_swigt__p_MagickCore__LogEventType,
  &_swigt__p_MagickCore__MagickBooleanType,
  &_swigt__p_MagickCore__MagickCLDeviceType,
  &_swigt__p_MagickCore__MagickEvaluateOperator,
  &_swigt__p_MagickCore__MagickFormatType,
  &_swigt__p_MagickCore__MagickModuleType,
  &_swigt__p_MagickCore__MetricType,
  &_swigt__p_MagickCore__NoiseType,
  &_swigt__p_MagickCore__OrientationType,
  &_swigt__p_MagickCore__PathType,
  &_swigt__p_MagickCore__PolicyDomain,
  &_swigt__p_MagickCore__PolicyRights,
  &_swigt__p_MagickCore__PreviewType,
  &_swigt__p_MagickCore__PrimitiveType,
  &_swigt__p_MagickCore__QuantumAlphaType,
  &_swigt__p_MagickCore__QuantumFormatType,
  &_swigt__p_MagickCore__QuantumType,
  &_swigt__p_MagickCore__ReferenceType,
  &_swigt__p_MagickCore__RegistryType,
  &_swigt__p_MagickCore__ResolutionType,
  &_swigt__p_MagickCore__ResourceType,
  &_swigt__p_MagickCore__StatisticType,
  &_swigt__p_MagickCore__StorageType,
  &_swigt__p_MagickCore__StretchType,
  &_swigt__p_MagickCore__StyleType,
  &_swigt__p_MagickCore__TransmitType,
  &_swigt__p_MagickCore__ValidateType,
  &_swigt__p_MagickCore__WordBreakType,
  &_swigt__p_MagickCore___ChannelMoments,
  &_swigt__p_MagickCore___ChannelPerceptualHash,
  &_swigt__p_MagickCore___ChannelStatistics,
  &_swigt__p_MagickCore___ExceptionInfo,
  &_swigt__p_MagickCore___Image,
  &_swigt__p_MagickCore___ImageInfo,
  &_swigt__p_MagickCore___MontageInfo,
  &_swigt__p_MagickCore___QuantizeInfo,
  &_swigt__p_MagickCore___RectangleInfo,
  &_swigt__p_MagickWand,
  &_swigt__p_Magick__Blob,
  &_swigt__p_Magick__ChannelMoments,
  &_swigt__p_Magick__ChannelPerceptualHash,
  &_swigt__p_Magick__ChannelStatistics,
  &_swigt__p_Magick__CoderInfo,
  &_swigt__p_Magick__Color,
  &_swigt__p_Magick__ColorCMYK,
  &_swigt__p_Magick__ColorGray,
  &_swigt__p_Magick__ColorHSL,
  &_swigt__p_Magick__ColorMono,
  &_swigt__p_Magick__ColorRGB,
  &_swigt__p_Magick__ColorYUV,
  &_swigt__p_Magick__Coordinate,
  &_swigt__p_Magick__Drawable,
  &_swigt__p_Magick__DrawableAffine,
  &_swigt__p_Magick__DrawableAlpha,
  &_swigt__p_Magick__DrawableArc,
  &_swigt__p_Magick__DrawableBase,
  &_swigt__p_Magick__DrawableBezier,
  &_swigt__p_Magick__DrawableBorderColor,
  &_swigt__p_Magick__DrawableCircle,
  &_swigt__p_Magick__DrawableClipPath,
  &_swigt__p_Magick__DrawableClipRule,
  &_swigt__p_Magick__DrawableClipUnits,
  &_swigt__p_Magick__DrawableColor,
  &_swigt__p_Magick__DrawableCompositeImage,
  &_swigt__p_Magick__DrawableDensity,
  &_swigt__p_Magick__DrawableEllipse,
  &_swigt__p_Magick__DrawableFillColor,
  &_swigt__p_Magick__DrawableFillOpacity,
  &_swigt__p_Magick__DrawableFillPatternUrl,
  &_swigt__p_Magick__DrawableFillRule,
  &_swigt__p_Magick__DrawableFont,
  &_swigt__p_Magick__DrawableGravity,
  &_swigt__p_Magick__DrawableLine,
  &_swigt__p_Magick__DrawableMiterLimit,
  &_swigt__p_Magick__DrawablePath,
  &_swigt__p_Magick__DrawablePoint,
  &_swigt__p_Magick__DrawablePointSize,
  &_swigt__p_Magick__DrawablePolygon,
  &_swigt__p_Magick__DrawablePolyline,
  &_swigt__p_Magick__DrawablePopClipPath,
  &_swigt__p_Magick__DrawablePopGraphicContext,
  &_swigt__p_Magick__DrawablePopPattern,
  &_swigt__p_Magick__DrawablePushClipPath,
  &_swigt__p_Magick__DrawablePushGraphicContext,
  &_swigt__p_Magick__DrawablePushPattern,
  &_swigt__p_Magick__DrawableRectangle,
  &_swigt__p_Magick__DrawableRotation,
  &_swigt__p_Magick__DrawableRoundRectangle,
  &_swigt__p_Magick__DrawableScaling,
  &_swigt__p_Magick__DrawableSkewX,
  &_swigt__p_Magick__DrawableSkewY,
  &_swigt__p_Magick__DrawableStrokeAntialias,
  &_swigt__p_Magick__DrawableStrokeColor,
  &_swigt__p_Magick__DrawableStrokeDashArray,
  &_swigt__p_Magick__DrawableStrokeDashOffset,
  &_swigt__p_Magick__DrawableStrokeLineCap,
  &_swigt__p_Magick__DrawableStrokeLineJoin,
  &_swigt__p_Magick__DrawableStrokeOpacity,
  &_swigt__p_Magick__DrawableStrokePatternUrl,
  &_swigt__p_Magick__DrawableStrokeWidth,
  &_swigt__p_Magick__DrawableText,
  &_swigt__p_Magick__DrawableTextAlignment,
  &_swigt__p_Magick__DrawableTextAntialias,
  &_swigt__p_Magick__DrawableTextDecoration,
  &_swigt__p_Magick__DrawableTextDirection,
  &_swigt__p_Magick__DrawableTextInterlineSpacing,
  &_swigt__p_Magick__DrawableTextInterwordSpacing,
  &_swigt__p_Magick__DrawableTextKerning,
  &_swigt__p_Magick__DrawableTextUnderColor,
  &_swigt__p_Magick__DrawableTranslation,
  &_swigt__p_Magick__DrawableViewbox,
  &_swigt__p_Magick__Error,
  &_swigt__p_Magick__ErrorBlob,
  &_swigt__p_Magick__ErrorCache,
  &_swigt__p_Magick__ErrorCoder,
  &_swigt__p_Magick__ErrorConfigure,
  &_swigt__p_Magick__ErrorCorruptImage,
  &_swigt__p_Magick__ErrorDelegate,
  &_swigt__p_Magick__ErrorDraw,
  &_swigt__p_Magick__ErrorFileOpen,
  &_swigt__p_Magick__ErrorImage,
  &_swigt__p_Magick__ErrorMissingDelegate,
  &_swigt__p_Magick__ErrorModule,
  &_swigt__p_Magick__ErrorMonitor,
  &_swigt__p_Magick__ErrorOption,
  &_swigt__p_Magick__ErrorPolicy,
  &_swigt__p_Magick__ErrorRegistry,
  &_swigt__p_Magick__ErrorResourceLimit,
  &_swigt__p_Magick__ErrorStream,
  &_swigt__p_Magick__ErrorType,
  &_swigt__p_Magick__ErrorUndefined,
  &_swigt__p_Magick__ErrorXServer,
  &_swigt__p_Magick__Exception,
  &_swigt__p_Magick__Geometry,
  &_swigt__p_Magick__Image,
  &_swigt__p_Magick__ImageMoments,
  &_swigt__p_Magick__ImagePerceptualHash,
  &_swigt__p_Magick__ImageStatistics,
  &_swigt__p_Magick__Montage,
  &_swigt__p_Magick__MontageFramed,
  &_swigt__p_Magick__Offset,
  &_swigt__p_Magick__Options,
  &_swigt__p_Magick__PathArcAbs,
  &_swigt__p_Magick__PathArcArgs,
  &_swigt__p_Magick__PathArcRel,
  &_swigt__p_Magick__PathClosePath,
  &_swigt__p_Magick__PathCurvetoAbs,
  &_swigt__p_Magick__PathCurvetoArgs,
  &_swigt__p_Magick__PathCurvetoRel,
  &_swigt__p_Magick__PathLinetoAbs,
  &_swigt__p_Magick__PathLinetoHorizontalAbs,
  &_swigt__p_Magick__PathLinetoHorizontalRel,
  &_swigt__p_Magick__PathLinetoRel,
  &_swigt__p_Magick__PathLinetoVerticalAbs,
  &_swigt__p_Magick__PathLinetoVerticalRel,
  &_swigt__p_Magick__PathMovetoAbs,
  &_swigt__p_Magick__PathMovetoRel,
  &_swigt__p_Magick__PathQuadraticCurvetoAbs,
  &_swigt__p_Magick__PathQuadraticCurvetoArgs,
  &_swigt__p_Magick__PathQuadraticCurvetoRel,
  &_swigt__p_Magick__PathSmoothCurvetoAbs,
  &_swigt__p_Magick__PathSmoothCurvetoRel,
  &_swigt__p_Magick__PathSmoothQuadraticCurvetoAbs,
  &_swigt__p_Magick__PathSmoothQuadraticCurvetoRel,
  &_swigt__p_Magick__Point,
  &_swigt__p_Magick__ReadOptions,
  &_swigt__p_Magick__ResourceLimits,
  &_swigt__p_Magick__TypeMetric,
  &_swigt__p_Magick__VPath,
  &_swigt__p_Magick__VPathBase,
  &_swigt__p_Magick__Warning,
  &_swigt__p_Magick__WarningBlob,
  &_swigt__p_Magick__WarningCache,
  &_swigt__p_Magick__WarningCoder,
  &_swigt__p_Magick__WarningConfigure,
  &_swigt__p_Magick__WarningCorruptImage,
  &_swigt__p_Magick__WarningDelegate,
  &_swigt__p_Magick__WarningDraw,
  &_swigt__p_Magick__WarningFileOpen,
  &_swigt__p_Magick__WarningImage,
  &_swigt__p_Magick__WarningMissingDelegate,
  &_swigt__p_Magick__WarningModule,
  &_swigt__p_Magick__WarningMonitor,
  &_swigt__p_Magick__WarningOption,
  &_swigt__p_Magick__WarningPolicy,
  &_swigt__p_Magick__WarningRegistry,
  &_swigt__p_Magick__WarningResourceLimit,
  &_swigt__p_Magick__WarningStream,
  &_swigt__p_Magick__WarningType,
  &_swigt__p_Magick__WarningUndefined,
  &_swigt__p_Magick__WarningXServer,
  &_swigt__p_Magick__adaptiveBlurImage,
  &_swigt__p_Magick__adaptiveThresholdImage,
  &_swigt__p_Magick__addNoiseImage,
  &_swigt__p_Magick__adjoinImage,
  &_swigt__p_Magick__affineTransformImage,
  &_swigt__p_Magick__alphaFlagImage,
  &_swigt__p_Magick__alphaImage,
  &_swigt__p_Magick__animationDelayImage,
  &_swigt__p_Magick__animationIterationsImage,
  &_swigt__p_Magick__annotateImage,
  &_swigt__p_Magick__backgroundColorImage,
  &_swigt__p_Magick__backgroundTextureImage,
  &_swigt__p_Magick__blurImage,
  &_swigt__p_Magick__borderColorImage,
  &_swigt__p_Magick__borderImage,
  &_swigt__p_Magick__boxColorImage,
  &_swigt__p_Magick__cdlImage,
  &_swigt__p_Magick__channelImage,
  &_swigt__p_Magick__charcoalImage,
  &_swigt__p_Magick__chopImage,
  &_swigt__p_Magick__chromaBluePrimaryImage,
  &_swigt__p_Magick__chromaGreenPrimaryImage,
  &_swigt__p_Magick__chromaRedPrimaryImage,
  &_swigt__p_Magick__chromaWhitePointImage,
  &_swigt__p_Magick__colorFuzzImage,
  &_swigt__p_Magick__colorMapImage,
  &_swigt__p_Magick__colorMatrixImage,
  &_swigt__p_Magick__colorSpaceImage,
  &_swigt__p_Magick__colorizeImage,
  &_swigt__p_Magick__commentImage,
  &_swigt__p_Magick__composeImage,
  &_swigt__p_Magick__compositeImage,
  &_swigt__p_Magick__compressTypeImage,
  &_swigt__p_Magick__contrastImage,
  &_swigt__p_Magick__cropImage,
  &_swigt__p_Magick__cycleColormapImage,
  &_swigt__p_Magick__densityImage,
  &_swigt__p_Magick__depthImage,
  &_swigt__p_Magick__despeckleImage,
  &_swigt__p_Magick__distortImage,
  &_swigt__p_Magick__drawImage,
  &_swigt__p_Magick__edgeImage,
  &_swigt__p_Magick__embossImage,
  &_swigt__p_Magick__endianImage,
  &_swigt__p_Magick__enhanceImage,
  &_swigt__p_Magick__equalizeImage,
  &_swigt__p_Magick__fileNameImage,
  &_swigt__p_Magick__fillColorImage,
  &_swigt__p_Magick__filterTypeImage,
  &_swigt__p_Magick__flipImage,
  &_swigt__p_Magick__floodFillAlphaImage,
  &_swigt__p_Magick__floodFillColorImage,
  &_swigt__p_Magick__floodFillTextureImage,
  &_swigt__p_Magick__flopImage,
  &_swigt__p_Magick__fontImage,
  &_swigt__p_Magick__fontPointsizeImage,
  &_swigt__p_Magick__frameImage,
  &_swigt__p_Magick__gammaImage,
  &_swigt__p_Magick__gaussianBlurImage,
  &_swigt__p_Magick__gifDisposeMethodImage,
  &_swigt__p_Magick__haldClutImage,
  &_swigt__p_Magick__implodeImage,
  &_swigt__p_Magick__interlaceTypeImage,
  &_swigt__p_Magick__inverseFourierTransformImage,
  &_swigt__p_Magick__isValidImage,
  &_swigt__p_Magick__labelImage,
  &_swigt__p_Magick__levelImage,
  &_swigt__p_Magick__magickImage,
  &_swigt__p_Magick__magnifyImage,
  &_swigt__p_Magick__mapImage,
  &_swigt__p_Magick__matteColorImage,
  &_swigt__p_Magick__medianConvolveImage,
  &_swigt__p_Magick__minifyImage,
  &_swigt__p_Magick__modulateImage,
  &_swigt__p_Magick__monochromeImage,
  &_swigt__p_Magick__negateImage,
  &_swigt__p_Magick__normalizeImage,
  &_swigt__p_Magick__oilPaintImage,
  &_swigt__p_Magick__opaqueImage,
  &_swigt__p_Magick__pageImage,
  &_swigt__p_Magick__pixelColorImage,
  &_swigt__p_Magick__qualityImage,
  &_swigt__p_Magick__quantizeColorSpaceImage,
  &_swigt__p_Magick__quantizeColorsImage,
  &_swigt__p_Magick__quantizeDitherImage,
  &_swigt__p_Magick__quantizeImage,
  &_swigt__p_Magick__quantizeTreeDepthImage,
  &_swigt__p_Magick__raiseImage,
  &_swigt__p_Magick__reduceNoiseImage,
  &_swigt__p_Magick__renderingIntentImage,
  &_swigt__p_Magick__resizeImage,
  &_swigt__p_Magick__resolutionUnitsImage,
  &_swigt__p_Magick__rollImage,
  &_swigt__p_Magick__rotateImage,
  &_swigt__p_Magick__sampleImage,
  &_swigt__p_Magick__scaleImage,
  &_swigt__p_Magick__sceneImage,
  &_swigt__p_Magick__segmentImage,
  &_swigt__p_Magick__shadeImage,
  &_swigt__p_Magick__shadowImage,
  &_swigt__p_Magick__sharpenImage,
  &_swigt__p_Magick__shaveImage,
  &_swigt__p_Magick__shearImage,
  &_swigt__p_Magick__sizeImage,
  &_swigt__p_Magick__solarizeImage,
  &_swigt__p_Magick__spliceImage,
  &_swigt__p_Magick__spreadImage,
  &_swigt__p_Magick__steganoImage,
  &_swigt__p_Magick__stereoImage,
  &_swigt__p_Magick__stripImage,
  &_swigt__p_Magick__strokeColorImage,
  &_swigt__p_Magick__subImageImage,
  &_swigt__p_Magick__subRangeImage,
  &_swigt__p_Magick__swirlImage,
  &_swigt__p_Magick__textAntiAliasImage,
  &_swigt__p_Magick__textureImage,
  &_swigt__p_Magick__thresholdImage,
  &_swigt__p_Magick__transparentImage,
  &_swigt__p_Magick__trimImage,
  &_swigt__p_Magick__typeImage,
  &_swigt__p_Magick__verboseImage,
  &_swigt__p_Magick__waveImage,
  &_swigt__p_Magick__x11DisplayImage,
  &_swigt__p_Magick__zoomImage,
  &_swigt__p__DrawingWand,
  &_swigt__p__PolicyInfo,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_long_long,
  &_swigt__p_p_MagickCore___Image,
  &_swigt__p_p_char,
  &_swigt__p_p_void,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_std__exception,
  &_swigt__p_std__vectorT_Magick__CoderInfo_t,
  &_swigt__p_std__vectorT_Magick__Coordinate_t,
  &_swigt__p_std__vectorT_Magick__Drawable_t,
  &_swigt__p_std__vectorT_Magick__PathArcArgs_t,
  &_swigt__p_std__vectorT_Magick__PathCurvetoArgs_t,
  &_swigt__p_std__vectorT_Magick__PathQuadraticCurvetoArgs_t,
  &_swigt__p_std__vectorT_Magick__VPath_t,
  &_swigt__p_uintptr_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_value_type,
  &_swigt__p_void,
};

SWIGINTERN swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_ImageListContainer[] = {  {&_swigt__p_ImageListContainer, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_ImageListIterator[] = {  {&_swigt__p_ImageListIterator, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__AlignType[] = {  {&_swigt__p_MagickCore__AlignType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__CacheType[] = {  {&_swigt__p_MagickCore__CacheType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__ChannelType[] = {  {&_swigt__p_MagickCore__ChannelType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__ClassType[] = {  {&_swigt__p_MagickCore__ClassType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__ColorspaceType[] = {  {&_swigt__p_MagickCore__ColorspaceType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__ComplexOperator[] = {  {&_swigt__p_MagickCore__ComplexOperator, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__ComplianceType[] = {  {&_swigt__p_MagickCore__ComplianceType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__CompositeOperator[] = {  {&_swigt__p_MagickCore__CompositeOperator, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__CompressionType[] = {  {&_swigt__p_MagickCore__CompressionType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__DecorationType[] = {  {&_swigt__p_MagickCore__DecorationType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__DirectionType[] = {  {&_swigt__p_MagickCore__DirectionType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__DisposeType[] = {  {&_swigt__p_MagickCore__DisposeType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__EndianType[] = {  {&_swigt__p_MagickCore__EndianType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__ExceptionType[] = {  {&_swigt__p_MagickCore__ExceptionType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__FilterType[] = {  {&_swigt__p_MagickCore__FilterType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__GradientType[] = {  {&_swigt__p_MagickCore__GradientType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__GravityType[] = {  {&_swigt__p_MagickCore__GravityType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__IlluminantType[] = {  {&_swigt__p_MagickCore__IlluminantType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__ImageType[] = {  {&_swigt__p_MagickCore__ImageType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__InterlaceType[] = {  {&_swigt__p_MagickCore__InterlaceType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__KernelInfoType[] = {  {&_swigt__p_MagickCore__KernelInfoType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__LogEventType[] = {  {&_swigt__p_MagickCore__LogEventType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__MagickBooleanType[] = {  {&_swigt__p_MagickCore__MagickBooleanType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__MagickCLDeviceType[] = {  {&_swigt__p_MagickCore__MagickCLDeviceType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__MagickEvaluateOperator[] = {  {&_swigt__p_MagickCore__MagickEvaluateOperator, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__MagickFormatType[] = {  {&_swigt__p_MagickCore__MagickFormatType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__MagickModuleType[] = {  {&_swigt__p_MagickCore__MagickModuleType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__MetricType[] = {  {&_swigt__p_MagickCore__MetricType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__NoiseType[] = {  {&_swigt__p_MagickCore__NoiseType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__OrientationType[] = {  {&_swigt__p_MagickCore__OrientationType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__PathType[] = {  {&_swigt__p_MagickCore__PathType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__PolicyDomain[] = {  {&_swigt__p_MagickCore__PolicyDomain, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__PolicyRights[] = {  {&_swigt__p_MagickCore__PolicyRights, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__PreviewType[] = {  {&_swigt__p_MagickCore__PreviewType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__PrimitiveType[] = {  {&_swigt__p_MagickCore__PrimitiveType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__QuantumAlphaType[] = {  {&_swigt__p_MagickCore__QuantumAlphaType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__QuantumFormatType[] = {  {&_swigt__p_MagickCore__QuantumFormatType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__QuantumType[] = {  {&_swigt__p_MagickCore__QuantumType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__ReferenceType[] = {  {&_swigt__p_MagickCore__ReferenceType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__RegistryType[] = {  {&_swigt__p_MagickCore__RegistryType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__ResolutionType[] = {  {&_swigt__p_MagickCore__ResolutionType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__ResourceType[] = {  {&_swigt__p_MagickCore__ResourceType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__StatisticType[] = {  {&_swigt__p_MagickCore__StatisticType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__StorageType[] = {  {&_swigt__p_MagickCore__StorageType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__StretchType[] = {  {&_swigt__p_MagickCore__StretchType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__StyleType[] = {  {&_swigt__p_MagickCore__StyleType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__TransmitType[] = {  {&_swigt__p_MagickCore__TransmitType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__ValidateType[] = {  {&_swigt__p_MagickCore__ValidateType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore__WordBreakType[] = {  {&_swigt__p_MagickCore__WordBreakType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore___ChannelMoments[] = {  {&_swigt__p_MagickCore___ChannelMoments, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore___ChannelPerceptualHash[] = {  {&_swigt__p_MagickCore___ChannelPerceptualHash, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore___ChannelStatistics[] = {  {&_swigt__p_MagickCore___ChannelStatistics, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore___ExceptionInfo[] = {  {&_swigt__p_MagickCore___ExceptionInfo, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore___Image[] = {  {&_swigt__p_MagickCore___Image, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore___ImageInfo[] = {  {&_swigt__p_MagickCore___ImageInfo, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore___MontageInfo[] = {  {&_swigt__p_MagickCore___MontageInfo, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore___QuantizeInfo[] = {  {&_swigt__p_MagickCore___QuantizeInfo, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickCore___RectangleInfo[] = {  {&_swigt__p_MagickCore___RectangleInfo, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_MagickWand[] = {  {&_swigt__p_MagickWand, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__Blob[] = {  {&_swigt__p_Magick__Blob, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ChannelMoments[] = {  {&_swigt__p_Magick__ChannelMoments, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ChannelPerceptualHash[] = {  {&_swigt__p_Magick__ChannelPerceptualHash, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ChannelStatistics[] = {  {&_swigt__p_Magick__ChannelStatistics, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__CoderInfo[] = {  {&_swigt__p_Magick__CoderInfo, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__Color[] = {  {&_swigt__p_Magick__Color, 0, 0, 0},  {&_swigt__p_Magick__ColorCMYK, _p_Magick__ColorCMYKTo_p_Magick__Color, 0, 0},  {&_swigt__p_Magick__ColorGray, _p_Magick__ColorGrayTo_p_Magick__Color, 0, 0},  {&_swigt__p_Magick__ColorHSL, _p_Magick__ColorHSLTo_p_Magick__Color, 0, 0},  {&_swigt__p_Magick__ColorMono, _p_Magick__ColorMonoTo_p_Magick__Color, 0, 0},  {&_swigt__p_Magick__ColorRGB, _p_Magick__ColorRGBTo_p_Magick__Color, 0, 0},  {&_swigt__p_Magick__ColorYUV, _p_Magick__ColorYUVTo_p_Magick__Color, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ColorCMYK[] = {  {&_swigt__p_Magick__ColorCMYK, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ColorGray[] = {  {&_swigt__p_Magick__ColorGray, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ColorHSL[] = {  {&_swigt__p_Magick__ColorHSL, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ColorMono[] = {  {&_swigt__p_Magick__ColorMono, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ColorRGB[] = {  {&_swigt__p_Magick__ColorRGB, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ColorYUV[] = {  {&_swigt__p_Magick__ColorYUV, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__Coordinate[] = {  {&_swigt__p_Magick__Coordinate, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__Drawable[] = {  {&_swigt__p_Magick__Drawable, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableAffine[] = {  {&_swigt__p_Magick__DrawableAffine, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableAlpha[] = {  {&_swigt__p_Magick__DrawableAlpha, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableArc[] = {  {&_swigt__p_Magick__DrawableArc, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableBase[] = {  {&_swigt__p_Magick__DrawableBase, 0, 0, 0},  {&_swigt__p_Magick__DrawableAffine, _p_Magick__DrawableAffineTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableAlpha, _p_Magick__DrawableAlphaTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableArc, _p_Magick__DrawableArcTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableBezier, _p_Magick__DrawableBezierTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableBorderColor, _p_Magick__DrawableBorderColorTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableCircle, _p_Magick__DrawableCircleTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableClipPath, _p_Magick__DrawableClipPathTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableClipRule, _p_Magick__DrawableClipRuleTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableClipUnits, _p_Magick__DrawableClipUnitsTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableColor, _p_Magick__DrawableColorTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableCompositeImage, _p_Magick__DrawableCompositeImageTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableDensity, _p_Magick__DrawableDensityTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableEllipse, _p_Magick__DrawableEllipseTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableFillColor, _p_Magick__DrawableFillColorTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableFillOpacity, _p_Magick__DrawableFillOpacityTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableFillPatternUrl, _p_Magick__DrawableFillPatternUrlTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableFillRule, _p_Magick__DrawableFillRuleTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableFont, _p_Magick__DrawableFontTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableGravity, _p_Magick__DrawableGravityTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableLine, _p_Magick__DrawableLineTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableMiterLimit, _p_Magick__DrawableMiterLimitTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawablePath, _p_Magick__DrawablePathTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawablePoint, _p_Magick__DrawablePointTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawablePointSize, _p_Magick__DrawablePointSizeTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawablePolygon, _p_Magick__DrawablePolygonTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawablePolyline, _p_Magick__DrawablePolylineTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawablePopClipPath, _p_Magick__DrawablePopClipPathTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawablePopGraphicContext, _p_Magick__DrawablePopGraphicContextTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawablePopPattern, _p_Magick__DrawablePopPatternTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawablePushClipPath, _p_Magick__DrawablePushClipPathTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawablePushGraphicContext, _p_Magick__DrawablePushGraphicContextTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawablePushPattern, _p_Magick__DrawablePushPatternTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableRectangle, _p_Magick__DrawableRectangleTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableRotation, _p_Magick__DrawableRotationTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableRoundRectangle, _p_Magick__DrawableRoundRectangleTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableScaling, _p_Magick__DrawableScalingTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableSkewX, _p_Magick__DrawableSkewXTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableSkewY, _p_Magick__DrawableSkewYTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableStrokeAntialias, _p_Magick__DrawableStrokeAntialiasTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableStrokeColor, _p_Magick__DrawableStrokeColorTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableStrokeDashArray, _p_Magick__DrawableStrokeDashArrayTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableStrokeDashOffset, _p_Magick__DrawableStrokeDashOffsetTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableStrokeLineCap, _p_Magick__DrawableStrokeLineCapTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableStrokeLineJoin, _p_Magick__DrawableStrokeLineJoinTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableStrokeOpacity, _p_Magick__DrawableStrokeOpacityTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableStrokePatternUrl, _p_Magick__DrawableStrokePatternUrlTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableStrokeWidth, _p_Magick__DrawableStrokeWidthTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableText, _p_Magick__DrawableTextTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableTextAlignment, _p_Magick__DrawableTextAlignmentTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableTextAntialias, _p_Magick__DrawableTextAntialiasTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableTextDecoration, _p_Magick__DrawableTextDecorationTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableTextDirection, _p_Magick__DrawableTextDirectionTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableTextInterlineSpacing, _p_Magick__DrawableTextInterlineSpacingTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableTextInterwordSpacing, _p_Magick__DrawableTextInterwordSpacingTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableTextKerning, _p_Magick__DrawableTextKerningTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableTextUnderColor, _p_Magick__DrawableTextUnderColorTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableTranslation, _p_Magick__DrawableTranslationTo_p_Magick__DrawableBase, 0, 0},  {&_swigt__p_Magick__DrawableViewbox, _p_Magick__DrawableViewboxTo_p_Magick__DrawableBase, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableBezier[] = {  {&_swigt__p_Magick__DrawableBezier, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableBorderColor[] = {  {&_swigt__p_Magick__DrawableBorderColor, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableCircle[] = {  {&_swigt__p_Magick__DrawableCircle, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableClipPath[] = {  {&_swigt__p_Magick__DrawableClipPath, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableClipRule[] = {  {&_swigt__p_Magick__DrawableClipRule, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableClipUnits[] = {  {&_swigt__p_Magick__DrawableClipUnits, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableColor[] = {  {&_swigt__p_Magick__DrawableColor, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableCompositeImage[] = {  {&_swigt__p_Magick__DrawableCompositeImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableDensity[] = {  {&_swigt__p_Magick__DrawableDensity, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableEllipse[] = {  {&_swigt__p_Magick__DrawableEllipse, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableFillColor[] = {  {&_swigt__p_Magick__DrawableFillColor, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableFillOpacity[] = {  {&_swigt__p_Magick__DrawableFillOpacity, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableFillPatternUrl[] = {  {&_swigt__p_Magick__DrawableFillPatternUrl, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableFillRule[] = {  {&_swigt__p_Magick__DrawableFillRule, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableFont[] = {  {&_swigt__p_Magick__DrawableFont, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableGravity[] = {  {&_swigt__p_Magick__DrawableGravity, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableLine[] = {  {&_swigt__p_Magick__DrawableLine, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableMiterLimit[] = {  {&_swigt__p_Magick__DrawableMiterLimit, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawablePath[] = {  {&_swigt__p_Magick__DrawablePath, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawablePoint[] = {  {&_swigt__p_Magick__DrawablePoint, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawablePointSize[] = {  {&_swigt__p_Magick__DrawablePointSize, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawablePolygon[] = {  {&_swigt__p_Magick__DrawablePolygon, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawablePolyline[] = {  {&_swigt__p_Magick__DrawablePolyline, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawablePopClipPath[] = {  {&_swigt__p_Magick__DrawablePopClipPath, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawablePopGraphicContext[] = {  {&_swigt__p_Magick__DrawablePopGraphicContext, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawablePopPattern[] = {  {&_swigt__p_Magick__DrawablePopPattern, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawablePushClipPath[] = {  {&_swigt__p_Magick__DrawablePushClipPath, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawablePushGraphicContext[] = {  {&_swigt__p_Magick__DrawablePushGraphicContext, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawablePushPattern[] = {  {&_swigt__p_Magick__DrawablePushPattern, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableRectangle[] = {  {&_swigt__p_Magick__DrawableRectangle, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableRotation[] = {  {&_swigt__p_Magick__DrawableRotation, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableRoundRectangle[] = {  {&_swigt__p_Magick__DrawableRoundRectangle, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableScaling[] = {  {&_swigt__p_Magick__DrawableScaling, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableSkewX[] = {  {&_swigt__p_Magick__DrawableSkewX, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableSkewY[] = {  {&_swigt__p_Magick__DrawableSkewY, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableStrokeAntialias[] = {  {&_swigt__p_Magick__DrawableStrokeAntialias, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableStrokeColor[] = {  {&_swigt__p_Magick__DrawableStrokeColor, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableStrokeDashArray[] = {  {&_swigt__p_Magick__DrawableStrokeDashArray, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableStrokeDashOffset[] = {  {&_swigt__p_Magick__DrawableStrokeDashOffset, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableStrokeLineCap[] = {  {&_swigt__p_Magick__DrawableStrokeLineCap, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableStrokeLineJoin[] = {  {&_swigt__p_Magick__DrawableStrokeLineJoin, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableStrokeOpacity[] = {  {&_swigt__p_Magick__DrawableStrokeOpacity, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableStrokePatternUrl[] = {  {&_swigt__p_Magick__DrawableStrokePatternUrl, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableStrokeWidth[] = {  {&_swigt__p_Magick__DrawableStrokeWidth, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableText[] = {  {&_swigt__p_Magick__DrawableText, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableTextAlignment[] = {  {&_swigt__p_Magick__DrawableTextAlignment, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableTextAntialias[] = {  {&_swigt__p_Magick__DrawableTextAntialias, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableTextDecoration[] = {  {&_swigt__p_Magick__DrawableTextDecoration, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableTextDirection[] = {  {&_swigt__p_Magick__DrawableTextDirection, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableTextInterlineSpacing[] = {  {&_swigt__p_Magick__DrawableTextInterlineSpacing, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableTextInterwordSpacing[] = {  {&_swigt__p_Magick__DrawableTextInterwordSpacing, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableTextKerning[] = {  {&_swigt__p_Magick__DrawableTextKerning, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableTextUnderColor[] = {  {&_swigt__p_Magick__DrawableTextUnderColor, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableTranslation[] = {  {&_swigt__p_Magick__DrawableTranslation, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__DrawableViewbox[] = {  {&_swigt__p_Magick__DrawableViewbox, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ErrorBlob[] = {{&_swigt__p_Magick__ErrorBlob, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ErrorCache[] = {{&_swigt__p_Magick__ErrorCache, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ErrorCoder[] = {{&_swigt__p_Magick__ErrorCoder, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ErrorConfigure[] = {{&_swigt__p_Magick__ErrorConfigure, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ErrorCorruptImage[] = {{&_swigt__p_Magick__ErrorCorruptImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ErrorDelegate[] = {{&_swigt__p_Magick__ErrorDelegate, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ErrorDraw[] = {{&_swigt__p_Magick__ErrorDraw, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ErrorFileOpen[] = {{&_swigt__p_Magick__ErrorFileOpen, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ErrorImage[] = {{&_swigt__p_Magick__ErrorImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ErrorMissingDelegate[] = {{&_swigt__p_Magick__ErrorMissingDelegate, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ErrorModule[] = {{&_swigt__p_Magick__ErrorModule, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ErrorMonitor[] = {{&_swigt__p_Magick__ErrorMonitor, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ErrorOption[] = {{&_swigt__p_Magick__ErrorOption, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ErrorRegistry[] = {{&_swigt__p_Magick__ErrorRegistry, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ErrorResourceLimit[] = {{&_swigt__p_Magick__ErrorResourceLimit, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ErrorStream[] = {{&_swigt__p_Magick__ErrorStream, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ErrorUndefined[] = {{&_swigt__p_Magick__ErrorUndefined, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ErrorXServer[] = {{&_swigt__p_Magick__ErrorXServer, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__Error[] = {  {&_swigt__p_Magick__Error, 0, 0, 0},  {&_swigt__p_Magick__ErrorBlob, _p_Magick__ErrorBlobTo_p_Magick__Error, 0, 0},  {&_swigt__p_Magick__ErrorCache, _p_Magick__ErrorCacheTo_p_Magick__Error, 0, 0},  {&_swigt__p_Magick__ErrorCoder, _p_Magick__ErrorCoderTo_p_Magick__Error, 0, 0},  {&_swigt__p_Magick__ErrorConfigure, _p_Magick__ErrorConfigureTo_p_Magick__Error, 0, 0},  {&_swigt__p_Magick__ErrorCorruptImage, _p_Magick__ErrorCorruptImageTo_p_Magick__Error, 0, 0},  {&_swigt__p_Magick__ErrorDelegate, _p_Magick__ErrorDelegateTo_p_Magick__Error, 0, 0},  {&_swigt__p_Magick__ErrorDraw, _p_Magick__ErrorDrawTo_p_Magick__Error, 0, 0},  {&_swigt__p_Magick__ErrorFileOpen, _p_Magick__ErrorFileOpenTo_p_Magick__Error, 0, 0},  {&_swigt__p_Magick__ErrorImage, _p_Magick__ErrorImageTo_p_Magick__Error, 0, 0},  {&_swigt__p_Magick__ErrorMissingDelegate, _p_Magick__ErrorMissingDelegateTo_p_Magick__Error, 0, 0},  {&_swigt__p_Magick__ErrorModule, _p_Magick__ErrorModuleTo_p_Magick__Error, 0, 0},  {&_swigt__p_Magick__ErrorMonitor, _p_Magick__ErrorMonitorTo_p_Magick__Error, 0, 0},  {&_swigt__p_Magick__ErrorOption, _p_Magick__ErrorOptionTo_p_Magick__Error, 0, 0},  {&_swigt__p_Magick__ErrorPolicy, _p_Magick__ErrorPolicyTo_p_Magick__Error, 0, 0},  {&_swigt__p_Magick__ErrorRegistry, _p_Magick__ErrorRegistryTo_p_Magick__Error, 0, 0},  {&_swigt__p_Magick__ErrorResourceLimit, _p_Magick__ErrorResourceLimitTo_p_Magick__Error, 0, 0},  {&_swigt__p_Magick__ErrorStream, _p_Magick__ErrorStreamTo_p_Magick__Error, 0, 0},  {&_swigt__p_Magick__ErrorType, _p_Magick__ErrorTypeTo_p_Magick__Error, 0, 0},  {&_swigt__p_Magick__ErrorUndefined, _p_Magick__ErrorUndefinedTo_p_Magick__Error, 0, 0},  {&_swigt__p_Magick__ErrorXServer, _p_Magick__ErrorXServerTo_p_Magick__Error, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ErrorPolicy[] = {  {&_swigt__p_Magick__ErrorPolicy, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ErrorType[] = {  {&_swigt__p_Magick__ErrorType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__WarningBlob[] = {{&_swigt__p_Magick__WarningBlob, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__WarningCache[] = {{&_swigt__p_Magick__WarningCache, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__WarningCoder[] = {{&_swigt__p_Magick__WarningCoder, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__WarningConfigure[] = {{&_swigt__p_Magick__WarningConfigure, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__WarningCorruptImage[] = {{&_swigt__p_Magick__WarningCorruptImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__WarningDelegate[] = {{&_swigt__p_Magick__WarningDelegate, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__WarningDraw[] = {{&_swigt__p_Magick__WarningDraw, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__WarningFileOpen[] = {{&_swigt__p_Magick__WarningFileOpen, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__WarningImage[] = {{&_swigt__p_Magick__WarningImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__WarningMissingDelegate[] = {{&_swigt__p_Magick__WarningMissingDelegate, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__WarningModule[] = {{&_swigt__p_Magick__WarningModule, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__WarningMonitor[] = {{&_swigt__p_Magick__WarningMonitor, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__WarningOption[] = {{&_swigt__p_Magick__WarningOption, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__WarningRegistry[] = {{&_swigt__p_Magick__WarningRegistry, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__WarningResourceLimit[] = {{&_swigt__p_Magick__WarningResourceLimit, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__WarningStream[] = {{&_swigt__p_Magick__WarningStream, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__WarningUndefined[] = {{&_swigt__p_Magick__WarningUndefined, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__WarningXServer[] = {{&_swigt__p_Magick__WarningXServer, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__Exception[] = {  {&_swigt__p_Magick__Exception, 0, 0, 0},  {&_swigt__p_Magick__Error, _p_Magick__ErrorTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__ErrorBlob, _p_Magick__ErrorBlobTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__ErrorCache, _p_Magick__ErrorCacheTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__ErrorCoder, _p_Magick__ErrorCoderTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__ErrorConfigure, _p_Magick__ErrorConfigureTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__ErrorCorruptImage, _p_Magick__ErrorCorruptImageTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__ErrorDelegate, _p_Magick__ErrorDelegateTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__ErrorDraw, _p_Magick__ErrorDrawTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__ErrorFileOpen, _p_Magick__ErrorFileOpenTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__ErrorImage, _p_Magick__ErrorImageTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__ErrorMissingDelegate, _p_Magick__ErrorMissingDelegateTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__ErrorModule, _p_Magick__ErrorModuleTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__ErrorMonitor, _p_Magick__ErrorMonitorTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__ErrorOption, _p_Magick__ErrorOptionTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__ErrorPolicy, _p_Magick__ErrorPolicyTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__ErrorRegistry, _p_Magick__ErrorRegistryTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__ErrorResourceLimit, _p_Magick__ErrorResourceLimitTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__ErrorStream, _p_Magick__ErrorStreamTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__ErrorType, _p_Magick__ErrorTypeTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__ErrorUndefined, _p_Magick__ErrorUndefinedTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__ErrorXServer, _p_Magick__ErrorXServerTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__Warning, _p_Magick__WarningTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__WarningBlob, _p_Magick__WarningBlobTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__WarningCache, _p_Magick__WarningCacheTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__WarningCoder, _p_Magick__WarningCoderTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__WarningConfigure, _p_Magick__WarningConfigureTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__WarningCorruptImage, _p_Magick__WarningCorruptImageTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__WarningDelegate, _p_Magick__WarningDelegateTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__WarningDraw, _p_Magick__WarningDrawTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__WarningFileOpen, _p_Magick__WarningFileOpenTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__WarningImage, _p_Magick__WarningImageTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__WarningMissingDelegate, _p_Magick__WarningMissingDelegateTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__WarningModule, _p_Magick__WarningModuleTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__WarningMonitor, _p_Magick__WarningMonitorTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__WarningOption, _p_Magick__WarningOptionTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__WarningPolicy, _p_Magick__WarningPolicyTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__WarningRegistry, _p_Magick__WarningRegistryTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__WarningResourceLimit, _p_Magick__WarningResourceLimitTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__WarningStream, _p_Magick__WarningStreamTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__WarningType, _p_Magick__WarningTypeTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__WarningUndefined, _p_Magick__WarningUndefinedTo_p_Magick__Exception, 0, 0},  {&_swigt__p_Magick__WarningXServer, _p_Magick__WarningXServerTo_p_Magick__Exception, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__Geometry[] = {  {&_swigt__p_Magick__Geometry, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__Image[] = {  {&_swigt__p_Magick__Image, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ImageMoments[] = {  {&_swigt__p_Magick__ImageMoments, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ImagePerceptualHash[] = {  {&_swigt__p_Magick__ImagePerceptualHash, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ImageStatistics[] = {  {&_swigt__p_Magick__ImageStatistics, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__Montage[] = {  {&_swigt__p_Magick__Montage, 0, 0, 0},  {&_swigt__p_Magick__MontageFramed, _p_Magick__MontageFramedTo_p_Magick__Montage, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__MontageFramed[] = {  {&_swigt__p_Magick__MontageFramed, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__Offset[] = {  {&_swigt__p_Magick__Offset, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__Options[] = {  {&_swigt__p_Magick__Options, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathArcAbs[] = {  {&_swigt__p_Magick__PathArcAbs, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathArcArgs[] = {  {&_swigt__p_Magick__PathArcArgs, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathArcRel[] = {  {&_swigt__p_Magick__PathArcRel, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathClosePath[] = {  {&_swigt__p_Magick__PathClosePath, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathCurvetoAbs[] = {  {&_swigt__p_Magick__PathCurvetoAbs, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathCurvetoArgs[] = {  {&_swigt__p_Magick__PathCurvetoArgs, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathCurvetoRel[] = {  {&_swigt__p_Magick__PathCurvetoRel, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathLinetoAbs[] = {  {&_swigt__p_Magick__PathLinetoAbs, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathLinetoHorizontalAbs[] = {  {&_swigt__p_Magick__PathLinetoHorizontalAbs, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathLinetoHorizontalRel[] = {  {&_swigt__p_Magick__PathLinetoHorizontalRel, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathLinetoRel[] = {  {&_swigt__p_Magick__PathLinetoRel, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathLinetoVerticalAbs[] = {  {&_swigt__p_Magick__PathLinetoVerticalAbs, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathLinetoVerticalRel[] = {  {&_swigt__p_Magick__PathLinetoVerticalRel, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathMovetoAbs[] = {  {&_swigt__p_Magick__PathMovetoAbs, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathMovetoRel[] = {  {&_swigt__p_Magick__PathMovetoRel, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathQuadraticCurvetoAbs[] = {  {&_swigt__p_Magick__PathQuadraticCurvetoAbs, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathQuadraticCurvetoArgs[] = {  {&_swigt__p_Magick__PathQuadraticCurvetoArgs, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathQuadraticCurvetoRel[] = {  {&_swigt__p_Magick__PathQuadraticCurvetoRel, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathSmoothCurvetoAbs[] = {  {&_swigt__p_Magick__PathSmoothCurvetoAbs, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathSmoothCurvetoRel[] = {  {&_swigt__p_Magick__PathSmoothCurvetoRel, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathSmoothQuadraticCurvetoAbs[] = {  {&_swigt__p_Magick__PathSmoothQuadraticCurvetoAbs, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__PathSmoothQuadraticCurvetoRel[] = {  {&_swigt__p_Magick__PathSmoothQuadraticCurvetoRel, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__Point[] = {  {&_swigt__p_Magick__Point, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ReadOptions[] = {  {&_swigt__p_Magick__ReadOptions, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__ResourceLimits[] = {  {&_swigt__p_Magick__ResourceLimits, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__TypeMetric[] = {  {&_swigt__p_Magick__TypeMetric, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__VPath[] = {  {&_swigt__p_Magick__VPath, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__VPathBase[] = {  {&_swigt__p_Magick__VPathBase, 0, 0, 0},  {&_swigt__p_Magick__PathArcAbs, _p_Magick__PathArcAbsTo_p_Magick__VPathBase, 0, 0},  {&_swigt__p_Magick__PathArcRel, _p_Magick__PathArcRelTo_p_Magick__VPathBase, 0, 0},  {&_swigt__p_Magick__PathClosePath, _p_Magick__PathClosePathTo_p_Magick__VPathBase, 0, 0},  {&_swigt__p_Magick__PathCurvetoAbs, _p_Magick__PathCurvetoAbsTo_p_Magick__VPathBase, 0, 0},  {&_swigt__p_Magick__PathCurvetoRel, _p_Magick__PathCurvetoRelTo_p_Magick__VPathBase, 0, 0},  {&_swigt__p_Magick__PathLinetoAbs, _p_Magick__PathLinetoAbsTo_p_Magick__VPathBase, 0, 0},  {&_swigt__p_Magick__PathLinetoHorizontalAbs, _p_Magick__PathLinetoHorizontalAbsTo_p_Magick__VPathBase, 0, 0},  {&_swigt__p_Magick__PathLinetoHorizontalRel, _p_Magick__PathLinetoHorizontalRelTo_p_Magick__VPathBase, 0, 0},  {&_swigt__p_Magick__PathLinetoRel, _p_Magick__PathLinetoRelTo_p_Magick__VPathBase, 0, 0},  {&_swigt__p_Magick__PathLinetoVerticalAbs, _p_Magick__PathLinetoVerticalAbsTo_p_Magick__VPathBase, 0, 0},  {&_swigt__p_Magick__PathLinetoVerticalRel, _p_Magick__PathLinetoVerticalRelTo_p_Magick__VPathBase, 0, 0},  {&_swigt__p_Magick__PathMovetoAbs, _p_Magick__PathMovetoAbsTo_p_Magick__VPathBase, 0, 0},  {&_swigt__p_Magick__PathMovetoRel, _p_Magick__PathMovetoRelTo_p_Magick__VPathBase, 0, 0},  {&_swigt__p_Magick__PathQuadraticCurvetoAbs, _p_Magick__PathQuadraticCurvetoAbsTo_p_Magick__VPathBase, 0, 0},  {&_swigt__p_Magick__PathQuadraticCurvetoRel, _p_Magick__PathQuadraticCurvetoRelTo_p_Magick__VPathBase, 0, 0},  {&_swigt__p_Magick__PathSmoothCurvetoAbs, _p_Magick__PathSmoothCurvetoAbsTo_p_Magick__VPathBase, 0, 0},  {&_swigt__p_Magick__PathSmoothCurvetoRel, _p_Magick__PathSmoothCurvetoRelTo_p_Magick__VPathBase, 0, 0},  {&_swigt__p_Magick__PathSmoothQuadraticCurvetoAbs, _p_Magick__PathSmoothQuadraticCurvetoAbsTo_p_Magick__VPathBase, 0, 0},  {&_swigt__p_Magick__PathSmoothQuadraticCurvetoRel, _p_Magick__PathSmoothQuadraticCurvetoRelTo_p_Magick__VPathBase, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__Warning[] = {  {&_swigt__p_Magick__Warning, 0, 0, 0},  {&_swigt__p_Magick__WarningBlob, _p_Magick__WarningBlobTo_p_Magick__Warning, 0, 0},  {&_swigt__p_Magick__WarningCache, _p_Magick__WarningCacheTo_p_Magick__Warning, 0, 0},  {&_swigt__p_Magick__WarningCoder, _p_Magick__WarningCoderTo_p_Magick__Warning, 0, 0},  {&_swigt__p_Magick__WarningConfigure, _p_Magick__WarningConfigureTo_p_Magick__Warning, 0, 0},  {&_swigt__p_Magick__WarningCorruptImage, _p_Magick__WarningCorruptImageTo_p_Magick__Warning, 0, 0},  {&_swigt__p_Magick__WarningDelegate, _p_Magick__WarningDelegateTo_p_Magick__Warning, 0, 0},  {&_swigt__p_Magick__WarningDraw, _p_Magick__WarningDrawTo_p_Magick__Warning, 0, 0},  {&_swigt__p_Magick__WarningFileOpen, _p_Magick__WarningFileOpenTo_p_Magick__Warning, 0, 0},  {&_swigt__p_Magick__WarningImage, _p_Magick__WarningImageTo_p_Magick__Warning, 0, 0},  {&_swigt__p_Magick__WarningMissingDelegate, _p_Magick__WarningMissingDelegateTo_p_Magick__Warning, 0, 0},  {&_swigt__p_Magick__WarningModule, _p_Magick__WarningModuleTo_p_Magick__Warning, 0, 0},  {&_swigt__p_Magick__WarningMonitor, _p_Magick__WarningMonitorTo_p_Magick__Warning, 0, 0},  {&_swigt__p_Magick__WarningOption, _p_Magick__WarningOptionTo_p_Magick__Warning, 0, 0},  {&_swigt__p_Magick__WarningPolicy, _p_Magick__WarningPolicyTo_p_Magick__Warning, 0, 0},  {&_swigt__p_Magick__WarningRegistry, _p_Magick__WarningRegistryTo_p_Magick__Warning, 0, 0},  {&_swigt__p_Magick__WarningResourceLimit, _p_Magick__WarningResourceLimitTo_p_Magick__Warning, 0, 0},  {&_swigt__p_Magick__WarningStream, _p_Magick__WarningStreamTo_p_Magick__Warning, 0, 0},  {&_swigt__p_Magick__WarningType, _p_Magick__WarningTypeTo_p_Magick__Warning, 0, 0},  {&_swigt__p_Magick__WarningUndefined, _p_Magick__WarningUndefinedTo_p_Magick__Warning, 0, 0},  {&_swigt__p_Magick__WarningXServer, _p_Magick__WarningXServerTo_p_Magick__Warning, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__WarningPolicy[] = {  {&_swigt__p_Magick__WarningPolicy, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__WarningType[] = {  {&_swigt__p_Magick__WarningType, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__adaptiveBlurImage[] = {  {&_swigt__p_Magick__adaptiveBlurImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__adaptiveThresholdImage[] = {  {&_swigt__p_Magick__adaptiveThresholdImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__addNoiseImage[] = {  {&_swigt__p_Magick__addNoiseImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__adjoinImage[] = {  {&_swigt__p_Magick__adjoinImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__affineTransformImage[] = {  {&_swigt__p_Magick__affineTransformImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__alphaFlagImage[] = {  {&_swigt__p_Magick__alphaFlagImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__alphaImage[] = {  {&_swigt__p_Magick__alphaImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__animationDelayImage[] = {  {&_swigt__p_Magick__animationDelayImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__animationIterationsImage[] = {  {&_swigt__p_Magick__animationIterationsImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__annotateImage[] = {  {&_swigt__p_Magick__annotateImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__backgroundColorImage[] = {  {&_swigt__p_Magick__backgroundColorImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__backgroundTextureImage[] = {  {&_swigt__p_Magick__backgroundTextureImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__blurImage[] = {  {&_swigt__p_Magick__blurImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__borderColorImage[] = {  {&_swigt__p_Magick__borderColorImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__borderImage[] = {  {&_swigt__p_Magick__borderImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__boxColorImage[] = {  {&_swigt__p_Magick__boxColorImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__cdlImage[] = {  {&_swigt__p_Magick__cdlImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__channelImage[] = {  {&_swigt__p_Magick__channelImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__charcoalImage[] = {  {&_swigt__p_Magick__charcoalImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__chopImage[] = {  {&_swigt__p_Magick__chopImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__chromaBluePrimaryImage[] = {  {&_swigt__p_Magick__chromaBluePrimaryImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__chromaGreenPrimaryImage[] = {  {&_swigt__p_Magick__chromaGreenPrimaryImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__chromaRedPrimaryImage[] = {  {&_swigt__p_Magick__chromaRedPrimaryImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__chromaWhitePointImage[] = {  {&_swigt__p_Magick__chromaWhitePointImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__colorFuzzImage[] = {  {&_swigt__p_Magick__colorFuzzImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__colorMapImage[] = {  {&_swigt__p_Magick__colorMapImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__colorMatrixImage[] = {  {&_swigt__p_Magick__colorMatrixImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__colorSpaceImage[] = {  {&_swigt__p_Magick__colorSpaceImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__colorizeImage[] = {  {&_swigt__p_Magick__colorizeImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__commentImage[] = {  {&_swigt__p_Magick__commentImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__composeImage[] = {  {&_swigt__p_Magick__composeImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__compositeImage[] = {  {&_swigt__p_Magick__compositeImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__compressTypeImage[] = {  {&_swigt__p_Magick__compressTypeImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__contrastImage[] = {  {&_swigt__p_Magick__contrastImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__cropImage[] = {  {&_swigt__p_Magick__cropImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__cycleColormapImage[] = {  {&_swigt__p_Magick__cycleColormapImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__densityImage[] = {  {&_swigt__p_Magick__densityImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__depthImage[] = {  {&_swigt__p_Magick__depthImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__despeckleImage[] = {  {&_swigt__p_Magick__despeckleImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__distortImage[] = {  {&_swigt__p_Magick__distortImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__drawImage[] = {  {&_swigt__p_Magick__drawImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__edgeImage[] = {  {&_swigt__p_Magick__edgeImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__embossImage[] = {  {&_swigt__p_Magick__embossImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__endianImage[] = {  {&_swigt__p_Magick__endianImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__enhanceImage[] = {  {&_swigt__p_Magick__enhanceImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__equalizeImage[] = {  {&_swigt__p_Magick__equalizeImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__fileNameImage[] = {  {&_swigt__p_Magick__fileNameImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__fillColorImage[] = {  {&_swigt__p_Magick__fillColorImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__filterTypeImage[] = {  {&_swigt__p_Magick__filterTypeImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__flipImage[] = {  {&_swigt__p_Magick__flipImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__floodFillAlphaImage[] = {  {&_swigt__p_Magick__floodFillAlphaImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__floodFillColorImage[] = {  {&_swigt__p_Magick__floodFillColorImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__floodFillTextureImage[] = {  {&_swigt__p_Magick__floodFillTextureImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__flopImage[] = {  {&_swigt__p_Magick__flopImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__fontImage[] = {  {&_swigt__p_Magick__fontImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__fontPointsizeImage[] = {  {&_swigt__p_Magick__fontPointsizeImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__frameImage[] = {  {&_swigt__p_Magick__frameImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__gammaImage[] = {  {&_swigt__p_Magick__gammaImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__gaussianBlurImage[] = {  {&_swigt__p_Magick__gaussianBlurImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__gifDisposeMethodImage[] = {  {&_swigt__p_Magick__gifDisposeMethodImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__haldClutImage[] = {  {&_swigt__p_Magick__haldClutImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__implodeImage[] = {  {&_swigt__p_Magick__implodeImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__interlaceTypeImage[] = {  {&_swigt__p_Magick__interlaceTypeImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__inverseFourierTransformImage[] = {  {&_swigt__p_Magick__inverseFourierTransformImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__isValidImage[] = {  {&_swigt__p_Magick__isValidImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__labelImage[] = {  {&_swigt__p_Magick__labelImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__levelImage[] = {  {&_swigt__p_Magick__levelImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__magickImage[] = {  {&_swigt__p_Magick__magickImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__magnifyImage[] = {  {&_swigt__p_Magick__magnifyImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__mapImage[] = {  {&_swigt__p_Magick__mapImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__matteColorImage[] = {  {&_swigt__p_Magick__matteColorImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__medianConvolveImage[] = {  {&_swigt__p_Magick__medianConvolveImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__minifyImage[] = {  {&_swigt__p_Magick__minifyImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__modulateImage[] = {  {&_swigt__p_Magick__modulateImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__monochromeImage[] = {  {&_swigt__p_Magick__monochromeImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__negateImage[] = {  {&_swigt__p_Magick__negateImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__normalizeImage[] = {  {&_swigt__p_Magick__normalizeImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__oilPaintImage[] = {  {&_swigt__p_Magick__oilPaintImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__opaqueImage[] = {  {&_swigt__p_Magick__opaqueImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__pageImage[] = {  {&_swigt__p_Magick__pageImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__pixelColorImage[] = {  {&_swigt__p_Magick__pixelColorImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__qualityImage[] = {  {&_swigt__p_Magick__qualityImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__quantizeColorSpaceImage[] = {  {&_swigt__p_Magick__quantizeColorSpaceImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__quantizeColorsImage[] = {  {&_swigt__p_Magick__quantizeColorsImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__quantizeDitherImage[] = {  {&_swigt__p_Magick__quantizeDitherImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__quantizeImage[] = {  {&_swigt__p_Magick__quantizeImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__quantizeTreeDepthImage[] = {  {&_swigt__p_Magick__quantizeTreeDepthImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__raiseImage[] = {  {&_swigt__p_Magick__raiseImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__reduceNoiseImage[] = {  {&_swigt__p_Magick__reduceNoiseImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__renderingIntentImage[] = {  {&_swigt__p_Magick__renderingIntentImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__resizeImage[] = {  {&_swigt__p_Magick__resizeImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__resolutionUnitsImage[] = {  {&_swigt__p_Magick__resolutionUnitsImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__rollImage[] = {  {&_swigt__p_Magick__rollImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__rotateImage[] = {  {&_swigt__p_Magick__rotateImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__sampleImage[] = {  {&_swigt__p_Magick__sampleImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__scaleImage[] = {  {&_swigt__p_Magick__scaleImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__sceneImage[] = {  {&_swigt__p_Magick__sceneImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__segmentImage[] = {  {&_swigt__p_Magick__segmentImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__shadeImage[] = {  {&_swigt__p_Magick__shadeImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__shadowImage[] = {  {&_swigt__p_Magick__shadowImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__sharpenImage[] = {  {&_swigt__p_Magick__sharpenImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__shaveImage[] = {  {&_swigt__p_Magick__shaveImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__shearImage[] = {  {&_swigt__p_Magick__shearImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__sizeImage[] = {  {&_swigt__p_Magick__sizeImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__solarizeImage[] = {  {&_swigt__p_Magick__solarizeImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__spliceImage[] = {  {&_swigt__p_Magick__spliceImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__spreadImage[] = {  {&_swigt__p_Magick__spreadImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__steganoImage[] = {  {&_swigt__p_Magick__steganoImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__stereoImage[] = {  {&_swigt__p_Magick__stereoImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__stripImage[] = {  {&_swigt__p_Magick__stripImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__strokeColorImage[] = {  {&_swigt__p_Magick__strokeColorImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__subImageImage[] = {  {&_swigt__p_Magick__subImageImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__subRangeImage[] = {  {&_swigt__p_Magick__subRangeImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__swirlImage[] = {  {&_swigt__p_Magick__swirlImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__textAntiAliasImage[] = {  {&_swigt__p_Magick__textAntiAliasImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__textureImage[] = {  {&_swigt__p_Magick__textureImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__thresholdImage[] = {  {&_swigt__p_Magick__thresholdImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__transparentImage[] = {  {&_swigt__p_Magick__transparentImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__trimImage[] = {  {&_swigt__p_Magick__trimImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__typeImage[] = {  {&_swigt__p_Magick__typeImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__verboseImage[] = {  {&_swigt__p_Magick__verboseImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__waveImage[] = {  {&_swigt__p_Magick__waveImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__x11DisplayImage[] = {  {&_swigt__p_Magick__x11DisplayImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_Magick__zoomImage[] = {  {&_swigt__p_Magick__zoomImage, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p__DrawingWand[] = {  {&_swigt__p__DrawingWand, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p__PolicyInfo[] = {  {&_swigt__p__PolicyInfo, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_p_MagickCore___Image[] = {  {&_swigt__p_p_MagickCore___Image, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_std__exception[] = {  {&_swigt__p_std__exception, 0, 0, 0},  {&_swigt__p_Magick__Error, _p_Magick__ErrorTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__ErrorBlob, _p_Magick__ErrorBlobTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__ErrorCache, _p_Magick__ErrorCacheTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__ErrorCoder, _p_Magick__ErrorCoderTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__ErrorConfigure, _p_Magick__ErrorConfigureTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__ErrorCorruptImage, _p_Magick__ErrorCorruptImageTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__ErrorDelegate, _p_Magick__ErrorDelegateTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__ErrorDraw, _p_Magick__ErrorDrawTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__ErrorFileOpen, _p_Magick__ErrorFileOpenTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__ErrorImage, _p_Magick__ErrorImageTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__ErrorMissingDelegate, _p_Magick__ErrorMissingDelegateTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__ErrorModule, _p_Magick__ErrorModuleTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__ErrorMonitor, _p_Magick__ErrorMonitorTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__ErrorOption, _p_Magick__ErrorOptionTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__ErrorPolicy, _p_Magick__ErrorPolicyTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__ErrorRegistry, _p_Magick__ErrorRegistryTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__ErrorResourceLimit, _p_Magick__ErrorResourceLimitTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__ErrorStream, _p_Magick__ErrorStreamTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__ErrorType, _p_Magick__ErrorTypeTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__ErrorUndefined, _p_Magick__ErrorUndefinedTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__ErrorXServer, _p_Magick__ErrorXServerTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__Exception, _p_Magick__ExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__Warning, _p_Magick__WarningTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__WarningBlob, _p_Magick__WarningBlobTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__WarningCache, _p_Magick__WarningCacheTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__WarningCoder, _p_Magick__WarningCoderTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__WarningConfigure, _p_Magick__WarningConfigureTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__WarningCorruptImage, _p_Magick__WarningCorruptImageTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__WarningDelegate, _p_Magick__WarningDelegateTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__WarningDraw, _p_Magick__WarningDrawTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__WarningFileOpen, _p_Magick__WarningFileOpenTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__WarningImage, _p_Magick__WarningImageTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__WarningMissingDelegate, _p_Magick__WarningMissingDelegateTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__WarningModule, _p_Magick__WarningModuleTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__WarningMonitor, _p_Magick__WarningMonitorTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__WarningOption, _p_Magick__WarningOptionTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__WarningPolicy, _p_Magick__WarningPolicyTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__WarningRegistry, _p_Magick__WarningRegistryTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__WarningResourceLimit, _p_Magick__WarningResourceLimitTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__WarningStream, _p_Magick__WarningStreamTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__WarningType, _p_Magick__WarningTypeTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__WarningUndefined, _p_Magick__WarningUndefinedTo_p_std__exception, 0, 0},  {&_swigt__p_Magick__WarningXServer, _p_Magick__WarningXServerTo_p_std__exception, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_std__vectorT_Magick__CoderInfo_t[] = {  {&_swigt__p_std__vectorT_Magick__CoderInfo_t, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_std__vectorT_Magick__Coordinate_t[] = {  {&_swigt__p_std__vectorT_Magick__Coordinate_t, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_std__vectorT_Magick__Drawable_t[] = {  {&_swigt__p_std__vectorT_Magick__Drawable_t, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_std__vectorT_Magick__PathArcArgs_t[] = {  {&_swigt__p_std__vectorT_Magick__PathArcArgs_t, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_std__vectorT_Magick__PathCurvetoArgs_t[] = {  {&_swigt__p_std__vectorT_Magick__PathCurvetoArgs_t, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_std__vectorT_Magick__PathQuadraticCurvetoArgs_t[] = {  {&_swigt__p_std__vectorT_Magick__PathQuadraticCurvetoArgs_t, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_std__vectorT_Magick__VPath_t[] = {  {&_swigt__p_std__vectorT_Magick__VPath_t, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_uintptr_t[] = {  {&_swigt__p_uintptr_t, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
SWIGINTERN swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

SWIGINTERN swig_cast_info *swig_cast_initial[] = {
  _swigc__p_FILE,
  _swigc__p_ImageListContainer,
  _swigc__p_ImageListIterator,
  _swigc__p_MagickCore__AlignType,
  _swigc__p_MagickCore__CacheType,
  _swigc__p_MagickCore__ChannelType,
  _swigc__p_MagickCore__ClassType,
  _swigc__p_MagickCore__ColorspaceType,
  _swigc__p_MagickCore__ComplexOperator,
  _swigc__p_MagickCore__ComplianceType,
  _swigc__p_MagickCore__CompositeOperator,
  _swigc__p_MagickCore__CompressionType,
  _swigc__p_MagickCore__DecorationType,
  _swigc__p_MagickCore__DirectionType,
  _swigc__p_MagickCore__DisposeType,
  _swigc__p_MagickCore__EndianType,
  _swigc__p_MagickCore__ExceptionType,
  _swigc__p_MagickCore__FilterType,
  _swigc__p_MagickCore__GradientType,
  _swigc__p_MagickCore__GravityType,
  _swigc__p_MagickCore__IlluminantType,
  _swigc__p_MagickCore__ImageType,
  _swigc__p_MagickCore__InterlaceType,
  _swigc__p_MagickCore__KernelInfoType,
  _swigc__p_MagickCore__LogEventType,
  _swigc__p_MagickCore__MagickBooleanType,
  _swigc__p_MagickCore__MagickCLDeviceType,
  _swigc__p_MagickCore__MagickEvaluateOperator,
  _swigc__p_MagickCore__MagickFormatType,
  _swigc__p_MagickCore__MagickModuleType,
  _swigc__p_MagickCore__MetricType,
  _swigc__p_MagickCore__NoiseType,
  _swigc__p_MagickCore__OrientationType,
  _swigc__p_MagickCore__PathType,
  _swigc__p_MagickCore__PolicyDomain,
  _swigc__p_MagickCore__PolicyRights,
  _swigc__p_MagickCore__PreviewType,
  _swigc__p_MagickCore__PrimitiveType,
  _swigc__p_MagickCore__QuantumAlphaType,
  _swigc__p_MagickCore__QuantumFormatType,
  _swigc__p_MagickCore__QuantumType,
  _swigc__p_MagickCore__ReferenceType,
  _swigc__p_MagickCore__RegistryType,
  _swigc__p_MagickCore__ResolutionType,
  _swigc__p_MagickCore__ResourceType,
  _swigc__p_MagickCore__StatisticType,
  _swigc__p_MagickCore__StorageType,
  _swigc__p_MagickCore__StretchType,
  _swigc__p_MagickCore__StyleType,
  _swigc__p_MagickCore__TransmitType,
  _swigc__p_MagickCore__ValidateType,
  _swigc__p_MagickCore__WordBreakType,
  _swigc__p_MagickCore___ChannelMoments,
  _swigc__p_MagickCore___ChannelPerceptualHash,
  _swigc__p_MagickCore___ChannelStatistics,
  _swigc__p_MagickCore___ExceptionInfo,
  _swigc__p_MagickCore___Image,
  _swigc__p_MagickCore___ImageInfo,
  _swigc__p_MagickCore___MontageInfo,
  _swigc__p_MagickCore___QuantizeInfo,
  _swigc__p_MagickCore___RectangleInfo,
  _swigc__p_MagickWand,
  _swigc__p_Magick__Blob,
  _swigc__p_Magick__ChannelMoments,
  _swigc__p_Magick__ChannelPerceptualHash,
  _swigc__p_Magick__ChannelStatistics,
  _swigc__p_Magick__CoderInfo,
  _swigc__p_Magick__Color,
  _swigc__p_Magick__ColorCMYK,
  _swigc__p_Magick__ColorGray,
  _swigc__p_Magick__ColorHSL,
  _swigc__p_Magick__ColorMono,
  _swigc__p_Magick__ColorRGB,
  _swigc__p_Magick__ColorYUV,
  _swigc__p_Magick__Coordinate,
  _swigc__p_Magick__Drawable,
  _swigc__p_Magick__DrawableAffine,
  _swigc__p_Magick__DrawableAlpha,
  _swigc__p_Magick__DrawableArc,
  _swigc__p_Magick__DrawableBase,
  _swigc__p_Magick__DrawableBezier,
  _swigc__p_Magick__DrawableBorderColor,
  _swigc__p_Magick__DrawableCircle,
  _swigc__p_Magick__DrawableClipPath,
  _swigc__p_Magick__DrawableClipRule,
  _swigc__p_Magick__DrawableClipUnits,
  _swigc__p_Magick__DrawableColor,
  _swigc__p_Magick__DrawableCompositeImage,
  _swigc__p_Magick__DrawableDensity,
  _swigc__p_Magick__DrawableEllipse,
  _swigc__p_Magick__DrawableFillColor,
  _swigc__p_Magick__DrawableFillOpacity,
  _swigc__p_Magick__DrawableFillPatternUrl,
  _swigc__p_Magick__DrawableFillRule,
  _swigc__p_Magick__DrawableFont,
  _swigc__p_Magick__DrawableGravity,
  _swigc__p_Magick__DrawableLine,
  _swigc__p_Magick__DrawableMiterLimit,
  _swigc__p_Magick__DrawablePath,
  _swigc__p_Magick__DrawablePoint,
  _swigc__p_Magick__DrawablePointSize,
  _swigc__p_Magick__DrawablePolygon,
  _swigc__p_Magick__DrawablePolyline,
  _swigc__p_Magick__DrawablePopClipPath,
  _swigc__p_Magick__DrawablePopGraphicContext,
  _swigc__p_Magick__DrawablePopPattern,
  _swigc__p_Magick__DrawablePushClipPath,
  _swigc__p_Magick__DrawablePushGraphicContext,
  _swigc__p_Magick__DrawablePushPattern,
  _swigc__p_Magick__DrawableRectangle,
  _swigc__p_Magick__DrawableRotation,
  _swigc__p_Magick__DrawableRoundRectangle,
  _swigc__p_Magick__DrawableScaling,
  _swigc__p_Magick__DrawableSkewX,
  _swigc__p_Magick__DrawableSkewY,
  _swigc__p_Magick__DrawableStrokeAntialias,
  _swigc__p_Magick__DrawableStrokeColor,
  _swigc__p_Magick__DrawableStrokeDashArray,
  _swigc__p_Magick__DrawableStrokeDashOffset,
  _swigc__p_Magick__DrawableStrokeLineCap,
  _swigc__p_Magick__DrawableStrokeLineJoin,
  _swigc__p_Magick__DrawableStrokeOpacity,
  _swigc__p_Magick__DrawableStrokePatternUrl,
  _swigc__p_Magick__DrawableStrokeWidth,
  _swigc__p_Magick__DrawableText,
  _swigc__p_Magick__DrawableTextAlignment,
  _swigc__p_Magick__DrawableTextAntialias,
  _swigc__p_Magick__DrawableTextDecoration,
  _swigc__p_Magick__DrawableTextDirection,
  _swigc__p_Magick__DrawableTextInterlineSpacing,
  _swigc__p_Magick__DrawableTextInterwordSpacing,
  _swigc__p_Magick__DrawableTextKerning,
  _swigc__p_Magick__DrawableTextUnderColor,
  _swigc__p_Magick__DrawableTranslation,
  _swigc__p_Magick__DrawableViewbox,
  _swigc__p_Magick__Error,
  _swigc__p_Magick__ErrorBlob,
  _swigc__p_Magick__ErrorCache,
  _swigc__p_Magick__ErrorCoder,
  _swigc__p_Magick__ErrorConfigure,
  _swigc__p_Magick__ErrorCorruptImage,
  _swigc__p_Magick__ErrorDelegate,
  _swigc__p_Magick__ErrorDraw,
  _swigc__p_Magick__ErrorFileOpen,
  _swigc__p_Magick__ErrorImage,
  _swigc__p_Magick__ErrorMissingDelegate,
  _swigc__p_Magick__ErrorModule,
  _swigc__p_Magick__ErrorMonitor,
  _swigc__p_Magick__ErrorOption,
  _swigc__p_Magick__ErrorPolicy,
  _swigc__p_Magick__ErrorRegistry,
  _swigc__p_Magick__ErrorResourceLimit,
  _swigc__p_Magick__ErrorStream,
  _swigc__p_Magick__ErrorType,
  _swigc__p_Magick__ErrorUndefined,
  _swigc__p_Magick__ErrorXServer,
  _swigc__p_Magick__Exception,
  _swigc__p_Magick__Geometry,
  _swigc__p_Magick__Image,
  _swigc__p_Magick__ImageMoments,
  _swigc__p_Magick__ImagePerceptualHash,
  _swigc__p_Magick__ImageStatistics,
  _swigc__p_Magick__Montage,
  _swigc__p_Magick__MontageFramed,
  _swigc__p_Magick__Offset,
  _swigc__p_Magick__Options,
  _swigc__p_Magick__PathArcAbs,
  _swigc__p_Magick__PathArcArgs,
  _swigc__p_Magick__PathArcRel,
  _swigc__p_Magick__PathClosePath,
  _swigc__p_Magick__PathCurvetoAbs,
  _swigc__p_Magick__PathCurvetoArgs,
  _swigc__p_Magick__PathCurvetoRel,
  _swigc__p_Magick__PathLinetoAbs,
  _swigc__p_Magick__PathLinetoHorizontalAbs,
  _swigc__p_Magick__PathLinetoHorizontalRel,
  _swigc__p_Magick__PathLinetoRel,
  _swigc__p_Magick__PathLinetoVerticalAbs,
  _swigc__p_Magick__PathLinetoVerticalRel,
  _swigc__p_Magick__PathMovetoAbs,
  _swigc__p_Magick__PathMovetoRel,
  _swigc__p_Magick__PathQuadraticCurvetoAbs,
  _swigc__p_Magick__PathQuadraticCurvetoArgs,
  _swigc__p_Magick__PathQuadraticCurvetoRel,
  _swigc__p_Magick__PathSmoothCurvetoAbs,
  _swigc__p_Magick__PathSmoothCurvetoRel,
  _swigc__p_Magick__PathSmoothQuadraticCurvetoAbs,
  _swigc__p_Magick__PathSmoothQuadraticCurvetoRel,
  _swigc__p_Magick__Point,
  _swigc__p_Magick__ReadOptions,
  _swigc__p_Magick__ResourceLimits,
  _swigc__p_Magick__TypeMetric,
  _swigc__p_Magick__VPath,
  _swigc__p_Magick__VPathBase,
  _swigc__p_Magick__Warning,
  _swigc__p_Magick__WarningBlob,
  _swigc__p_Magick__WarningCache,
  _swigc__p_Magick__WarningCoder,
  _swigc__p_Magick__WarningConfigure,
  _swigc__p_Magick__WarningCorruptImage,
  _swigc__p_Magick__WarningDelegate,
  _swigc__p_Magick__WarningDraw,
  _swigc__p_Magick__WarningFileOpen,
  _swigc__p_Magick__WarningImage,
  _swigc__p_Magick__WarningMissingDelegate,
  _swigc__p_Magick__WarningModule,
  _swigc__p_Magick__WarningMonitor,
  _swigc__p_Magick__WarningOption,
  _swigc__p_Magick__WarningPolicy,
  _swigc__p_Magick__WarningRegistry,
  _swigc__p_Magick__WarningResourceLimit,
  _swigc__p_Magick__WarningStream,
  _swigc__p_Magick__WarningType,
  _swigc__p_Magick__WarningUndefined,
  _swigc__p_Magick__WarningXServer,
  _swigc__p_Magick__adaptiveBlurImage,
  _swigc__p_Magick__adaptiveThresholdImage,
  _swigc__p_Magick__addNoiseImage,
  _swigc__p_Magick__adjoinImage,
  _swigc__p_Magick__affineTransformImage,
  _swigc__p_Magick__alphaFlagImage,
  _swigc__p_Magick__alphaImage,
  _swigc__p_Magick__animationDelayImage,
  _swigc__p_Magick__animationIterationsImage,
  _swigc__p_Magick__annotateImage,
  _swigc__p_Magick__backgroundColorImage,
  _swigc__p_Magick__backgroundTextureImage,
  _swigc__p_Magick__blurImage,
  _swigc__p_Magick__borderColorImage,
  _swigc__p_Magick__borderImage,
  _swigc__p_Magick__boxColorImage,
  _swigc__p_Magick__cdlImage,
  _swigc__p_Magick__channelImage,
  _swigc__p_Magick__charcoalImage,
  _swigc__p_Magick__chopImage,
  _swigc__p_Magick__chromaBluePrimaryImage,
  _swigc__p_Magick__chromaGreenPrimaryImage,
  _swigc__p_Magick__chromaRedPrimaryImage,
  _swigc__p_Magick__chromaWhitePointImage,
  _swigc__p_Magick__colorFuzzImage,
  _swigc__p_Magick__colorMapImage,
  _swigc__p_Magick__colorMatrixImage,
  _swigc__p_Magick__colorSpaceImage,
  _swigc__p_Magick__colorizeImage,
  _swigc__p_Magick__commentImage,
  _swigc__p_Magick__composeImage,
  _swigc__p_Magick__compositeImage,
  _swigc__p_Magick__compressTypeImage,
  _swigc__p_Magick__contrastImage,
  _swigc__p_Magick__cropImage,
  _swigc__p_Magick__cycleColormapImage,
  _swigc__p_Magick__densityImage,
  _swigc__p_Magick__depthImage,
  _swigc__p_Magick__despeckleImage,
  _swigc__p_Magick__distortImage,
  _swigc__p_Magick__drawImage,
  _swigc__p_Magick__edgeImage,
  _swigc__p_Magick__embossImage,
  _swigc__p_Magick__endianImage,
  _swigc__p_Magick__enhanceImage,
  _swigc__p_Magick__equalizeImage,
  _swigc__p_Magick__fileNameImage,
  _swigc__p_Magick__fillColorImage,
  _swigc__p_Magick__filterTypeImage,
  _swigc__p_Magick__flipImage,
  _swigc__p_Magick__floodFillAlphaImage,
  _swigc__p_Magick__floodFillColorImage,
  _swigc__p_Magick__floodFillTextureImage,
  _swigc__p_Magick__flopImage,
  _swigc__p_Magick__fontImage,
  _swigc__p_Magick__fontPointsizeImage,
  _swigc__p_Magick__frameImage,
  _swigc__p_Magick__gammaImage,
  _swigc__p_Magick__gaussianBlurImage,
  _swigc__p_Magick__gifDisposeMethodImage,
  _swigc__p_Magick__haldClutImage,
  _swigc__p_Magick__implodeImage,
  _swigc__p_Magick__interlaceTypeImage,
  _swigc__p_Magick__inverseFourierTransformImage,
  _swigc__p_Magick__isValidImage,
  _swigc__p_Magick__labelImage,
  _swigc__p_Magick__levelImage,
  _swigc__p_Magick__magickImage,
  _swigc__p_Magick__magnifyImage,
  _swigc__p_Magick__mapImage,
  _swigc__p_Magick__matteColorImage,
  _swigc__p_Magick__medianConvolveImage,
  _swigc__p_Magick__minifyImage,
  _swigc__p_Magick__modulateImage,
  _swigc__p_Magick__monochromeImage,
  _swigc__p_Magick__negateImage,
  _swigc__p_Magick__normalizeImage,
  _swigc__p_Magick__oilPaintImage,
  _swigc__p_Magick__opaqueImage,
  _swigc__p_Magick__pageImage,
  _swigc__p_Magick__pixelColorImage,
  _swigc__p_Magick__qualityImage,
  _swigc__p_Magick__quantizeColorSpaceImage,
  _swigc__p_Magick__quantizeColorsImage,
  _swigc__p_Magick__quantizeDitherImage,
  _swigc__p_Magick__quantizeImage,
  _swigc__p_Magick__quantizeTreeDepthImage,
  _swigc__p_Magick__raiseImage,
  _swigc__p_Magick__reduceNoiseImage,
  _swigc__p_Magick__renderingIntentImage,
  _swigc__p_Magick__resizeImage,
  _swigc__p_Magick__resolutionUnitsImage,
  _swigc__p_Magick__rollImage,
  _swigc__p_Magick__rotateImage,
  _swigc__p_Magick__sampleImage,
  _swigc__p_Magick__scaleImage,
  _swigc__p_Magick__sceneImage,
  _swigc__p_Magick__segmentImage,
  _swigc__p_Magick__shadeImage,
  _swigc__p_Magick__shadowImage,
  _swigc__p_Magick__sharpenImage,
  _swigc__p_Magick__shaveImage,
  _swigc__p_Magick__shearImage,
  _swigc__p_Magick__sizeImage,
  _swigc__p_Magick__solarizeImage,
  _swigc__p_Magick__spliceImage,
  _swigc__p_Magick__spreadImage,
  _swigc__p_Magick__steganoImage,
  _swigc__p_Magick__stereoImage,
  _swigc__p_Magick__stripImage,
  _swigc__p_Magick__strokeColorImage,
  _swigc__p_Magick__subImageImage,
  _swigc__p_Magick__subRangeImage,
  _swigc__p_Magick__swirlImage,
  _swigc__p_Magick__textAntiAliasImage,
  _swigc__p_Magick__textureImage,
  _swigc__p_Magick__thresholdImage,
  _swigc__p_Magick__transparentImage,
  _swigc__p_Magick__trimImage,
  _swigc__p_Magick__typeImage,
  _swigc__p_Magick__verboseImage,
  _swigc__p_Magick__waveImage,
  _swigc__p_Magick__x11DisplayImage,
  _swigc__p_Magick__zoomImage,
  _swigc__p__DrawingWand,
  _swigc__p__PolicyInfo,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_long_long,
  _swigc__p_p_MagickCore___Image,
  _swigc__p_p_char,
  _swigc__p_p_void,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_std__exception,
  _swigc__p_std__vectorT_Magick__CoderInfo_t,
  _swigc__p_std__vectorT_Magick__Coordinate_t,
  _swigc__p_std__vectorT_Magick__Drawable_t,
  _swigc__p_std__vectorT_Magick__PathArcArgs_t,
  _swigc__p_std__vectorT_Magick__PathCurvetoArgs_t,
  _swigc__p_std__vectorT_Magick__PathQuadraticCurvetoArgs_t,
  _swigc__p_std__vectorT_Magick__VPath_t,
  _swigc__p_uintptr_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_value_type,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

SWIGINTERN swig_type_info *swig_types[366];
SWIGINTERN swig_module_info swig_module = {swig_types, 365, 0, 0, 0, 0};

