/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG JSE (https://www.swig.org).
 * Version 5.0.3
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#include "swig/magickwand-js.h"

/* -----------------------------------------------------------------------------
 * swigrun_body.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* ---------------------------------------------------------------------------
 * SWIG Node-API runtime : code
 * ---------------------------------------------------------------------------*/

#define SWIG_NAPI_PACKEDOBJECT 0x8000

SWIGRUNTIME Napi::Error SWIG_NAPI_NewError(Napi::Env env, int type, const char *msg) {
  switch(type) {
    default:
    case SWIG_IOError:
    case SWIG_MemoryError:
    case SWIG_SystemError:
    case SWIG_RuntimeError:
    case SWIG_DivisionByZero:
    case SWIG_SyntaxError:
      return Napi::Error::New(env, msg);
    case SWIG_OverflowError:
    case SWIG_IndexError:
      return Napi::RangeError::New(env, msg);
    case SWIG_ValueError:
    case SWIG_TypeError:
      return Napi::TypeError::New(env, msg);
  }
}

SWIGRUNTIME inline Napi::Error SWIG_NAPI_NewError(Napi::Env env, const char *msg) {
  return SWIG_NAPI_NewError(env, SWIG_RuntimeError, msg);
}

SWIGRUNTIME inline Napi::Error SWIG_NAPI_NewError(Napi::Env env, Napi::Value obj, const char *msg, swig_type_info *info) {
  return Napi::Error(env, obj);
}

#ifdef NAPI_CPP_EXCEPTIONS

SWIGRUNTIME void SWIG_NAPI_Raise(Napi::Env env, const char *msg) {
  SWIG_NAPI_ASSERT_NOTNULL_ENV;
  throw Napi::Error::New(env, msg);
}

SWIGRUNTIME void SWIG_NAPI_Raise(Napi::Env env, int type, const char *msg) {
  SWIG_NAPI_ASSERT_NOTNULL_ENV;
  switch(type) {
    default:
    case SWIG_IOError:
    case SWIG_MemoryError:
    case SWIG_SystemError:
    case SWIG_RuntimeError:
    case SWIG_DivisionByZero:
    case SWIG_SyntaxError:
      throw Napi::Error::New(env, msg);
    case SWIG_OverflowError:
    case SWIG_IndexError:
      throw Napi::RangeError::New(env, msg);
    case SWIG_ValueError:
    case SWIG_TypeError:
      throw Napi::TypeError::New(env, msg);
  }
}

SWIGRUNTIME void SWIG_NAPI_Raise(Napi::Env env, Napi::Value obj,
        const char *msg, swig_type_info *info) {
  SWIG_NAPI_ASSERT_NOTNULL_ENV;
  throw Napi::Error(env, obj);
}

#else // NAPI_CPP_EXCEPTIONS

SWIGRUNTIME inline void SWIG_NAPI_Raise(Napi::Env env, int type, const char *msg) {
  SWIG_NAPI_NewError(env, type, msg).ThrowAsJavaScriptException();
}

SWIGRUNTIME inline void SWIG_NAPI_Raise(Napi::Env env, const char *msg) {
  SWIG_NAPI_Raise(env, SWIG_RuntimeError, msg);
}

SWIGRUNTIME inline void SWIG_NAPI_Raise(Napi::Env env, Napi::Value obj,
        const char *msg, swig_type_info *info) {
  SWIG_NAPI_NewError(env, obj, msg, info).ThrowAsJavaScriptException();
}

#endif // NAPI_CPP_EXCEPTIONS

void JS_veto_set_variable(const Napi::CallbackInfo &info) {
  SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

SWIG_Guard::SWIG_Guard(SWIG_Locks_List &_list) : list(_list), locked(false) {}
SWIG_Guard::~SWIG_Guard() {
  if (locked) {
    for (auto const &lock : list) {
      lock.second.second();
    }
  }
}


void SWIG_NAPI_ObjectWrap_inst::GetMembers(
        Napi::Env env,
        std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &members,
        std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &
) {
  members.erase("toString");
  members.insert({"toString", SWIG_NAPI_ObjectWrap_templ::InstanceMethod("toString", &SWIG_NAPI_ObjectWrap_templ::ToString)});
}

Napi::Function SWIG_NAPI_ObjectWrap_inst::GetClass(Napi::Env env) {
  return Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::DefineClass(env, "SwigObject", {});
}

SWIG_NAPI_ObjectWrap_inst::~SWIG_NAPI_ObjectWrap_inst() {
  if (this->owned) {
    if (this->info) {
      fprintf(stderr, "Warning, SWIG cannot delete an object of type %s, "
                      "it does not have a destructor. This is a memory leak.\n",
                      this->info->name);
    } else {
      fprintf(stderr, "Warning, SWIG must delete an object and does not know "
                      "its type. This is a memory leak\n");
    }
  }
}

Napi::Function SWIG_NAPI_PackedObjectWrap_inst::GetClass(Napi::Env env) {
  return Napi::ObjectWrap<SWIG_NAPI_PackedObjectWrap_inst>::DefineClass(env, "SwigPackedObject", {});
}

SWIG_NAPI_PackedObjectWrap_inst::~SWIG_NAPI_PackedObjectWrap_inst() {
  this->SWIG_Finalize();
  if (this->owned) {
    delete[] static_cast<uint8_t *>(this->self);
    this->self = SWIG_NULLPTR;
    this->owned = false;
  }
}

SWIGRUNTIME bool SWIG_NAPI_IsWrappedObject(Napi::Env env, Napi::Object v) {
  SWIG_NAPI_ASSERT_NOTNULL_ENV;
  // Check if this is a SWIG wrapper
  Napi::FunctionReference *ctor = env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor;
  bool instanceOf;
  NAPI_CHECK_RESULT(v.InstanceOf(ctor->Value()), instanceOf);
  return instanceOf;
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return false;
#endif
}

SWIGRUNTIME int SWIG_NAPI_ConvertInstancePtr(Napi::Object objRef, void **ptr, swig_type_info *info, int flags) {
  SWIG_NAPI_ObjectWrap_inst *ow;
  Napi::Env env = objRef.Env();
  if(!objRef.IsObject()) return SWIG_ERROR;

  if (!SWIG_NAPI_IsWrappedObject(env, objRef)) {
    return SWIG_TypeError;
  }

  ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(objRef);

  // Now check if the SWIG type is compatible unless the types match exactly or the type is unknown
  if(info && ow->info != info && ow->info != SWIG_NULLPTR) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(ow->info, info);
    if (!tc && ow->info->name) {
      tc = SWIG_TypeCheck(ow->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
    int newmemory = 0;
    *ptr = SWIG_TypeCast(tc, ow->self, &newmemory);
    assert(!newmemory); /* newmemory handling not yet implemented */
  } else {
    *ptr = ow->self;
  }

  if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && (!ow->owned || ow->finalizer)) {
    return SWIG_ERROR_RELEASE_NOT_OWNED;
  } else {
    if (flags & SWIG_POINTER_DISOWN) {
      ow->owned = false;
    }
    if (flags & SWIG_POINTER_CLEAR) {
      ow->self = SWIG_NULLPTR;
    }
  }
  return SWIG_OK;
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return SWIG_ERROR;
#endif
}


SWIGRUNTIME int SWIG_NAPI_GetInstancePtr(Napi::Value valRef, void **ptr) {
  SWIG_NAPI_ObjectWrap_inst *ow;
  if(!valRef.IsObject()) {
    return SWIG_TypeError;
  }
  Napi::Object objRef;
  NAPI_CHECK_RESULT(valRef.ToObject(), objRef);
  ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(objRef);

  if(ow->self == SWIG_NULLPTR) {
    return SWIG_ERROR;
  }

  *ptr = ow->self;
  return SWIG_OK;
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return SWIG_ERROR;
#endif
}


SWIGRUNTIME int SWIG_NAPI_ConvertPtr(Napi::Value valRef, void **ptr, swig_type_info *info, int flags) {
  // special case: JavaScript null => C NULL pointer
  if (valRef.IsNull()) {
    if ((flags & SWIG_POINTER_NO_NULL) == SWIG_POINTER_NO_NULL) {
      return SWIG_NullReferenceError;
    }
    *ptr=0;
    return SWIG_OK;
  }

  if (!valRef.IsObject()) {
    return SWIG_TypeError;
  }

  Napi::Object objRef;
  NAPI_CHECK_RESULT(valRef.ToObject(), objRef);
  return SWIG_NAPI_ConvertInstancePtr(objRef, ptr, info, flags);
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return SWIG_ERROR;
#endif
}

SWIGRUNTIME Napi::Value SWIG_NAPI_NewPointerObj(Napi::Env env, void *ptr, swig_type_info *info, int flags) {
  SWIG_NAPI_ASSERT_NOTNULL_ENV;
  Napi::External<void> native;
  Napi::FunctionReference *ctor;

  if (ptr == SWIG_NULLPTR) {
    return env.Null();
  }
  native = Napi::External<void>::New(env, ptr);

  size_t *idx = info != SWIG_NULLPTR ?
        reinterpret_cast<SWIG_NAPI_ClientData *>(info->clientdata) :
        SWIG_NULLPTR;
  if ((flags & SWIG_NAPI_PACKEDOBJECT) == SWIG_NAPI_PACKEDOBJECT) {
    ctor = env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_PackedObjectWrapCtor;
  } else if (idx == SWIG_NULLPTR) {
    // This type does not have a dedicated wrapper
    ctor = env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor;
  } else {
    ctor = env.GetInstanceData<EnvInstanceData>()->ctor[*idx];
  }

  Napi::Value wrapped;
  NAPI_CHECK_RESULT(ctor->New({native}), wrapped);

  // Preserve the type even if using the generic wrapper
  if (idx == SWIG_NULLPTR && info != SWIG_NULLPTR) {
    Napi::Object obj;
    NAPI_CHECK_RESULT(wrapped.ToObject(), obj);
    Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->info = info;
  }

  if ((flags & SWIG_POINTER_OWN) == SWIG_POINTER_OWN) {
    Napi::Object obj;
    NAPI_CHECK_RESULT(wrapped.ToObject(), obj);
    Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->owned = true;
  }

  return wrapped;
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return Napi::Value();
#endif
}

SWIGRUNTIME int SWIG_NAPI_SetFinalizer(Napi::Env env, Napi::Value val, SWIG_NAPI_Finalizer *finalizer) {
  Napi::Object obj;
  SWIG_NAPI_ObjectWrap_inst *unwrapped;
  NAPI_CHECK_RESULT(val.ToObject(), obj);
  if (!SWIG_NAPI_IsWrappedObject(env, obj)) {
    return SWIG_TypeError;
  }
  unwrapped = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj);
  unwrapped->finalizer = finalizer;
  return SWIG_OK;
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return SWIG_ERROR;
#endif
}

SWIGRUNTIME void SWIG_NAPI_SetInstanceData(Napi::Env env, void *module_instance_data) {
  env.GetInstanceData<EnvInstanceData>()->module_instance_data = module_instance_data;
}
SWIGRUNTIME void *SWIG_NAPI_GetInstanceData(Napi::Env env) {
  return env.GetInstanceData<EnvInstanceData>()->module_instance_data;
}

SWIGRUNTIME Napi::Value _SWIG_NAPI_wrap_equals(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(info.Length() != 1) SWIG_Error(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(info.This(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_Error(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(info[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_Error(SWIG_ArgError(res2), " in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult = Napi::Boolean::New(env, result);

  return jsresult;
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return Napi::Value();
#endif
}

SWIGRUNTIME Napi::Value _wrap_getCPtr(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(info.This(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_Error(SWIG_ArgError(res1), " in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = Napi::Number::New(env, result);

  return jsresult;
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return Napi::Value();
#endif
}

/* ---------------------------------------------------------------------------
 * PackedData object
 * (objects visible to JS that do not have a dedicated wrapper but must preserve type)
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME
Napi::Value SWIG_NAPI_NewPackedObj(Napi::Env env, void *data, size_t size, swig_type_info *type) {
  void *data_copy = new uint8_t[size];
  memcpy(data_copy, data, size);
  Napi::Value val = SWIG_NAPI_NewPointerObj(env, data_copy, type, SWIG_POINTER_OWN | SWIG_NAPI_PACKEDOBJECT);
  Napi::Object obj;
  if (val.IsEmpty()) goto fail;

  NAPI_CHECK_RESULT(val.ToObject(), obj);
  Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->size = size;

fail:
  return val;
}

SWIGRUNTIME
int SWIG_NAPI_ConvertPacked(Napi::Value valRef, void *ptr, size_t size, swig_type_info *type) {
  void *tmp;
  if (!SWIG_IsOK(SWIG_NAPI_ConvertPtr(valRef, &tmp, type, 0))) {
    return SWIG_ERROR;
  }
  memcpy(ptr, tmp, size);
  return SWIG_OK;
}


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME
Napi::Value SWIG_NAPI_AppendOutput(Napi::Env env, Napi::Value result, Napi::Value obj) {
  if (result.IsUndefined()) {
    result = Napi::Array::New(env);
  } else if (!result.IsArray()) {
    Napi::Array tmparr = Napi::Array::New(env);
    tmparr.Set(static_cast<uint32_t>(0), result);
    result = tmparr;
  }

  Napi::Array arr = result.As<Napi::Array>();
  arr.Set(arr.Length(), obj);
  return arr;
}


// js_global_getter
Napi::Value exports_NAPI_VERSION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(6));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickCoreSignature_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(0xabacadabUL));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickPathExtent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(4096));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickTimeExtent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(26));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickEpsilon_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_double  SWIG_NAPI_FROM_CALL_ARGS(static_cast< double >(1.0e-12));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickMaximumValue_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_double  SWIG_NAPI_FROM_CALL_ARGS(static_cast< double >(1.79769313486231570E+308));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickMinimumValue_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_double  SWIG_NAPI_FROM_CALL_ARGS(static_cast< double >(2.22507385850720140E-308));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickOffsetFormat_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"lld");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickSizeFormat_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"llu");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedClass_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedClass));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DirectClass_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DirectClass));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PseudoClass_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PseudoClass));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MagickFalse_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MagickFalse));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MagickTrue_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MagickTrue));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ForgetGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ForgetGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NorthWestGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NorthWestGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NorthGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NorthGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NorthEastGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NorthEastGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WestGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WestGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CenterGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CenterGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_EastGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::EastGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SouthWestGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SouthWestGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SouthGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SouthGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SouthEastGravity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SouthEastGravity));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CMYColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CMYColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CMYKColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CMYKColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GRAYColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GRAYColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HCLColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HCLColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HCLpColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HCLpColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HSBColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HSBColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HSIColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HSIColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HSLColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HSLColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HSVColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HSVColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HWBColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HWBColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LabColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LabColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LCHColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LCHColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LCHabColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LCHabColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LCHuvColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LCHuvColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LogColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LogColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LMSColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LMSColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LuvColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LuvColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OHTAColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OHTAColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_Rec601YCbCrColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::Rec601YCbCrColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_Rec709YCbCrColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::Rec709YCbCrColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RGBColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RGBColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_scRGBColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::scRGBColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_sRGBColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::sRGBColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TransparentColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TransparentColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_xyYColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::xyYColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_XYZColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::XYZColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_YCbCrColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::YCbCrColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_YCCColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::YCCColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_YDbDrColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::YDbDrColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_YIQColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::YIQColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_YPbPrColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::YPbPrColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_YUVColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::YUVColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LinearGRAYColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LinearGRAYColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_JzazbzColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::JzazbzColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DisplayP3Colorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DisplayP3Colorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_Adobe98Colorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::Adobe98Colorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ProPhotoColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ProPhotoColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OklabColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OklabColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OklchColorspace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OklchColorspace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RedChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RedChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GrayChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GrayChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CyanChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CyanChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GreenChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GreenChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MagentaChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MagentaChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_aChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::aChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlueChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlueChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_bChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::bChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_YellowChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::YellowChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlackChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlackChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AlphaChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AlphaChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OpacityChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OpacityChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_IndexChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::IndexChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ReadMaskChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ReadMaskChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WriteMaskChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WriteMaskChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MetaChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MetaChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CompositeMaskChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CompositeMaskChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CompositeChannels_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CompositeChannels));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AllChannels_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AllChannels));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TrueAlphaChannel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TrueAlphaChannel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RGBChannels_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RGBChannels));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GrayChannels_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GrayChannels));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SyncChannels_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SyncChannels));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DefaultChannels_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DefaultChannels));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedPixel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedPixel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CharPixel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CharPixel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DoublePixel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DoublePixel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FloatPixel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FloatPixel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LongPixel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LongPixel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LongLongPixel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LongLongPixel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_QuantumPixel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::QuantumPixel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ShortPixel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ShortPixel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickMaxBufferExtent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(81920));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickMinBufferExtent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(16384));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedException_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedException));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WarningException_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WarningException));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ResourceLimitWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ResourceLimitWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TypeWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TypeWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OptionWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OptionWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DelegateWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DelegateWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MissingDelegateWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MissingDelegateWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CorruptImageWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CorruptImageWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FileOpenWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FileOpenWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlobWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlobWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StreamWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StreamWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CacheWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CacheWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CoderWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CoderWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FilterWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FilterWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ModuleWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ModuleWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DrawWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DrawWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImageWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImageWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WandWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WandWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RandomWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RandomWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_XServerWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::XServerWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MonitorWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MonitorWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RegistryWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RegistryWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ConfigureWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ConfigureWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PolicyWarning_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PolicyWarning));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ErrorException_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ErrorException));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ResourceLimitError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ResourceLimitError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TypeError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TypeError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OptionError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OptionError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DelegateError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DelegateError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MissingDelegateError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MissingDelegateError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CorruptImageError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CorruptImageError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FileOpenError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FileOpenError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlobError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlobError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StreamError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StreamError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CacheError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CacheError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CoderError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CoderError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FilterError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FilterError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ModuleError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ModuleError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DrawError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DrawError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImageError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImageError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WandError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WandError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RandomError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RandomError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_XServerError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::XServerError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MonitorError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MonitorError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RegistryError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RegistryError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ConfigureError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ConfigureError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PolicyError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PolicyError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FatalErrorException_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FatalErrorException));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ResourceLimitFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ResourceLimitFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TypeFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TypeFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OptionFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OptionFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DelegateFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DelegateFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MissingDelegateFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MissingDelegateFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CorruptImageFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CorruptImageFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FileOpenFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FileOpenFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlobFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlobFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StreamFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StreamFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CacheFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CacheFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CoderFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CoderFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FilterFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FilterFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ModuleFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ModuleFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DrawFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DrawFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImageFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImageFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WandFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WandFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RandomFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RandomFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_XServerFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::XServerFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MonitorFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MonitorFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RegistryFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RegistryFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ConfigureFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ConfigureFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PolicyFatalError_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PolicyFatalError));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedCompliance_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedCompliance));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NoCompliance_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NoCompliance));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CSSCompliance_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CSSCompliance));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SVGCompliance_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SVGCompliance));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_X11Compliance_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::X11Compliance));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_XPMCompliance_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::XPMCompliance));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MVGCompliance_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MVGCompliance));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AllCompliance_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AllCompliance));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedIlluminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedIlluminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AIlluminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AIlluminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BIlluminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BIlluminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CIlluminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CIlluminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_D50Illuminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::D50Illuminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_D55Illuminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::D55Illuminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_D65Illuminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::D65Illuminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_D75Illuminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::D75Illuminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_EIlluminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::EIlluminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_F2Illuminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::F2Illuminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_F7Illuminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::F7Illuminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_F11Illuminant_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::F11Illuminant));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AlphaCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AlphaCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AtopCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AtopCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlendCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlendCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlurCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlurCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BumpmapCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BumpmapCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ChangeMaskCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ChangeMaskCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ClearCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ClearCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ColorBurnCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ColorBurnCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ColorDodgeCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ColorDodgeCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ColorizeCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ColorizeCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CopyBlackCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CopyBlackCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CopyBlueCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CopyBlueCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CopyCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CopyCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CopyCyanCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CopyCyanCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CopyGreenCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CopyGreenCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CopyMagentaCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CopyMagentaCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CopyAlphaCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CopyAlphaCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CopyRedCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CopyRedCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CopyYellowCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CopyYellowCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DarkenCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DarkenCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DarkenIntensityCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DarkenIntensityCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DifferenceCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DifferenceCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DisplaceCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DisplaceCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DissolveCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DissolveCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DistortCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DistortCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DivideDstCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DivideDstCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DivideSrcCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DivideSrcCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DstAtopCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DstAtopCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DstCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DstCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DstInCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DstInCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DstOutCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DstOutCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DstOverCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DstOverCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ExclusionCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ExclusionCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HardLightCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HardLightCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HardMixCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HardMixCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HueCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HueCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_InCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::InCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_IntensityCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::IntensityCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LightenCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LightenCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LightenIntensityCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LightenIntensityCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LinearBurnCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LinearBurnCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LinearDodgeCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LinearDodgeCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LinearLightCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LinearLightCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LuminizeCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LuminizeCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MathematicsCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MathematicsCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MinusDstCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MinusDstCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MinusSrcCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MinusSrcCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ModulateCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ModulateCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ModulusAddCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ModulusAddCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ModulusSubtractCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ModulusSubtractCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MultiplyCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MultiplyCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NoCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NoCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OutCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OutCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OverCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OverCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OverlayCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OverlayCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PegtopLightCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PegtopLightCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PinLightCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PinLightCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PlusCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PlusCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ReplaceCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ReplaceCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SaturateCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SaturateCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ScreenCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ScreenCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SoftLightCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SoftLightCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SrcAtopCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SrcAtopCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SrcCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SrcCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SrcInCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SrcInCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SrcOutCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SrcOutCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SrcOverCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SrcOverCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ThresholdCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ThresholdCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_VividLightCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::VividLightCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_XorCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::XorCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StereoCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StereoCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FreezeCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FreezeCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_InterpolateCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::InterpolateCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NegateCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NegateCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ReflectCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ReflectCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SoftBurnCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SoftBurnCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SoftDodgeCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SoftDodgeCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StampCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StampCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RMSECompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RMSECompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SaliencyBlendCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SaliencyBlendCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SeamlessBlendCompositeOp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SeamlessBlendCompositeOp));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_B44ACompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::B44ACompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_B44Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::B44Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BZipCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BZipCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DXT1Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DXT1Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DXT3Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DXT3Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DXT5Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DXT5Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FaxCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FaxCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_Group4Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::Group4Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_JBIG1Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::JBIG1Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_JBIG2Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::JBIG2Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_JPEG2000Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::JPEG2000Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_JPEGCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::JPEGCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LosslessJPEGCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LosslessJPEGCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LZMACompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LZMACompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LZWCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LZWCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NoCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NoCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PizCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PizCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_Pxr24Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::Pxr24Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RLECompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RLECompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ZipCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ZipCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ZipSCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ZipSCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ZstdCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ZstdCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WebPCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WebPCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DWAACompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DWAACompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DWABCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DWABCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BC7Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BC7Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BC5Compression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BC5Compression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LERCCompression_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LERCCompression));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UnityKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UnityKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GaussianKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GaussianKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DoGKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DoGKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LoGKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LoGKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlurKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlurKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CometKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CometKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BinomialKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BinomialKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LaplacianKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LaplacianKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SobelKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SobelKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FreiChenKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FreiChenKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RobertsKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RobertsKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PrewittKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PrewittKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CompassKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CompassKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_KirschKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::KirschKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DiamondKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DiamondKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SquareKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SquareKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RectangleKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RectangleKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OctagonKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OctagonKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DiskKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DiskKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PlusKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PlusKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CrossKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CrossKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RingKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RingKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PeaksKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PeaksKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_EdgesKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::EdgesKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CornersKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CornersKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DiagonalsKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DiagonalsKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LineEndsKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LineEndsKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LineJunctionsKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LineJunctionsKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RidgesKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RidgesKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ConvexHullKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ConvexHullKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ThinSEKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ThinSEKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SkeletonKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SkeletonKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ChebyshevKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ChebyshevKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ManhattanKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ManhattanKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OctagonalKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OctagonalKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_EuclideanKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::EuclideanKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UserDefinedKernel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UserDefinedKernel));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RotatePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RotatePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ShearPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ShearPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RollPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RollPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HuePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HuePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SaturationPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SaturationPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BrightnessPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BrightnessPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GammaPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GammaPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SpiffPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SpiffPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DullPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DullPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GrayscalePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GrayscalePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_QuantizePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::QuantizePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DespecklePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DespecklePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ReduceNoisePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ReduceNoisePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AddNoisePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AddNoisePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SharpenPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SharpenPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlurPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlurPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ThresholdPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ThresholdPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_EdgeDetectPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::EdgeDetectPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SpreadPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SpreadPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SolarizePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SolarizePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ShadePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ShadePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RaisePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RaisePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SegmentPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SegmentPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SwirlPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SwirlPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImplodePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImplodePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WavePreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WavePreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OilPaintPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OilPaintPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CharcoalDrawingPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CharcoalDrawingPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_JPEGPreview_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::JPEGPreview));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UnrecognizedDispose_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UnrecognizedDispose));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedDispose_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedDispose));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NoneDispose_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NoneDispose));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BackgroundDispose_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BackgroundDispose));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PreviousDispose_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PreviousDispose));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedEndian_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedEndian));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LSBEndian_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LSBEndian));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MSBEndian_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MSBEndian));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedQuantumAlpha_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedQuantumAlpha));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AssociatedQuantumAlpha_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AssociatedQuantumAlpha));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DisassociatedQuantumAlpha_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DisassociatedQuantumAlpha));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedQuantumFormat_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedQuantumFormat));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FloatingPointQuantumFormat_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FloatingPointQuantumFormat));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SignedQuantumFormat_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SignedQuantumFormat));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UnsignedQuantumFormat_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UnsignedQuantumFormat));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AlphaQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AlphaQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BGRAQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BGRAQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BGROQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BGROQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BGRQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BGRQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlackQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlackQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlueQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlueQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CbYCrAQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CbYCrAQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CbYCrQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CbYCrQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CbYCrYQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CbYCrYQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CMYKAQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CMYKAQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CMYKOQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CMYKOQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CMYKQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CMYKQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CyanQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CyanQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GrayAlphaQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GrayAlphaQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GrayQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GrayQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GreenQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GreenQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_IndexAlphaQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::IndexAlphaQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_IndexQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::IndexQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MagentaQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MagentaQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OpacityQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OpacityQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RedQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RedQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RGBAQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RGBAQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RGBOQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RGBOQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RGBPadQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RGBPadQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RGBQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RGBQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_YellowQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::YellowQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MultispectralQuantum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MultispectralQuantum));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PointFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PointFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BoxFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BoxFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TriangleFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TriangleFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HermiteFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HermiteFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HannFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HannFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HammingFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HammingFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlackmanFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlackmanFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GaussianFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GaussianFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_QuadraticFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::QuadraticFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CubicFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CubicFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CatromFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CatromFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MitchellFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MitchellFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_JincFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::JincFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SincFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SincFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SincFastFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SincFastFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_KaiserFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::KaiserFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WelchFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WelchFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ParzenFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ParzenFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BohmanFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BohmanFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BartlettFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BartlettFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LagrangeFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LagrangeFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LanczosFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LanczosFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LanczosSharpFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LanczosSharpFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_Lanczos2Filter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::Lanczos2Filter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_Lanczos2SharpFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::Lanczos2SharpFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RobidouxFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RobidouxFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RobidouxSharpFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RobidouxSharpFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CosineFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CosineFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SplineFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SplineFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LanczosRadiusFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LanczosRadiusFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CubicSplineFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CubicSplineFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SentinelFilter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SentinelFilter));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BilevelType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BilevelType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GrayscaleType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GrayscaleType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GrayscaleAlphaType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GrayscaleAlphaType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PaletteType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PaletteType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PaletteAlphaType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PaletteAlphaType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TrueColorType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TrueColorType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TrueColorAlphaType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TrueColorAlphaType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ColorSeparationType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ColorSeparationType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ColorSeparationAlphaType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ColorSeparationAlphaType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OptimizeType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OptimizeType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PaletteBilevelAlphaType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PaletteBilevelAlphaType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedInterlace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedInterlace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NoInterlace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NoInterlace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LineInterlace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LineInterlace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PlaneInterlace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PlaneInterlace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PartitionInterlace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PartitionInterlace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GIFInterlace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GIFInterlace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_JPEGInterlace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::JPEGInterlace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PNGInterlace_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PNGInterlace));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedOrientation_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedOrientation));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TopLeftOrientation_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TopLeftOrientation));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TopRightOrientation_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TopRightOrientation));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BottomRightOrientation_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BottomRightOrientation));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BottomLeftOrientation_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BottomLeftOrientation));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LeftTopOrientation_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LeftTopOrientation));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RightTopOrientation_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RightTopOrientation));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RightBottomOrientation_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RightBottomOrientation));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LeftBottomOrientation_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LeftBottomOrientation));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedResolution_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedResolution));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PixelsPerInchResolution_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PixelsPerInchResolution));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PixelsPerCentimeterResolution_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PixelsPerCentimeterResolution));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedTransmitType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedTransmitType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FileTransmitType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FileTransmitType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlobTransmitType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlobTransmitType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StreamTransmitType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StreamTransmitType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImageTransmitType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImageTransmitType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NormalStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NormalStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UltraCondensedStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UltraCondensedStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ExtraCondensedStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ExtraCondensedStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CondensedStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CondensedStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SemiCondensedStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SemiCondensedStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SemiExpandedStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SemiExpandedStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ExpandedStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ExpandedStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ExtraExpandedStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ExtraExpandedStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UltraExpandedStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UltraExpandedStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AnyStretch_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AnyStretch));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedStyle_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedStyle));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NormalStyle_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NormalStyle));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ItalicStyle_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ItalicStyle));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ObliqueStyle_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ObliqueStyle));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AnyStyle_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AnyStyle));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BoldStyle_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BoldStyle));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedAlign_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedAlign));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LeftAlign_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LeftAlign));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CenterAlign_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CenterAlign));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RightAlign_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RightAlign));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedDecoration_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedDecoration));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NoDecoration_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NoDecoration));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UnderlineDecoration_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UnderlineDecoration));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OverlineDecoration_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OverlineDecoration));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LineThroughDecoration_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LineThroughDecoration));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedDirection_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedDirection));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RightToLeftDirection_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RightToLeftDirection));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LeftToRightDirection_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LeftToRightDirection));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TopToBottomDirection_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TopToBottomDirection));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedGradient_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedGradient));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LinearGradient_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LinearGradient));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RadialGradient_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RadialGradient));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedPrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedPrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AlphaPrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AlphaPrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ArcPrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ArcPrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BezierPrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BezierPrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CirclePrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CirclePrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ColorPrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ColorPrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_EllipsePrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::EllipsePrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImagePrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImagePrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LinePrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LinePrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PathPrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PathPrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PointPrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PointPrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PolygonPrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PolygonPrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PolylinePrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PolylinePrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RectanglePrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RectanglePrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RoundRectanglePrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RoundRectanglePrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TextPrimitive_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TextPrimitive));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedReference_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedReference));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GradientReference_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GradientReference));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedWordBreakType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedWordBreakType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NormalWordBreakType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NormalWordBreakType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BreakWordBreakType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BreakWordBreakType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedCache_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedCache));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DiskCache_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DiskCache));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DistributedCache_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DistributedCache));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MapCache_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MapCache));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MemoryCache_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MemoryCache));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PingCache_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PingCache));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AbsoluteErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AbsoluteErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FuzzErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FuzzErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MeanAbsoluteErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MeanAbsoluteErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MeanErrorPerPixelErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MeanErrorPerPixelErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MeanSquaredErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MeanSquaredErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NormalizedCrossCorrelationErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NormalizedCrossCorrelationErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PeakAbsoluteErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PeakAbsoluteErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PeakSignalToNoiseRatioErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PeakSignalToNoiseRatioErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PerceptualHashErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PerceptualHashErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RootMeanSquaredErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RootMeanSquaredErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StructuralSimilarityErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StructuralSimilarityErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StructuralDissimilarityErrorMetric_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StructuralDissimilarityErrorMetric));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedFormatType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedFormatType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImplicitFormatType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImplicitFormatType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ExplicitFormatType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ExplicitFormatType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedComplexOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedComplexOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AddComplexOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AddComplexOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ConjugateComplexOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ConjugateComplexOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DivideComplexOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DivideComplexOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MagnitudePhaseComplexOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MagnitudePhaseComplexOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MultiplyComplexOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MultiplyComplexOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RealImaginaryComplexOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RealImaginaryComplexOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SubtractComplexOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SubtractComplexOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickLogFilename_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"log.xml");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedEvents_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedEvents));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NoEvents_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NoEvents));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AccelerateEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AccelerateEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AnnotateEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AnnotateEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BlobEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BlobEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CacheEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CacheEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CoderEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CoderEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ConfigureEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ConfigureEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DeprecateEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DeprecateEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DrawEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DrawEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ExceptionEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ExceptionEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImageEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImageEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LocaleEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LocaleEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ModuleEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ModuleEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PixelEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PixelEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PolicyEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PolicyEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ResourceEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ResourceEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TraceEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TraceEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TransformEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TransformEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UserEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UserEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WandEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WandEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_X11Event_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::X11Event));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CommandEvent_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CommandEvent));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AllEvents_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AllEvents));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickPackageName_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"ImageMagick");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickCopyright_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"(C) 1999 ImageMagick Studio LLC");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickLibVersion_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x711));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickLibVersionText_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"7.1.1");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickLibAddendum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"-30");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickLibInterface_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(10));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickLibMinInterface_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(10));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickPlatform_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"x86_64");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickppLibVersionText_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"7.1.1");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickppLibAddendum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"-30");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickppLibInterface_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(5));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickppLibMinInterface_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(5));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickGitRevision_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"babe7ad2f:20240407");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickReleaseDate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"2024-04-07");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickAuthoritativeLicense_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"https://imagemagick.org/script/license.php");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickAuthoritativeURL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"https://imagemagick.org");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickHomeURL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"file:///home/mmom/src/tmp/magickwand.js/lib/binding/linux-x64/ImageMagick/share/doc/ImageMagick-7/index.html");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickQuantumDepth_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"Q16");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickQuantumRange_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"65535");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickHDRISupport_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"-HDRI");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickVersion_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_FromCharPtr((const char *)"ImageMagick 7.1.1-30 Q16-HDRI x86_64 babe7ad2f:20240407 https://imagemagick.org");
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MagickImageCoderModule_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MagickImageCoderModule));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MagickImageFilterModule_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MagickImageFilterModule));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedCLDeviceType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedCLDeviceType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CpuCLDeviceType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CpuCLDeviceType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GpuCLDeviceType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GpuCLDeviceType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NoValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NoValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ColorspaceValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ColorspaceValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CompareValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CompareValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CompositeValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CompositeValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ConvertValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ConvertValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FormatsDiskValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FormatsDiskValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FormatsMapValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FormatsMapValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FormatsMemoryValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FormatsMemoryValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_IdentifyValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::IdentifyValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImportExportValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImportExportValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MontageValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MontageValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StreamValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StreamValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MagickValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MagickValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AllValidate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AllValidate));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedPolicyDomain_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedPolicyDomain));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CoderPolicyDomain_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CoderPolicyDomain));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DelegatePolicyDomain_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DelegatePolicyDomain));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FilterPolicyDomain_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FilterPolicyDomain));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PathPolicyDomain_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PathPolicyDomain));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ResourcePolicyDomain_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ResourcePolicyDomain));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SystemPolicyDomain_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SystemPolicyDomain));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CachePolicyDomain_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CachePolicyDomain));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ModulePolicyDomain_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ModulePolicyDomain));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedPolicyRights_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedPolicyRights));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NoPolicyRights_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NoPolicyRights));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ReadPolicyRights_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ReadPolicyRights));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WritePolicyRights_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WritePolicyRights));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ExecutePolicyRights_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ExecutePolicyRights));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AllPolicyRights_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AllPolicyRights));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(Napi::Value valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef.IsString()) {
    Napi::String js_str;
    NAPI_CHECK_RESULT(valRef.ToString(), js_str);

    std::string str = js_str.Utf8Value();
    size_t len = str.size() + 1;
    char* cstr = (char*) (new char[len]());
    memcpy(cstr, str.data(), len);
    
    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;
    
    return SWIG_OK;
  } else if (valRef.IsNull()) {
    if (cptr) *cptr = 0;
    return SWIG_OK;
  } else {
    if(valRef.IsObject()) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      Napi::Object obj;
      NAPI_CHECK_RESULT(valRef.ToObject(), obj);
      // try if the object is a wrapped char[]
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
    }
  }
  goto fail;
fail:
  return SWIG_TypeError;
}


SWIGINTERN
int SWIG_AsVal_int (Napi::Value valRef, int* val)
{
  if (!valRef.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(valRef.ToNumber(), num);
    *val = static_cast<int>(num.Int32Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


// js_global_getter
Napi::Value MagickCore_UndefinedRegistryType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedRegistryType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImageRegistryType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImageRegistryType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImageInfoRegistryType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImageInfoRegistryType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StringRegistryType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StringRegistryType));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AreaResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AreaResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DiskResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DiskResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_FileResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::FileResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HeightResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HeightResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MapResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MapResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MemoryResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MemoryResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ThreadResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ThreadResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ThrottleResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ThrottleResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TimeResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TimeResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_WidthResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::WidthResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ListLengthResource_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ListLengthResource));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AbsEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AbsEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AddEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AddEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AddModulusEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AddModulusEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_AndEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::AndEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CosineEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CosineEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_DivideEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::DivideEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ExponentialEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ExponentialEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GaussianNoiseEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GaussianNoiseEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImpulseNoiseEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImpulseNoiseEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LaplacianNoiseEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LaplacianNoiseEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LeftShiftEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LeftShiftEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LogEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LogEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MaxEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MaxEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MeanEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MeanEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MedianEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MedianEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MinEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MinEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MultiplicativeNoiseEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MultiplicativeNoiseEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MultiplyEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MultiplyEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_OrEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::OrEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PoissonNoiseEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PoissonNoiseEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PowEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PowEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RightShiftEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RightShiftEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RootMeanSquareEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RootMeanSquareEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SetEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SetEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SineEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SineEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SubtractEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SubtractEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SumEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SumEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ThresholdBlackEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ThresholdBlackEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ThresholdEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ThresholdEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ThresholdWhiteEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ThresholdWhiteEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UniformNoiseEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UniformNoiseEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_XorEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::XorEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_InverseLogEvaluateOperator_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::InverseLogEvaluateOperator));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GradientStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GradientStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MaximumStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MaximumStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MeanStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MeanStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MedianStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MedianStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MinimumStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MinimumStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ModeStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ModeStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_NonpeakStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::NonpeakStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RootMeanSquareStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RootMeanSquareStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_StandardDeviationStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::StandardDeviationStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ContrastStatistic_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ContrastStatistic));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedPath_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedPath));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MagickPath_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MagickPath));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RootPath_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RootPath));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_HeadPath_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::HeadPath));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_TailPath_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::TailPath));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BasePath_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BasePath));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ExtensionPath_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ExtensionPath));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SubimagePath_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SubimagePath));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_CanonicalPath_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::CanonicalPath));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_SubcanonicalPath_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::SubcanonicalPath));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_BasePathSansCompressExtension_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::BasePathSansCompressExtension));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UndefinedNoise_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UndefinedNoise));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_UniformNoise_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::UniformNoise));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_GaussianNoise_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::GaussianNoise));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_MultiplicativeGaussianNoise_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::MultiplicativeGaussianNoise));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_ImpulseNoise_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::ImpulseNoise));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_LaplacianNoise_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::LaplacianNoise));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_PoissonNoise_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::PoissonNoise));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value MagickCore_RandomNoise_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(MagickCore::RandomNoise));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


// js_global_getter
Napi::Value exports_MagickWandSignature_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(0xabacadabUL));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}


SWIGINTERN
Napi::Value SWIG_From_bool(Napi::Env env, bool val)
{
  return Napi::Boolean::New(env, val);
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_long (Napi::Value obj, unsigned long *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    if (num.Int64Value() < 0) {
      return SWIG_TypeError;
    }
    *val = static_cast<unsigned long>(num.Int64Value());
  }
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGCLINKAGE int
SWIG_AsPtr_std_string (Napi::Value obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}



SWIG_NAPI_AsyncContext::SWIG_NAPI_AsyncContext(Napi::Env _env) : 
    env(_env),
    SWIG_NAPI_deferred(Napi::Promise::Deferred(_env)),
    SWIG_NAPI_deferred_finalized(false) {}

SWIG_NAPI_AsyncContext::~SWIG_NAPI_AsyncContext() {
  if (!SWIG_NAPI_deferred_finalized) {
    // This fixes a very vicious leak
    // Once a Deferred has been created, it won't be destroyed
    // unless it is resolved or rejected - its destructor is a no-op
    // This code is triggered when synchronously throwing while parsing the args
    SWIG_NAPI_deferred.Resolve(env.Undefined());
    SWIG_NAPI_deferred_finalized = true;
  }
}

#ifdef NAPI_CPP_EXCEPTIONS
void SWIG_NAPI_AsyncContext::SWIG_NAPI_Fail(const Napi::Error &error) {
  if (!SWIG_NAPI_Cleanup()) goto fail;
  SWIG_NAPI_deferred_finalized = true;
  SWIG_NAPI_deferred.Reject(error.Value());
  goto fail;
fail:
  return;
}
#endif

SWIG_NAPI_AsyncWorker::SWIG_NAPI_AsyncWorker(
      Napi::Env _env,
      const char *name,
      SWIG_NAPI_AsyncContext *_context) :
    Napi::AsyncWorker(_env, name),
    context(_context),
    persistent(),
    saved_exception(nullptr) {}

SWIG_NAPI_AsyncWorker::~SWIG_NAPI_AsyncWorker() {
  // Release the persistent references
  for (Napi::ObjectReference *ref : persistent) {
    delete ref;
  }
  persistent.clear();
}

void SWIG_NAPI_AsyncWorker::OnOK() {
  Napi::Env env(Env());
  Napi::HandleScope scope(env);
#ifdef NAPI_CPP_EXCEPTIONS
  try {
    context->SWIG_NAPI_Rethrow(saved_exception);
  } catch (Napi::Error &error) {
    context->SWIG_NAPI_Fail(error);
    delete context;
    return;
  } catch (std::exception &ex) {
    Napi::Error error = Napi::Error::New(env, ex.what());
    context->SWIG_NAPI_Fail(error);
    delete context;
    return;
  }
#endif
  try {
    context->SWIG_NAPI_Resolve();
  } catch (Napi::Error &error) {
    context->SWIG_NAPI_Fail(error);
    delete context;
    return;
  } 
  delete context;
}

void SWIG_NAPI_AsyncWorker::OnError(const Napi::Error &error) {
  // This should never happen, we catch all errors now
  abort();
}

void SWIG_NAPI_AsyncWorker::Execute() {
#ifdef NAPI_CPP_EXCEPTIONS
  try {
    context->SWIG_NAPI_Execute();
  } catch (...) {
    saved_exception = std::current_exception();
  }
#else
  context->SWIG_NAPI_Execute();
#endif
}

Napi::Value SWIG_NAPI_AsyncWorker::Run(const Napi::CallbackInfo &info) {
  SWIG_NAPI_AsyncContext::SWIG_NAPI_Status rc;

#ifdef NAPI_CPP_EXCEPTIONS
  try {
    rc = context->SWIG_NAPI_Init(info);
  } catch (...) {
    delete context;
    delete this;
    throw;
  }
#else
  rc = context->SWIG_NAPI_Init(info);
#endif
  if (rc == SWIG_NAPI_AsyncContext::SWIG_NAPI_Status::REJECT) {
    Napi::Value r = context->SWIG_NAPI_Promise();
    context->SWIG_NAPI_Cleanup();
    delete context;
    delete this;
    return r;
  } else if (rc == SWIG_NAPI_AsyncContext::SWIG_NAPI_Status::THROW) {
    context->SWIG_NAPI_Cleanup();
    delete context;
    delete this;
    return Napi::Value();
  }

  Persist(info.This());
  for (size_t i = 0; i < info.Length(); i++) Persist(info[i]);
  Queue();
  return context->SWIG_NAPI_Promise();
}


SWIGINTERN
int SWIG_AsVal_float (Napi::Value obj, float *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }

  if(val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<float>(num.DoubleValue());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
int SWIG_AsVal_double (Napi::Value obj, double *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }

  if(val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<double>(num.DoubleValue());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
int SWIG_AsVal_bool (Napi::Value obj, bool *val)
{
  if(!obj.IsBoolean()) {
    return SWIG_TypeError;
  }

  Napi::Boolean b;
  NAPI_CHECK_RESULT(obj.ToBoolean(), b);
  if (val) *val = b.Value();
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_int (Napi::Value valRef, unsigned int* val)
{
  if (!valRef.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(valRef.ToNumber(), num);
    if (num.Int64Value() < 0) {
      return SWIG_TypeError;
    }
    *val = static_cast<unsigned int>(num.Uint32Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
int SWIG_AsVal_unsigned_SS_long_SS_long (Napi::Value obj, unsigned long long *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }
  if (obj.ToNumber().Int64Value() < 0) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<unsigned long long>(num.Int64Value());
  }
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}
#endif


// js_global_getter
Napi::Value exports_Magick_CoderInfo_header_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(1));
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return Napi::Value();
#endif
}




EnvInstanceData::EnvInstanceData(Napi::Env env, swig_module_info *swig_module) :
  env(env), SWIG_NAPI_ObjectWrapCtor(SWIG_NULLPTR), SWIG_NAPI_PackedObjectWrapCtor(SWIG_NULLPTR),
  ctor(SWIG_NULLPTR), swig_module(swig_module), module_instance_data(SWIG_NULLPTR) {
  ctor = new Napi::FunctionReference*[swig_module->size + 1];
  for (size_t i = 0; i <= swig_module->size; i++) {
    ctor[i] = SWIG_NULLPTR;
  }
}

EnvInstanceData::~EnvInstanceData() {
  for (size_t i = 0; i <= swig_module->size; i++) {
    if (ctor[i] != SWIG_NULLPTR)
      delete ctor[i];
    ctor[i] = SWIG_NULLPTR;
  }
  delete [] ctor;
  delete SWIG_NAPI_ObjectWrapCtor;
  delete SWIG_NAPI_PackedObjectWrapCtor;
}

SWIGRUNTIME void
SWIG_NAPI_SetModule(Napi::Env env, swig_module_info *swig_module) {
  auto data = new EnvInstanceData(env, swig_module);
  env.SetInstanceData(data);
}

SWIGRUNTIME swig_module_info *
SWIG_NAPI_GetModule(Napi::Env env) {
  auto data = env.GetInstanceData<EnvInstanceData>();
  if (data == SWIG_NULLPTR) return SWIG_NULLPTR;
  return data->swig_module;
}

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


Napi::Object Init(Napi::Env env, Napi::Object exports) {
  SWIG_InitializeModule(env);


// We link in everything statically
InitializeMagick(".");


  /* initialize the base SWIG object class */
  Napi::Function SWIG_NAPI_ObjectWrap_ctor = SWIG_NAPI_ObjectWrap_inst::GetClass(env);
  Napi::FunctionReference *SWIG_NAPI_ObjectWrap_ctor_ref = new Napi::FunctionReference();
  *SWIG_NAPI_ObjectWrap_ctor_ref = Napi::Persistent(SWIG_NAPI_ObjectWrap_ctor);
  env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor = SWIG_NAPI_ObjectWrap_ctor_ref;

  /* initialize the SWIG packed object class */
  Napi::Function SWIG_NAPI_PackedObjectWrap_ctor = SWIG_NAPI_PackedObjectWrap_inst::GetClass(env);
  Napi::FunctionReference *SWIG_NAPI_PackedObjectWrap_ctor_ref = new Napi::FunctionReference();
  *SWIG_NAPI_PackedObjectWrap_ctor_ref = Napi::Persistent(SWIG_NAPI_PackedObjectWrap_ctor);
  env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_PackedObjectWrapCtor = SWIG_NAPI_PackedObjectWrap_ctor_ref;

  /* create objects for namespaces */
  // jsnapi_create_namespace
Napi::Object MagickCore = Napi::Object::New(env);
// jsnapi_create_namespace
Napi::Object Magick = Napi::Object::New(env);
// jsnapi_create_namespace
Napi::Object std = Napi::Object::New(env);


  /* register classes */
  /* Class: Blob (_Magick_Blob) */
// jsnapi_registerclass
Napi::Function _Magick_Blob_ctor = _Magick_Blob_inst::GetClass(env);
Magick.Set("Blob", _Magick_Blob_ctor);
if (SWIGTYPE_p_Magick__Blob->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__Blob->clientdata = new size_t(0);
}
Napi::FunctionReference *_Magick_Blob_ctor_ref = new Napi::FunctionReference();
*_Magick_Blob_ctor_ref = Napi::Persistent(_Magick_Blob_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[0] = _Magick_Blob_ctor_ref;
/* Class: Color (_Magick_Color) */
// jsnapi_registerclass
Napi::Function _Magick_Color_ctor = _Magick_Color_inst::GetClass(env);
Magick.Set("Color", _Magick_Color_ctor);
if (SWIGTYPE_p_Magick__Color->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__Color->clientdata = new size_t(1);
}
Napi::FunctionReference *_Magick_Color_ctor_ref = new Napi::FunctionReference();
*_Magick_Color_ctor_ref = Napi::Persistent(_Magick_Color_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[1] = _Magick_Color_ctor_ref;
/* Class: ColorCMYK (_Magick_ColorCMYK) */
// jsnapi_registerclass
Napi::Function _Magick_ColorCMYK_ctor = _Magick_ColorCMYK_inst::GetClass(env);
Magick.Set("ColorCMYK", _Magick_ColorCMYK_ctor);
if (SWIGTYPE_p_Magick__ColorCMYK->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__ColorCMYK->clientdata = new size_t(2);
}
Napi::FunctionReference *_Magick_ColorCMYK_ctor_ref = new Napi::FunctionReference();
*_Magick_ColorCMYK_ctor_ref = Napi::Persistent(_Magick_ColorCMYK_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[2] = _Magick_ColorCMYK_ctor_ref;
/* Class: ColorGray (_Magick_ColorGray) */
// jsnapi_registerclass
Napi::Function _Magick_ColorGray_ctor = _Magick_ColorGray_inst::GetClass(env);
Magick.Set("ColorGray", _Magick_ColorGray_ctor);
if (SWIGTYPE_p_Magick__ColorGray->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__ColorGray->clientdata = new size_t(3);
}
Napi::FunctionReference *_Magick_ColorGray_ctor_ref = new Napi::FunctionReference();
*_Magick_ColorGray_ctor_ref = Napi::Persistent(_Magick_ColorGray_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[3] = _Magick_ColorGray_ctor_ref;
/* Class: ColorHSL (_Magick_ColorHSL) */
// jsnapi_registerclass
Napi::Function _Magick_ColorHSL_ctor = _Magick_ColorHSL_inst::GetClass(env);
Magick.Set("ColorHSL", _Magick_ColorHSL_ctor);
if (SWIGTYPE_p_Magick__ColorHSL->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__ColorHSL->clientdata = new size_t(4);
}
Napi::FunctionReference *_Magick_ColorHSL_ctor_ref = new Napi::FunctionReference();
*_Magick_ColorHSL_ctor_ref = Napi::Persistent(_Magick_ColorHSL_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[4] = _Magick_ColorHSL_ctor_ref;
/* Class: ColorMono (_Magick_ColorMono) */
// jsnapi_registerclass
Napi::Function _Magick_ColorMono_ctor = _Magick_ColorMono_inst::GetClass(env);
Magick.Set("ColorMono", _Magick_ColorMono_ctor);
if (SWIGTYPE_p_Magick__ColorMono->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__ColorMono->clientdata = new size_t(5);
}
Napi::FunctionReference *_Magick_ColorMono_ctor_ref = new Napi::FunctionReference();
*_Magick_ColorMono_ctor_ref = Napi::Persistent(_Magick_ColorMono_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[5] = _Magick_ColorMono_ctor_ref;
/* Class: ColorRGB (_Magick_ColorRGB) */
// jsnapi_registerclass
Napi::Function _Magick_ColorRGB_ctor = _Magick_ColorRGB_inst::GetClass(env);
Magick.Set("ColorRGB", _Magick_ColorRGB_ctor);
if (SWIGTYPE_p_Magick__ColorRGB->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__ColorRGB->clientdata = new size_t(6);
}
Napi::FunctionReference *_Magick_ColorRGB_ctor_ref = new Napi::FunctionReference();
*_Magick_ColorRGB_ctor_ref = Napi::Persistent(_Magick_ColorRGB_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[6] = _Magick_ColorRGB_ctor_ref;
/* Class: ColorYUV (_Magick_ColorYUV) */
// jsnapi_registerclass
Napi::Function _Magick_ColorYUV_ctor = _Magick_ColorYUV_inst::GetClass(env);
Magick.Set("ColorYUV", _Magick_ColorYUV_ctor);
if (SWIGTYPE_p_Magick__ColorYUV->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__ColorYUV->clientdata = new size_t(7);
}
Napi::FunctionReference *_Magick_ColorYUV_ctor_ref = new Napi::FunctionReference();
*_Magick_ColorYUV_ctor_ref = Napi::Persistent(_Magick_ColorYUV_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[7] = _Magick_ColorYUV_ctor_ref;
/* Class: Geometry (_Magick_Geometry) */
// jsnapi_registerclass
Napi::Function _Magick_Geometry_ctor = _Magick_Geometry_inst::GetClass(env);
Magick.Set("Geometry", _Magick_Geometry_ctor);
if (SWIGTYPE_p_Magick__Geometry->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__Geometry->clientdata = new size_t(8);
}
Napi::FunctionReference *_Magick_Geometry_ctor_ref = new Napi::FunctionReference();
*_Magick_Geometry_ctor_ref = Napi::Persistent(_Magick_Geometry_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[8] = _Magick_Geometry_ctor_ref;
/* Class: Offset (_Magick_Offset) */
// jsnapi_registerclass
Napi::Function _Magick_Offset_ctor = _Magick_Offset_inst::GetClass(env);
Magick.Set("Offset", _Magick_Offset_ctor);
if (SWIGTYPE_p_Magick__Offset->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__Offset->clientdata = new size_t(9);
}
Napi::FunctionReference *_Magick_Offset_ctor_ref = new Napi::FunctionReference();
*_Magick_Offset_ctor_ref = Napi::Persistent(_Magick_Offset_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[9] = _Magick_Offset_ctor_ref;
/* Class: Point (_Magick_Point) */
// jsnapi_registerclass
Napi::Function _Magick_Point_ctor = _Magick_Point_inst::GetClass(env);
Magick.Set("Point", _Magick_Point_ctor);
if (SWIGTYPE_p_Magick__Point->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__Point->clientdata = new size_t(10);
}
Napi::FunctionReference *_Magick_Point_ctor_ref = new Napi::FunctionReference();
*_Magick_Point_ctor_ref = Napi::Persistent(_Magick_Point_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[10] = _Magick_Point_ctor_ref;
/* Class: Coordinate (_Magick_Coordinate) */
// jsnapi_registerclass
Napi::Function _Magick_Coordinate_ctor = _Magick_Coordinate_inst::GetClass(env);
Magick.Set("Coordinate", _Magick_Coordinate_ctor);
if (SWIGTYPE_p_Magick__Coordinate->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__Coordinate->clientdata = new size_t(11);
}
Napi::FunctionReference *_Magick_Coordinate_ctor_ref = new Napi::FunctionReference();
*_Magick_Coordinate_ctor_ref = Napi::Persistent(_Magick_Coordinate_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[11] = _Magick_Coordinate_ctor_ref;
/* Class: DrawableBase (_Magick_DrawableBase) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableBase_ctor = _Magick_DrawableBase_inst::GetClass(env);
Magick.Set("DrawableBase", _Magick_DrawableBase_ctor);
if (SWIGTYPE_p_Magick__DrawableBase->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableBase->clientdata = new size_t(12);
}
Napi::FunctionReference *_Magick_DrawableBase_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableBase_ctor_ref = Napi::Persistent(_Magick_DrawableBase_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[12] = _Magick_DrawableBase_ctor_ref;
/* Class: Drawable (_Magick_Drawable) */
// jsnapi_registerclass
Napi::Function _Magick_Drawable_ctor = _Magick_Drawable_inst::GetClass(env);
Magick.Set("Drawable", _Magick_Drawable_ctor);
if (SWIGTYPE_p_Magick__Drawable->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__Drawable->clientdata = new size_t(13);
}
Napi::FunctionReference *_Magick_Drawable_ctor_ref = new Napi::FunctionReference();
*_Magick_Drawable_ctor_ref = Napi::Persistent(_Magick_Drawable_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[13] = _Magick_Drawable_ctor_ref;
/* Class: VPathBase (_Magick_VPathBase) */
// jsnapi_registerclass
Napi::Function _Magick_VPathBase_ctor = _Magick_VPathBase_inst::GetClass(env);
Magick.Set("VPathBase", _Magick_VPathBase_ctor);
if (SWIGTYPE_p_Magick__VPathBase->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__VPathBase->clientdata = new size_t(14);
}
Napi::FunctionReference *_Magick_VPathBase_ctor_ref = new Napi::FunctionReference();
*_Magick_VPathBase_ctor_ref = Napi::Persistent(_Magick_VPathBase_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[14] = _Magick_VPathBase_ctor_ref;
/* Class: VPath (_Magick_VPath) */
// jsnapi_registerclass
Napi::Function _Magick_VPath_ctor = _Magick_VPath_inst::GetClass(env);
Magick.Set("VPath", _Magick_VPath_ctor);
if (SWIGTYPE_p_Magick__VPath->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__VPath->clientdata = new size_t(15);
}
Napi::FunctionReference *_Magick_VPath_ctor_ref = new Napi::FunctionReference();
*_Magick_VPath_ctor_ref = Napi::Persistent(_Magick_VPath_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[15] = _Magick_VPath_ctor_ref;
/* Class: DrawableAffine (_Magick_DrawableAffine) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableAffine_ctor = _Magick_DrawableAffine_inst::GetClass(env);
Magick.Set("DrawableAffine", _Magick_DrawableAffine_ctor);
if (SWIGTYPE_p_Magick__DrawableAffine->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableAffine->clientdata = new size_t(16);
}
Napi::FunctionReference *_Magick_DrawableAffine_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableAffine_ctor_ref = Napi::Persistent(_Magick_DrawableAffine_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[16] = _Magick_DrawableAffine_ctor_ref;
/* Class: DrawableAlpha (_Magick_DrawableAlpha) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableAlpha_ctor = _Magick_DrawableAlpha_inst::GetClass(env);
Magick.Set("DrawableAlpha", _Magick_DrawableAlpha_ctor);
if (SWIGTYPE_p_Magick__DrawableAlpha->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableAlpha->clientdata = new size_t(17);
}
Napi::FunctionReference *_Magick_DrawableAlpha_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableAlpha_ctor_ref = Napi::Persistent(_Magick_DrawableAlpha_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[17] = _Magick_DrawableAlpha_ctor_ref;
/* Class: DrawableArc (_Magick_DrawableArc) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableArc_ctor = _Magick_DrawableArc_inst::GetClass(env);
Magick.Set("DrawableArc", _Magick_DrawableArc_ctor);
if (SWIGTYPE_p_Magick__DrawableArc->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableArc->clientdata = new size_t(18);
}
Napi::FunctionReference *_Magick_DrawableArc_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableArc_ctor_ref = Napi::Persistent(_Magick_DrawableArc_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[18] = _Magick_DrawableArc_ctor_ref;
/* Class: DrawableBezier (_Magick_DrawableBezier) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableBezier_ctor = _Magick_DrawableBezier_inst::GetClass(env);
Magick.Set("DrawableBezier", _Magick_DrawableBezier_ctor);
if (SWIGTYPE_p_Magick__DrawableBezier->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableBezier->clientdata = new size_t(19);
}
Napi::FunctionReference *_Magick_DrawableBezier_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableBezier_ctor_ref = Napi::Persistent(_Magick_DrawableBezier_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[19] = _Magick_DrawableBezier_ctor_ref;
/* Class: DrawableBorderColor (_Magick_DrawableBorderColor) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableBorderColor_ctor = _Magick_DrawableBorderColor_inst::GetClass(env);
Magick.Set("DrawableBorderColor", _Magick_DrawableBorderColor_ctor);
if (SWIGTYPE_p_Magick__DrawableBorderColor->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableBorderColor->clientdata = new size_t(20);
}
Napi::FunctionReference *_Magick_DrawableBorderColor_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableBorderColor_ctor_ref = Napi::Persistent(_Magick_DrawableBorderColor_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[20] = _Magick_DrawableBorderColor_ctor_ref;
/* Class: DrawableClipRule (_Magick_DrawableClipRule) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableClipRule_ctor = _Magick_DrawableClipRule_inst::GetClass(env);
Magick.Set("DrawableClipRule", _Magick_DrawableClipRule_ctor);
if (SWIGTYPE_p_Magick__DrawableClipRule->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableClipRule->clientdata = new size_t(21);
}
Napi::FunctionReference *_Magick_DrawableClipRule_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableClipRule_ctor_ref = Napi::Persistent(_Magick_DrawableClipRule_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[21] = _Magick_DrawableClipRule_ctor_ref;
/* Class: DrawableClipUnits (_Magick_DrawableClipUnits) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableClipUnits_ctor = _Magick_DrawableClipUnits_inst::GetClass(env);
Magick.Set("DrawableClipUnits", _Magick_DrawableClipUnits_ctor);
if (SWIGTYPE_p_Magick__DrawableClipUnits->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableClipUnits->clientdata = new size_t(22);
}
Napi::FunctionReference *_Magick_DrawableClipUnits_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableClipUnits_ctor_ref = Napi::Persistent(_Magick_DrawableClipUnits_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[22] = _Magick_DrawableClipUnits_ctor_ref;
/* Class: DrawablePopClipPath (_Magick_DrawablePopClipPath) */
// jsnapi_registerclass
Napi::Function _Magick_DrawablePopClipPath_ctor = _Magick_DrawablePopClipPath_inst::GetClass(env);
Magick.Set("DrawablePopClipPath", _Magick_DrawablePopClipPath_ctor);
if (SWIGTYPE_p_Magick__DrawablePopClipPath->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawablePopClipPath->clientdata = new size_t(23);
}
Napi::FunctionReference *_Magick_DrawablePopClipPath_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawablePopClipPath_ctor_ref = Napi::Persistent(_Magick_DrawablePopClipPath_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[23] = _Magick_DrawablePopClipPath_ctor_ref;
/* Class: DrawablePushClipPath (_Magick_DrawablePushClipPath) */
// jsnapi_registerclass
Napi::Function _Magick_DrawablePushClipPath_ctor = _Magick_DrawablePushClipPath_inst::GetClass(env);
Magick.Set("DrawablePushClipPath", _Magick_DrawablePushClipPath_ctor);
if (SWIGTYPE_p_Magick__DrawablePushClipPath->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawablePushClipPath->clientdata = new size_t(24);
}
Napi::FunctionReference *_Magick_DrawablePushClipPath_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawablePushClipPath_ctor_ref = Napi::Persistent(_Magick_DrawablePushClipPath_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[24] = _Magick_DrawablePushClipPath_ctor_ref;
/* Class: DrawableClipPath (_Magick_DrawableClipPath) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableClipPath_ctor = _Magick_DrawableClipPath_inst::GetClass(env);
Magick.Set("DrawableClipPath", _Magick_DrawableClipPath_ctor);
if (SWIGTYPE_p_Magick__DrawableClipPath->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableClipPath->clientdata = new size_t(25);
}
Napi::FunctionReference *_Magick_DrawableClipPath_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableClipPath_ctor_ref = Napi::Persistent(_Magick_DrawableClipPath_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[25] = _Magick_DrawableClipPath_ctor_ref;
/* Class: DrawableCircle (_Magick_DrawableCircle) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableCircle_ctor = _Magick_DrawableCircle_inst::GetClass(env);
Magick.Set("DrawableCircle", _Magick_DrawableCircle_ctor);
if (SWIGTYPE_p_Magick__DrawableCircle->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableCircle->clientdata = new size_t(26);
}
Napi::FunctionReference *_Magick_DrawableCircle_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableCircle_ctor_ref = Napi::Persistent(_Magick_DrawableCircle_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[26] = _Magick_DrawableCircle_ctor_ref;
/* Class: DrawableColor (_Magick_DrawableColor) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableColor_ctor = _Magick_DrawableColor_inst::GetClass(env);
Magick.Set("DrawableColor", _Magick_DrawableColor_ctor);
if (SWIGTYPE_p_Magick__DrawableColor->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableColor->clientdata = new size_t(27);
}
Napi::FunctionReference *_Magick_DrawableColor_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableColor_ctor_ref = Napi::Persistent(_Magick_DrawableColor_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[27] = _Magick_DrawableColor_ctor_ref;
/* Class: DrawableCompositeImage (_Magick_DrawableCompositeImage) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableCompositeImage_ctor = _Magick_DrawableCompositeImage_inst::GetClass(env);
Magick.Set("DrawableCompositeImage", _Magick_DrawableCompositeImage_ctor);
if (SWIGTYPE_p_Magick__DrawableCompositeImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableCompositeImage->clientdata = new size_t(28);
}
Napi::FunctionReference *_Magick_DrawableCompositeImage_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableCompositeImage_ctor_ref = Napi::Persistent(_Magick_DrawableCompositeImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[28] = _Magick_DrawableCompositeImage_ctor_ref;
/* Class: DrawableDensity (_Magick_DrawableDensity) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableDensity_ctor = _Magick_DrawableDensity_inst::GetClass(env);
Magick.Set("DrawableDensity", _Magick_DrawableDensity_ctor);
if (SWIGTYPE_p_Magick__DrawableDensity->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableDensity->clientdata = new size_t(29);
}
Napi::FunctionReference *_Magick_DrawableDensity_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableDensity_ctor_ref = Napi::Persistent(_Magick_DrawableDensity_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[29] = _Magick_DrawableDensity_ctor_ref;
/* Class: DrawableEllipse (_Magick_DrawableEllipse) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableEllipse_ctor = _Magick_DrawableEllipse_inst::GetClass(env);
Magick.Set("DrawableEllipse", _Magick_DrawableEllipse_ctor);
if (SWIGTYPE_p_Magick__DrawableEllipse->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableEllipse->clientdata = new size_t(30);
}
Napi::FunctionReference *_Magick_DrawableEllipse_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableEllipse_ctor_ref = Napi::Persistent(_Magick_DrawableEllipse_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[30] = _Magick_DrawableEllipse_ctor_ref;
/* Class: DrawableFillColor (_Magick_DrawableFillColor) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableFillColor_ctor = _Magick_DrawableFillColor_inst::GetClass(env);
Magick.Set("DrawableFillColor", _Magick_DrawableFillColor_ctor);
if (SWIGTYPE_p_Magick__DrawableFillColor->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableFillColor->clientdata = new size_t(31);
}
Napi::FunctionReference *_Magick_DrawableFillColor_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableFillColor_ctor_ref = Napi::Persistent(_Magick_DrawableFillColor_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[31] = _Magick_DrawableFillColor_ctor_ref;
/* Class: DrawableFillPatternUrl (_Magick_DrawableFillPatternUrl) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableFillPatternUrl_ctor = _Magick_DrawableFillPatternUrl_inst::GetClass(env);
Magick.Set("DrawableFillPatternUrl", _Magick_DrawableFillPatternUrl_ctor);
if (SWIGTYPE_p_Magick__DrawableFillPatternUrl->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableFillPatternUrl->clientdata = new size_t(32);
}
Napi::FunctionReference *_Magick_DrawableFillPatternUrl_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableFillPatternUrl_ctor_ref = Napi::Persistent(_Magick_DrawableFillPatternUrl_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[32] = _Magick_DrawableFillPatternUrl_ctor_ref;
/* Class: DrawableFillRule (_Magick_DrawableFillRule) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableFillRule_ctor = _Magick_DrawableFillRule_inst::GetClass(env);
Magick.Set("DrawableFillRule", _Magick_DrawableFillRule_ctor);
if (SWIGTYPE_p_Magick__DrawableFillRule->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableFillRule->clientdata = new size_t(33);
}
Napi::FunctionReference *_Magick_DrawableFillRule_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableFillRule_ctor_ref = Napi::Persistent(_Magick_DrawableFillRule_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[33] = _Magick_DrawableFillRule_ctor_ref;
/* Class: DrawableFillOpacity (_Magick_DrawableFillOpacity) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableFillOpacity_ctor = _Magick_DrawableFillOpacity_inst::GetClass(env);
Magick.Set("DrawableFillOpacity", _Magick_DrawableFillOpacity_ctor);
if (SWIGTYPE_p_Magick__DrawableFillOpacity->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableFillOpacity->clientdata = new size_t(34);
}
Napi::FunctionReference *_Magick_DrawableFillOpacity_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableFillOpacity_ctor_ref = Napi::Persistent(_Magick_DrawableFillOpacity_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[34] = _Magick_DrawableFillOpacity_ctor_ref;
/* Class: DrawableFont (_Magick_DrawableFont) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableFont_ctor = _Magick_DrawableFont_inst::GetClass(env);
Magick.Set("DrawableFont", _Magick_DrawableFont_ctor);
if (SWIGTYPE_p_Magick__DrawableFont->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableFont->clientdata = new size_t(35);
}
Napi::FunctionReference *_Magick_DrawableFont_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableFont_ctor_ref = Napi::Persistent(_Magick_DrawableFont_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[35] = _Magick_DrawableFont_ctor_ref;
/* Class: DrawableGravity (_Magick_DrawableGravity) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableGravity_ctor = _Magick_DrawableGravity_inst::GetClass(env);
Magick.Set("DrawableGravity", _Magick_DrawableGravity_ctor);
if (SWIGTYPE_p_Magick__DrawableGravity->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableGravity->clientdata = new size_t(36);
}
Napi::FunctionReference *_Magick_DrawableGravity_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableGravity_ctor_ref = Napi::Persistent(_Magick_DrawableGravity_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[36] = _Magick_DrawableGravity_ctor_ref;
/* Class: DrawableLine (_Magick_DrawableLine) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableLine_ctor = _Magick_DrawableLine_inst::GetClass(env);
Magick.Set("DrawableLine", _Magick_DrawableLine_ctor);
if (SWIGTYPE_p_Magick__DrawableLine->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableLine->clientdata = new size_t(37);
}
Napi::FunctionReference *_Magick_DrawableLine_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableLine_ctor_ref = Napi::Persistent(_Magick_DrawableLine_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[37] = _Magick_DrawableLine_ctor_ref;
/* Class: DrawablePath (_Magick_DrawablePath) */
// jsnapi_registerclass
Napi::Function _Magick_DrawablePath_ctor = _Magick_DrawablePath_inst::GetClass(env);
Magick.Set("DrawablePath", _Magick_DrawablePath_ctor);
if (SWIGTYPE_p_Magick__DrawablePath->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawablePath->clientdata = new size_t(38);
}
Napi::FunctionReference *_Magick_DrawablePath_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawablePath_ctor_ref = Napi::Persistent(_Magick_DrawablePath_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[38] = _Magick_DrawablePath_ctor_ref;
/* Class: DrawablePoint (_Magick_DrawablePoint) */
// jsnapi_registerclass
Napi::Function _Magick_DrawablePoint_ctor = _Magick_DrawablePoint_inst::GetClass(env);
Magick.Set("DrawablePoint", _Magick_DrawablePoint_ctor);
if (SWIGTYPE_p_Magick__DrawablePoint->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawablePoint->clientdata = new size_t(39);
}
Napi::FunctionReference *_Magick_DrawablePoint_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawablePoint_ctor_ref = Napi::Persistent(_Magick_DrawablePoint_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[39] = _Magick_DrawablePoint_ctor_ref;
/* Class: DrawablePointSize (_Magick_DrawablePointSize) */
// jsnapi_registerclass
Napi::Function _Magick_DrawablePointSize_ctor = _Magick_DrawablePointSize_inst::GetClass(env);
Magick.Set("DrawablePointSize", _Magick_DrawablePointSize_ctor);
if (SWIGTYPE_p_Magick__DrawablePointSize->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawablePointSize->clientdata = new size_t(40);
}
Napi::FunctionReference *_Magick_DrawablePointSize_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawablePointSize_ctor_ref = Napi::Persistent(_Magick_DrawablePointSize_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[40] = _Magick_DrawablePointSize_ctor_ref;
/* Class: DrawablePolygon (_Magick_DrawablePolygon) */
// jsnapi_registerclass
Napi::Function _Magick_DrawablePolygon_ctor = _Magick_DrawablePolygon_inst::GetClass(env);
Magick.Set("DrawablePolygon", _Magick_DrawablePolygon_ctor);
if (SWIGTYPE_p_Magick__DrawablePolygon->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawablePolygon->clientdata = new size_t(41);
}
Napi::FunctionReference *_Magick_DrawablePolygon_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawablePolygon_ctor_ref = Napi::Persistent(_Magick_DrawablePolygon_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[41] = _Magick_DrawablePolygon_ctor_ref;
/* Class: DrawablePolyline (_Magick_DrawablePolyline) */
// jsnapi_registerclass
Napi::Function _Magick_DrawablePolyline_ctor = _Magick_DrawablePolyline_inst::GetClass(env);
Magick.Set("DrawablePolyline", _Magick_DrawablePolyline_ctor);
if (SWIGTYPE_p_Magick__DrawablePolyline->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawablePolyline->clientdata = new size_t(42);
}
Napi::FunctionReference *_Magick_DrawablePolyline_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawablePolyline_ctor_ref = Napi::Persistent(_Magick_DrawablePolyline_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[42] = _Magick_DrawablePolyline_ctor_ref;
/* Class: DrawablePopGraphicContext (_Magick_DrawablePopGraphicContext) */
// jsnapi_registerclass
Napi::Function _Magick_DrawablePopGraphicContext_ctor = _Magick_DrawablePopGraphicContext_inst::GetClass(env);
Magick.Set("DrawablePopGraphicContext", _Magick_DrawablePopGraphicContext_ctor);
if (SWIGTYPE_p_Magick__DrawablePopGraphicContext->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawablePopGraphicContext->clientdata = new size_t(43);
}
Napi::FunctionReference *_Magick_DrawablePopGraphicContext_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawablePopGraphicContext_ctor_ref = Napi::Persistent(_Magick_DrawablePopGraphicContext_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[43] = _Magick_DrawablePopGraphicContext_ctor_ref;
/* Class: DrawablePushGraphicContext (_Magick_DrawablePushGraphicContext) */
// jsnapi_registerclass
Napi::Function _Magick_DrawablePushGraphicContext_ctor = _Magick_DrawablePushGraphicContext_inst::GetClass(env);
Magick.Set("DrawablePushGraphicContext", _Magick_DrawablePushGraphicContext_ctor);
if (SWIGTYPE_p_Magick__DrawablePushGraphicContext->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawablePushGraphicContext->clientdata = new size_t(44);
}
Napi::FunctionReference *_Magick_DrawablePushGraphicContext_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawablePushGraphicContext_ctor_ref = Napi::Persistent(_Magick_DrawablePushGraphicContext_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[44] = _Magick_DrawablePushGraphicContext_ctor_ref;
/* Class: DrawablePopPattern (_Magick_DrawablePopPattern) */
// jsnapi_registerclass
Napi::Function _Magick_DrawablePopPattern_ctor = _Magick_DrawablePopPattern_inst::GetClass(env);
Magick.Set("DrawablePopPattern", _Magick_DrawablePopPattern_ctor);
if (SWIGTYPE_p_Magick__DrawablePopPattern->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawablePopPattern->clientdata = new size_t(45);
}
Napi::FunctionReference *_Magick_DrawablePopPattern_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawablePopPattern_ctor_ref = Napi::Persistent(_Magick_DrawablePopPattern_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[45] = _Magick_DrawablePopPattern_ctor_ref;
/* Class: DrawablePushPattern (_Magick_DrawablePushPattern) */
// jsnapi_registerclass
Napi::Function _Magick_DrawablePushPattern_ctor = _Magick_DrawablePushPattern_inst::GetClass(env);
Magick.Set("DrawablePushPattern", _Magick_DrawablePushPattern_ctor);
if (SWIGTYPE_p_Magick__DrawablePushPattern->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawablePushPattern->clientdata = new size_t(46);
}
Napi::FunctionReference *_Magick_DrawablePushPattern_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawablePushPattern_ctor_ref = Napi::Persistent(_Magick_DrawablePushPattern_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[46] = _Magick_DrawablePushPattern_ctor_ref;
/* Class: DrawableRectangle (_Magick_DrawableRectangle) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableRectangle_ctor = _Magick_DrawableRectangle_inst::GetClass(env);
Magick.Set("DrawableRectangle", _Magick_DrawableRectangle_ctor);
if (SWIGTYPE_p_Magick__DrawableRectangle->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableRectangle->clientdata = new size_t(47);
}
Napi::FunctionReference *_Magick_DrawableRectangle_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableRectangle_ctor_ref = Napi::Persistent(_Magick_DrawableRectangle_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[47] = _Magick_DrawableRectangle_ctor_ref;
/* Class: DrawableRotation (_Magick_DrawableRotation) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableRotation_ctor = _Magick_DrawableRotation_inst::GetClass(env);
Magick.Set("DrawableRotation", _Magick_DrawableRotation_ctor);
if (SWIGTYPE_p_Magick__DrawableRotation->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableRotation->clientdata = new size_t(48);
}
Napi::FunctionReference *_Magick_DrawableRotation_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableRotation_ctor_ref = Napi::Persistent(_Magick_DrawableRotation_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[48] = _Magick_DrawableRotation_ctor_ref;
/* Class: DrawableRoundRectangle (_Magick_DrawableRoundRectangle) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableRoundRectangle_ctor = _Magick_DrawableRoundRectangle_inst::GetClass(env);
Magick.Set("DrawableRoundRectangle", _Magick_DrawableRoundRectangle_ctor);
if (SWIGTYPE_p_Magick__DrawableRoundRectangle->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableRoundRectangle->clientdata = new size_t(49);
}
Napi::FunctionReference *_Magick_DrawableRoundRectangle_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableRoundRectangle_ctor_ref = Napi::Persistent(_Magick_DrawableRoundRectangle_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[49] = _Magick_DrawableRoundRectangle_ctor_ref;
/* Class: DrawableScaling (_Magick_DrawableScaling) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableScaling_ctor = _Magick_DrawableScaling_inst::GetClass(env);
Magick.Set("DrawableScaling", _Magick_DrawableScaling_ctor);
if (SWIGTYPE_p_Magick__DrawableScaling->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableScaling->clientdata = new size_t(50);
}
Napi::FunctionReference *_Magick_DrawableScaling_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableScaling_ctor_ref = Napi::Persistent(_Magick_DrawableScaling_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[50] = _Magick_DrawableScaling_ctor_ref;
/* Class: DrawableSkewX (_Magick_DrawableSkewX) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableSkewX_ctor = _Magick_DrawableSkewX_inst::GetClass(env);
Magick.Set("DrawableSkewX", _Magick_DrawableSkewX_ctor);
if (SWIGTYPE_p_Magick__DrawableSkewX->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableSkewX->clientdata = new size_t(51);
}
Napi::FunctionReference *_Magick_DrawableSkewX_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableSkewX_ctor_ref = Napi::Persistent(_Magick_DrawableSkewX_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[51] = _Magick_DrawableSkewX_ctor_ref;
/* Class: DrawableSkewY (_Magick_DrawableSkewY) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableSkewY_ctor = _Magick_DrawableSkewY_inst::GetClass(env);
Magick.Set("DrawableSkewY", _Magick_DrawableSkewY_ctor);
if (SWIGTYPE_p_Magick__DrawableSkewY->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableSkewY->clientdata = new size_t(52);
}
Napi::FunctionReference *_Magick_DrawableSkewY_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableSkewY_ctor_ref = Napi::Persistent(_Magick_DrawableSkewY_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[52] = _Magick_DrawableSkewY_ctor_ref;
/* Class: DrawableStrokeDashArray (_Magick_DrawableStrokeDashArray) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableStrokeDashArray_ctor = _Magick_DrawableStrokeDashArray_inst::GetClass(env);
Magick.Set("DrawableStrokeDashArray", _Magick_DrawableStrokeDashArray_ctor);
if (SWIGTYPE_p_Magick__DrawableStrokeDashArray->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableStrokeDashArray->clientdata = new size_t(53);
}
Napi::FunctionReference *_Magick_DrawableStrokeDashArray_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableStrokeDashArray_ctor_ref = Napi::Persistent(_Magick_DrawableStrokeDashArray_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[53] = _Magick_DrawableStrokeDashArray_ctor_ref;
/* Class: DrawableStrokeDashOffset (_Magick_DrawableStrokeDashOffset) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableStrokeDashOffset_ctor = _Magick_DrawableStrokeDashOffset_inst::GetClass(env);
Magick.Set("DrawableStrokeDashOffset", _Magick_DrawableStrokeDashOffset_ctor);
if (SWIGTYPE_p_Magick__DrawableStrokeDashOffset->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableStrokeDashOffset->clientdata = new size_t(54);
}
Napi::FunctionReference *_Magick_DrawableStrokeDashOffset_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableStrokeDashOffset_ctor_ref = Napi::Persistent(_Magick_DrawableStrokeDashOffset_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[54] = _Magick_DrawableStrokeDashOffset_ctor_ref;
/* Class: DrawableStrokeLineCap (_Magick_DrawableStrokeLineCap) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableStrokeLineCap_ctor = _Magick_DrawableStrokeLineCap_inst::GetClass(env);
Magick.Set("DrawableStrokeLineCap", _Magick_DrawableStrokeLineCap_ctor);
if (SWIGTYPE_p_Magick__DrawableStrokeLineCap->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableStrokeLineCap->clientdata = new size_t(55);
}
Napi::FunctionReference *_Magick_DrawableStrokeLineCap_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableStrokeLineCap_ctor_ref = Napi::Persistent(_Magick_DrawableStrokeLineCap_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[55] = _Magick_DrawableStrokeLineCap_ctor_ref;
/* Class: DrawableStrokeLineJoin (_Magick_DrawableStrokeLineJoin) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableStrokeLineJoin_ctor = _Magick_DrawableStrokeLineJoin_inst::GetClass(env);
Magick.Set("DrawableStrokeLineJoin", _Magick_DrawableStrokeLineJoin_ctor);
if (SWIGTYPE_p_Magick__DrawableStrokeLineJoin->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableStrokeLineJoin->clientdata = new size_t(56);
}
Napi::FunctionReference *_Magick_DrawableStrokeLineJoin_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableStrokeLineJoin_ctor_ref = Napi::Persistent(_Magick_DrawableStrokeLineJoin_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[56] = _Magick_DrawableStrokeLineJoin_ctor_ref;
/* Class: DrawableMiterLimit (_Magick_DrawableMiterLimit) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableMiterLimit_ctor = _Magick_DrawableMiterLimit_inst::GetClass(env);
Magick.Set("DrawableMiterLimit", _Magick_DrawableMiterLimit_ctor);
if (SWIGTYPE_p_Magick__DrawableMiterLimit->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableMiterLimit->clientdata = new size_t(57);
}
Napi::FunctionReference *_Magick_DrawableMiterLimit_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableMiterLimit_ctor_ref = Napi::Persistent(_Magick_DrawableMiterLimit_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[57] = _Magick_DrawableMiterLimit_ctor_ref;
/* Class: DrawableStrokePatternUrl (_Magick_DrawableStrokePatternUrl) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableStrokePatternUrl_ctor = _Magick_DrawableStrokePatternUrl_inst::GetClass(env);
Magick.Set("DrawableStrokePatternUrl", _Magick_DrawableStrokePatternUrl_ctor);
if (SWIGTYPE_p_Magick__DrawableStrokePatternUrl->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableStrokePatternUrl->clientdata = new size_t(58);
}
Napi::FunctionReference *_Magick_DrawableStrokePatternUrl_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableStrokePatternUrl_ctor_ref = Napi::Persistent(_Magick_DrawableStrokePatternUrl_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[58] = _Magick_DrawableStrokePatternUrl_ctor_ref;
/* Class: DrawableStrokeAntialias (_Magick_DrawableStrokeAntialias) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableStrokeAntialias_ctor = _Magick_DrawableStrokeAntialias_inst::GetClass(env);
Magick.Set("DrawableStrokeAntialias", _Magick_DrawableStrokeAntialias_ctor);
if (SWIGTYPE_p_Magick__DrawableStrokeAntialias->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableStrokeAntialias->clientdata = new size_t(59);
}
Napi::FunctionReference *_Magick_DrawableStrokeAntialias_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableStrokeAntialias_ctor_ref = Napi::Persistent(_Magick_DrawableStrokeAntialias_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[59] = _Magick_DrawableStrokeAntialias_ctor_ref;
/* Class: DrawableStrokeColor (_Magick_DrawableStrokeColor) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableStrokeColor_ctor = _Magick_DrawableStrokeColor_inst::GetClass(env);
Magick.Set("DrawableStrokeColor", _Magick_DrawableStrokeColor_ctor);
if (SWIGTYPE_p_Magick__DrawableStrokeColor->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableStrokeColor->clientdata = new size_t(60);
}
Napi::FunctionReference *_Magick_DrawableStrokeColor_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableStrokeColor_ctor_ref = Napi::Persistent(_Magick_DrawableStrokeColor_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[60] = _Magick_DrawableStrokeColor_ctor_ref;
/* Class: DrawableStrokeOpacity (_Magick_DrawableStrokeOpacity) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableStrokeOpacity_ctor = _Magick_DrawableStrokeOpacity_inst::GetClass(env);
Magick.Set("DrawableStrokeOpacity", _Magick_DrawableStrokeOpacity_ctor);
if (SWIGTYPE_p_Magick__DrawableStrokeOpacity->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableStrokeOpacity->clientdata = new size_t(61);
}
Napi::FunctionReference *_Magick_DrawableStrokeOpacity_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableStrokeOpacity_ctor_ref = Napi::Persistent(_Magick_DrawableStrokeOpacity_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[61] = _Magick_DrawableStrokeOpacity_ctor_ref;
/* Class: DrawableStrokeWidth (_Magick_DrawableStrokeWidth) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableStrokeWidth_ctor = _Magick_DrawableStrokeWidth_inst::GetClass(env);
Magick.Set("DrawableStrokeWidth", _Magick_DrawableStrokeWidth_ctor);
if (SWIGTYPE_p_Magick__DrawableStrokeWidth->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableStrokeWidth->clientdata = new size_t(62);
}
Napi::FunctionReference *_Magick_DrawableStrokeWidth_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableStrokeWidth_ctor_ref = Napi::Persistent(_Magick_DrawableStrokeWidth_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[62] = _Magick_DrawableStrokeWidth_ctor_ref;
/* Class: DrawableText (_Magick_DrawableText) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableText_ctor = _Magick_DrawableText_inst::GetClass(env);
Magick.Set("DrawableText", _Magick_DrawableText_ctor);
if (SWIGTYPE_p_Magick__DrawableText->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableText->clientdata = new size_t(63);
}
Napi::FunctionReference *_Magick_DrawableText_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableText_ctor_ref = Napi::Persistent(_Magick_DrawableText_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[63] = _Magick_DrawableText_ctor_ref;
/* Class: DrawableTextAlignment (_Magick_DrawableTextAlignment) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableTextAlignment_ctor = _Magick_DrawableTextAlignment_inst::GetClass(env);
Magick.Set("DrawableTextAlignment", _Magick_DrawableTextAlignment_ctor);
if (SWIGTYPE_p_Magick__DrawableTextAlignment->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableTextAlignment->clientdata = new size_t(64);
}
Napi::FunctionReference *_Magick_DrawableTextAlignment_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableTextAlignment_ctor_ref = Napi::Persistent(_Magick_DrawableTextAlignment_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[64] = _Magick_DrawableTextAlignment_ctor_ref;
/* Class: DrawableTextAntialias (_Magick_DrawableTextAntialias) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableTextAntialias_ctor = _Magick_DrawableTextAntialias_inst::GetClass(env);
Magick.Set("DrawableTextAntialias", _Magick_DrawableTextAntialias_ctor);
if (SWIGTYPE_p_Magick__DrawableTextAntialias->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableTextAntialias->clientdata = new size_t(65);
}
Napi::FunctionReference *_Magick_DrawableTextAntialias_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableTextAntialias_ctor_ref = Napi::Persistent(_Magick_DrawableTextAntialias_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[65] = _Magick_DrawableTextAntialias_ctor_ref;
/* Class: DrawableTextDecoration (_Magick_DrawableTextDecoration) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableTextDecoration_ctor = _Magick_DrawableTextDecoration_inst::GetClass(env);
Magick.Set("DrawableTextDecoration", _Magick_DrawableTextDecoration_ctor);
if (SWIGTYPE_p_Magick__DrawableTextDecoration->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableTextDecoration->clientdata = new size_t(66);
}
Napi::FunctionReference *_Magick_DrawableTextDecoration_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableTextDecoration_ctor_ref = Napi::Persistent(_Magick_DrawableTextDecoration_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[66] = _Magick_DrawableTextDecoration_ctor_ref;
/* Class: DrawableTextDirection (_Magick_DrawableTextDirection) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableTextDirection_ctor = _Magick_DrawableTextDirection_inst::GetClass(env);
Magick.Set("DrawableTextDirection", _Magick_DrawableTextDirection_ctor);
if (SWIGTYPE_p_Magick__DrawableTextDirection->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableTextDirection->clientdata = new size_t(67);
}
Napi::FunctionReference *_Magick_DrawableTextDirection_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableTextDirection_ctor_ref = Napi::Persistent(_Magick_DrawableTextDirection_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[67] = _Magick_DrawableTextDirection_ctor_ref;
/* Class: DrawableTextInterlineSpacing (_Magick_DrawableTextInterlineSpacing) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableTextInterlineSpacing_ctor = _Magick_DrawableTextInterlineSpacing_inst::GetClass(env);
Magick.Set("DrawableTextInterlineSpacing", _Magick_DrawableTextInterlineSpacing_ctor);
if (SWIGTYPE_p_Magick__DrawableTextInterlineSpacing->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableTextInterlineSpacing->clientdata = new size_t(68);
}
Napi::FunctionReference *_Magick_DrawableTextInterlineSpacing_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableTextInterlineSpacing_ctor_ref = Napi::Persistent(_Magick_DrawableTextInterlineSpacing_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[68] = _Magick_DrawableTextInterlineSpacing_ctor_ref;
/* Class: DrawableTextInterwordSpacing (_Magick_DrawableTextInterwordSpacing) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableTextInterwordSpacing_ctor = _Magick_DrawableTextInterwordSpacing_inst::GetClass(env);
Magick.Set("DrawableTextInterwordSpacing", _Magick_DrawableTextInterwordSpacing_ctor);
if (SWIGTYPE_p_Magick__DrawableTextInterwordSpacing->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableTextInterwordSpacing->clientdata = new size_t(69);
}
Napi::FunctionReference *_Magick_DrawableTextInterwordSpacing_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableTextInterwordSpacing_ctor_ref = Napi::Persistent(_Magick_DrawableTextInterwordSpacing_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[69] = _Magick_DrawableTextInterwordSpacing_ctor_ref;
/* Class: DrawableTextKerning (_Magick_DrawableTextKerning) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableTextKerning_ctor = _Magick_DrawableTextKerning_inst::GetClass(env);
Magick.Set("DrawableTextKerning", _Magick_DrawableTextKerning_ctor);
if (SWIGTYPE_p_Magick__DrawableTextKerning->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableTextKerning->clientdata = new size_t(70);
}
Napi::FunctionReference *_Magick_DrawableTextKerning_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableTextKerning_ctor_ref = Napi::Persistent(_Magick_DrawableTextKerning_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[70] = _Magick_DrawableTextKerning_ctor_ref;
/* Class: DrawableTextUnderColor (_Magick_DrawableTextUnderColor) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableTextUnderColor_ctor = _Magick_DrawableTextUnderColor_inst::GetClass(env);
Magick.Set("DrawableTextUnderColor", _Magick_DrawableTextUnderColor_ctor);
if (SWIGTYPE_p_Magick__DrawableTextUnderColor->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableTextUnderColor->clientdata = new size_t(71);
}
Napi::FunctionReference *_Magick_DrawableTextUnderColor_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableTextUnderColor_ctor_ref = Napi::Persistent(_Magick_DrawableTextUnderColor_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[71] = _Magick_DrawableTextUnderColor_ctor_ref;
/* Class: DrawableTranslation (_Magick_DrawableTranslation) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableTranslation_ctor = _Magick_DrawableTranslation_inst::GetClass(env);
Magick.Set("DrawableTranslation", _Magick_DrawableTranslation_ctor);
if (SWIGTYPE_p_Magick__DrawableTranslation->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableTranslation->clientdata = new size_t(72);
}
Napi::FunctionReference *_Magick_DrawableTranslation_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableTranslation_ctor_ref = Napi::Persistent(_Magick_DrawableTranslation_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[72] = _Magick_DrawableTranslation_ctor_ref;
/* Class: DrawableViewbox (_Magick_DrawableViewbox) */
// jsnapi_registerclass
Napi::Function _Magick_DrawableViewbox_ctor = _Magick_DrawableViewbox_inst::GetClass(env);
Magick.Set("DrawableViewbox", _Magick_DrawableViewbox_ctor);
if (SWIGTYPE_p_Magick__DrawableViewbox->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__DrawableViewbox->clientdata = new size_t(73);
}
Napi::FunctionReference *_Magick_DrawableViewbox_ctor_ref = new Napi::FunctionReference();
*_Magick_DrawableViewbox_ctor_ref = Napi::Persistent(_Magick_DrawableViewbox_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[73] = _Magick_DrawableViewbox_ctor_ref;
/* Class: PathArcArgs (_Magick_PathArcArgs) */
// jsnapi_registerclass
Napi::Function _Magick_PathArcArgs_ctor = _Magick_PathArcArgs_inst::GetClass(env);
Magick.Set("PathArcArgs", _Magick_PathArcArgs_ctor);
if (SWIGTYPE_p_Magick__PathArcArgs->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathArcArgs->clientdata = new size_t(74);
}
Napi::FunctionReference *_Magick_PathArcArgs_ctor_ref = new Napi::FunctionReference();
*_Magick_PathArcArgs_ctor_ref = Napi::Persistent(_Magick_PathArcArgs_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[74] = _Magick_PathArcArgs_ctor_ref;
/* Class: PathArcAbs (_Magick_PathArcAbs) */
// jsnapi_registerclass
Napi::Function _Magick_PathArcAbs_ctor = _Magick_PathArcAbs_inst::GetClass(env);
Magick.Set("PathArcAbs", _Magick_PathArcAbs_ctor);
if (SWIGTYPE_p_Magick__PathArcAbs->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathArcAbs->clientdata = new size_t(75);
}
Napi::FunctionReference *_Magick_PathArcAbs_ctor_ref = new Napi::FunctionReference();
*_Magick_PathArcAbs_ctor_ref = Napi::Persistent(_Magick_PathArcAbs_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[75] = _Magick_PathArcAbs_ctor_ref;
/* Class: PathArcRel (_Magick_PathArcRel) */
// jsnapi_registerclass
Napi::Function _Magick_PathArcRel_ctor = _Magick_PathArcRel_inst::GetClass(env);
Magick.Set("PathArcRel", _Magick_PathArcRel_ctor);
if (SWIGTYPE_p_Magick__PathArcRel->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathArcRel->clientdata = new size_t(76);
}
Napi::FunctionReference *_Magick_PathArcRel_ctor_ref = new Napi::FunctionReference();
*_Magick_PathArcRel_ctor_ref = Napi::Persistent(_Magick_PathArcRel_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[76] = _Magick_PathArcRel_ctor_ref;
/* Class: PathClosePath (_Magick_PathClosePath) */
// jsnapi_registerclass
Napi::Function _Magick_PathClosePath_ctor = _Magick_PathClosePath_inst::GetClass(env);
Magick.Set("PathClosePath", _Magick_PathClosePath_ctor);
if (SWIGTYPE_p_Magick__PathClosePath->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathClosePath->clientdata = new size_t(77);
}
Napi::FunctionReference *_Magick_PathClosePath_ctor_ref = new Napi::FunctionReference();
*_Magick_PathClosePath_ctor_ref = Napi::Persistent(_Magick_PathClosePath_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[77] = _Magick_PathClosePath_ctor_ref;
/* Class: PathCurvetoArgs (_Magick_PathCurvetoArgs) */
// jsnapi_registerclass
Napi::Function _Magick_PathCurvetoArgs_ctor = _Magick_PathCurvetoArgs_inst::GetClass(env);
Magick.Set("PathCurvetoArgs", _Magick_PathCurvetoArgs_ctor);
if (SWIGTYPE_p_Magick__PathCurvetoArgs->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathCurvetoArgs->clientdata = new size_t(78);
}
Napi::FunctionReference *_Magick_PathCurvetoArgs_ctor_ref = new Napi::FunctionReference();
*_Magick_PathCurvetoArgs_ctor_ref = Napi::Persistent(_Magick_PathCurvetoArgs_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[78] = _Magick_PathCurvetoArgs_ctor_ref;
/* Class: PathCurvetoAbs (_Magick_PathCurvetoAbs) */
// jsnapi_registerclass
Napi::Function _Magick_PathCurvetoAbs_ctor = _Magick_PathCurvetoAbs_inst::GetClass(env);
Magick.Set("PathCurvetoAbs", _Magick_PathCurvetoAbs_ctor);
if (SWIGTYPE_p_Magick__PathCurvetoAbs->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathCurvetoAbs->clientdata = new size_t(79);
}
Napi::FunctionReference *_Magick_PathCurvetoAbs_ctor_ref = new Napi::FunctionReference();
*_Magick_PathCurvetoAbs_ctor_ref = Napi::Persistent(_Magick_PathCurvetoAbs_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[79] = _Magick_PathCurvetoAbs_ctor_ref;
/* Class: PathCurvetoRel (_Magick_PathCurvetoRel) */
// jsnapi_registerclass
Napi::Function _Magick_PathCurvetoRel_ctor = _Magick_PathCurvetoRel_inst::GetClass(env);
Magick.Set("PathCurvetoRel", _Magick_PathCurvetoRel_ctor);
if (SWIGTYPE_p_Magick__PathCurvetoRel->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathCurvetoRel->clientdata = new size_t(80);
}
Napi::FunctionReference *_Magick_PathCurvetoRel_ctor_ref = new Napi::FunctionReference();
*_Magick_PathCurvetoRel_ctor_ref = Napi::Persistent(_Magick_PathCurvetoRel_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[80] = _Magick_PathCurvetoRel_ctor_ref;
/* Class: PathSmoothCurvetoAbs (_Magick_PathSmoothCurvetoAbs) */
// jsnapi_registerclass
Napi::Function _Magick_PathSmoothCurvetoAbs_ctor = _Magick_PathSmoothCurvetoAbs_inst::GetClass(env);
Magick.Set("PathSmoothCurvetoAbs", _Magick_PathSmoothCurvetoAbs_ctor);
if (SWIGTYPE_p_Magick__PathSmoothCurvetoAbs->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathSmoothCurvetoAbs->clientdata = new size_t(81);
}
Napi::FunctionReference *_Magick_PathSmoothCurvetoAbs_ctor_ref = new Napi::FunctionReference();
*_Magick_PathSmoothCurvetoAbs_ctor_ref = Napi::Persistent(_Magick_PathSmoothCurvetoAbs_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[81] = _Magick_PathSmoothCurvetoAbs_ctor_ref;
/* Class: PathSmoothCurvetoRel (_Magick_PathSmoothCurvetoRel) */
// jsnapi_registerclass
Napi::Function _Magick_PathSmoothCurvetoRel_ctor = _Magick_PathSmoothCurvetoRel_inst::GetClass(env);
Magick.Set("PathSmoothCurvetoRel", _Magick_PathSmoothCurvetoRel_ctor);
if (SWIGTYPE_p_Magick__PathSmoothCurvetoRel->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathSmoothCurvetoRel->clientdata = new size_t(82);
}
Napi::FunctionReference *_Magick_PathSmoothCurvetoRel_ctor_ref = new Napi::FunctionReference();
*_Magick_PathSmoothCurvetoRel_ctor_ref = Napi::Persistent(_Magick_PathSmoothCurvetoRel_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[82] = _Magick_PathSmoothCurvetoRel_ctor_ref;
/* Class: PathQuadraticCurvetoArgs (_Magick_PathQuadraticCurvetoArgs) */
// jsnapi_registerclass
Napi::Function _Magick_PathQuadraticCurvetoArgs_ctor = _Magick_PathQuadraticCurvetoArgs_inst::GetClass(env);
Magick.Set("PathQuadraticCurvetoArgs", _Magick_PathQuadraticCurvetoArgs_ctor);
if (SWIGTYPE_p_Magick__PathQuadraticCurvetoArgs->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathQuadraticCurvetoArgs->clientdata = new size_t(83);
}
Napi::FunctionReference *_Magick_PathQuadraticCurvetoArgs_ctor_ref = new Napi::FunctionReference();
*_Magick_PathQuadraticCurvetoArgs_ctor_ref = Napi::Persistent(_Magick_PathQuadraticCurvetoArgs_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[83] = _Magick_PathQuadraticCurvetoArgs_ctor_ref;
/* Class: PathQuadraticCurvetoAbs (_Magick_PathQuadraticCurvetoAbs) */
// jsnapi_registerclass
Napi::Function _Magick_PathQuadraticCurvetoAbs_ctor = _Magick_PathQuadraticCurvetoAbs_inst::GetClass(env);
Magick.Set("PathQuadraticCurvetoAbs", _Magick_PathQuadraticCurvetoAbs_ctor);
if (SWIGTYPE_p_Magick__PathQuadraticCurvetoAbs->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathQuadraticCurvetoAbs->clientdata = new size_t(84);
}
Napi::FunctionReference *_Magick_PathQuadraticCurvetoAbs_ctor_ref = new Napi::FunctionReference();
*_Magick_PathQuadraticCurvetoAbs_ctor_ref = Napi::Persistent(_Magick_PathQuadraticCurvetoAbs_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[84] = _Magick_PathQuadraticCurvetoAbs_ctor_ref;
/* Class: PathQuadraticCurvetoRel (_Magick_PathQuadraticCurvetoRel) */
// jsnapi_registerclass
Napi::Function _Magick_PathQuadraticCurvetoRel_ctor = _Magick_PathQuadraticCurvetoRel_inst::GetClass(env);
Magick.Set("PathQuadraticCurvetoRel", _Magick_PathQuadraticCurvetoRel_ctor);
if (SWIGTYPE_p_Magick__PathQuadraticCurvetoRel->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathQuadraticCurvetoRel->clientdata = new size_t(85);
}
Napi::FunctionReference *_Magick_PathQuadraticCurvetoRel_ctor_ref = new Napi::FunctionReference();
*_Magick_PathQuadraticCurvetoRel_ctor_ref = Napi::Persistent(_Magick_PathQuadraticCurvetoRel_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[85] = _Magick_PathQuadraticCurvetoRel_ctor_ref;
/* Class: PathSmoothQuadraticCurvetoAbs (_Magick_PathSmoothQuadraticCurvetoAbs) */
// jsnapi_registerclass
Napi::Function _Magick_PathSmoothQuadraticCurvetoAbs_ctor = _Magick_PathSmoothQuadraticCurvetoAbs_inst::GetClass(env);
Magick.Set("PathSmoothQuadraticCurvetoAbs", _Magick_PathSmoothQuadraticCurvetoAbs_ctor);
if (SWIGTYPE_p_Magick__PathSmoothQuadraticCurvetoAbs->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathSmoothQuadraticCurvetoAbs->clientdata = new size_t(86);
}
Napi::FunctionReference *_Magick_PathSmoothQuadraticCurvetoAbs_ctor_ref = new Napi::FunctionReference();
*_Magick_PathSmoothQuadraticCurvetoAbs_ctor_ref = Napi::Persistent(_Magick_PathSmoothQuadraticCurvetoAbs_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[86] = _Magick_PathSmoothQuadraticCurvetoAbs_ctor_ref;
/* Class: PathSmoothQuadraticCurvetoRel (_Magick_PathSmoothQuadraticCurvetoRel) */
// jsnapi_registerclass
Napi::Function _Magick_PathSmoothQuadraticCurvetoRel_ctor = _Magick_PathSmoothQuadraticCurvetoRel_inst::GetClass(env);
Magick.Set("PathSmoothQuadraticCurvetoRel", _Magick_PathSmoothQuadraticCurvetoRel_ctor);
if (SWIGTYPE_p_Magick__PathSmoothQuadraticCurvetoRel->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathSmoothQuadraticCurvetoRel->clientdata = new size_t(87);
}
Napi::FunctionReference *_Magick_PathSmoothQuadraticCurvetoRel_ctor_ref = new Napi::FunctionReference();
*_Magick_PathSmoothQuadraticCurvetoRel_ctor_ref = Napi::Persistent(_Magick_PathSmoothQuadraticCurvetoRel_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[87] = _Magick_PathSmoothQuadraticCurvetoRel_ctor_ref;
/* Class: PathLinetoAbs (_Magick_PathLinetoAbs) */
// jsnapi_registerclass
Napi::Function _Magick_PathLinetoAbs_ctor = _Magick_PathLinetoAbs_inst::GetClass(env);
Magick.Set("PathLinetoAbs", _Magick_PathLinetoAbs_ctor);
if (SWIGTYPE_p_Magick__PathLinetoAbs->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathLinetoAbs->clientdata = new size_t(88);
}
Napi::FunctionReference *_Magick_PathLinetoAbs_ctor_ref = new Napi::FunctionReference();
*_Magick_PathLinetoAbs_ctor_ref = Napi::Persistent(_Magick_PathLinetoAbs_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[88] = _Magick_PathLinetoAbs_ctor_ref;
/* Class: PathLinetoRel (_Magick_PathLinetoRel) */
// jsnapi_registerclass
Napi::Function _Magick_PathLinetoRel_ctor = _Magick_PathLinetoRel_inst::GetClass(env);
Magick.Set("PathLinetoRel", _Magick_PathLinetoRel_ctor);
if (SWIGTYPE_p_Magick__PathLinetoRel->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathLinetoRel->clientdata = new size_t(89);
}
Napi::FunctionReference *_Magick_PathLinetoRel_ctor_ref = new Napi::FunctionReference();
*_Magick_PathLinetoRel_ctor_ref = Napi::Persistent(_Magick_PathLinetoRel_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[89] = _Magick_PathLinetoRel_ctor_ref;
/* Class: PathLinetoHorizontalAbs (_Magick_PathLinetoHorizontalAbs) */
// jsnapi_registerclass
Napi::Function _Magick_PathLinetoHorizontalAbs_ctor = _Magick_PathLinetoHorizontalAbs_inst::GetClass(env);
Magick.Set("PathLinetoHorizontalAbs", _Magick_PathLinetoHorizontalAbs_ctor);
if (SWIGTYPE_p_Magick__PathLinetoHorizontalAbs->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathLinetoHorizontalAbs->clientdata = new size_t(90);
}
Napi::FunctionReference *_Magick_PathLinetoHorizontalAbs_ctor_ref = new Napi::FunctionReference();
*_Magick_PathLinetoHorizontalAbs_ctor_ref = Napi::Persistent(_Magick_PathLinetoHorizontalAbs_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[90] = _Magick_PathLinetoHorizontalAbs_ctor_ref;
/* Class: PathLinetoHorizontalRel (_Magick_PathLinetoHorizontalRel) */
// jsnapi_registerclass
Napi::Function _Magick_PathLinetoHorizontalRel_ctor = _Magick_PathLinetoHorizontalRel_inst::GetClass(env);
Magick.Set("PathLinetoHorizontalRel", _Magick_PathLinetoHorizontalRel_ctor);
if (SWIGTYPE_p_Magick__PathLinetoHorizontalRel->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathLinetoHorizontalRel->clientdata = new size_t(91);
}
Napi::FunctionReference *_Magick_PathLinetoHorizontalRel_ctor_ref = new Napi::FunctionReference();
*_Magick_PathLinetoHorizontalRel_ctor_ref = Napi::Persistent(_Magick_PathLinetoHorizontalRel_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[91] = _Magick_PathLinetoHorizontalRel_ctor_ref;
/* Class: PathLinetoVerticalAbs (_Magick_PathLinetoVerticalAbs) */
// jsnapi_registerclass
Napi::Function _Magick_PathLinetoVerticalAbs_ctor = _Magick_PathLinetoVerticalAbs_inst::GetClass(env);
Magick.Set("PathLinetoVerticalAbs", _Magick_PathLinetoVerticalAbs_ctor);
if (SWIGTYPE_p_Magick__PathLinetoVerticalAbs->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathLinetoVerticalAbs->clientdata = new size_t(92);
}
Napi::FunctionReference *_Magick_PathLinetoVerticalAbs_ctor_ref = new Napi::FunctionReference();
*_Magick_PathLinetoVerticalAbs_ctor_ref = Napi::Persistent(_Magick_PathLinetoVerticalAbs_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[92] = _Magick_PathLinetoVerticalAbs_ctor_ref;
/* Class: PathLinetoVerticalRel (_Magick_PathLinetoVerticalRel) */
// jsnapi_registerclass
Napi::Function _Magick_PathLinetoVerticalRel_ctor = _Magick_PathLinetoVerticalRel_inst::GetClass(env);
Magick.Set("PathLinetoVerticalRel", _Magick_PathLinetoVerticalRel_ctor);
if (SWIGTYPE_p_Magick__PathLinetoVerticalRel->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathLinetoVerticalRel->clientdata = new size_t(93);
}
Napi::FunctionReference *_Magick_PathLinetoVerticalRel_ctor_ref = new Napi::FunctionReference();
*_Magick_PathLinetoVerticalRel_ctor_ref = Napi::Persistent(_Magick_PathLinetoVerticalRel_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[93] = _Magick_PathLinetoVerticalRel_ctor_ref;
/* Class: PathMovetoAbs (_Magick_PathMovetoAbs) */
// jsnapi_registerclass
Napi::Function _Magick_PathMovetoAbs_ctor = _Magick_PathMovetoAbs_inst::GetClass(env);
Magick.Set("PathMovetoAbs", _Magick_PathMovetoAbs_ctor);
if (SWIGTYPE_p_Magick__PathMovetoAbs->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathMovetoAbs->clientdata = new size_t(94);
}
Napi::FunctionReference *_Magick_PathMovetoAbs_ctor_ref = new Napi::FunctionReference();
*_Magick_PathMovetoAbs_ctor_ref = Napi::Persistent(_Magick_PathMovetoAbs_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[94] = _Magick_PathMovetoAbs_ctor_ref;
/* Class: PathMovetoRel (_Magick_PathMovetoRel) */
// jsnapi_registerclass
Napi::Function _Magick_PathMovetoRel_ctor = _Magick_PathMovetoRel_inst::GetClass(env);
Magick.Set("PathMovetoRel", _Magick_PathMovetoRel_ctor);
if (SWIGTYPE_p_Magick__PathMovetoRel->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__PathMovetoRel->clientdata = new size_t(95);
}
Napi::FunctionReference *_Magick_PathMovetoRel_ctor_ref = new Napi::FunctionReference();
*_Magick_PathMovetoRel_ctor_ref = Napi::Persistent(_Magick_PathMovetoRel_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[95] = _Magick_PathMovetoRel_ctor_ref;
/* Class: ErrorPolicy (_Magick_ErrorPolicy) */
// jsnapi_registerclass
Napi::Function _Magick_ErrorPolicy_ctor = _Magick_ErrorPolicy_inst::GetClass(env);
Magick.Set("ErrorPolicy", _Magick_ErrorPolicy_ctor);
if (SWIGTYPE_p_Magick__ErrorPolicy->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__ErrorPolicy->clientdata = new size_t(96);
}
Napi::FunctionReference *_Magick_ErrorPolicy_ctor_ref = new Napi::FunctionReference();
*_Magick_ErrorPolicy_ctor_ref = Napi::Persistent(_Magick_ErrorPolicy_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[96] = _Magick_ErrorPolicy_ctor_ref;
/* Class: ErrorType (_Magick_ErrorType) */
// jsnapi_registerclass
Napi::Function _Magick_ErrorType_ctor = _Magick_ErrorType_inst::GetClass(env);
Magick.Set("ErrorType", _Magick_ErrorType_ctor);
if (SWIGTYPE_p_Magick__ErrorType->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__ErrorType->clientdata = new size_t(97);
}
Napi::FunctionReference *_Magick_ErrorType_ctor_ref = new Napi::FunctionReference();
*_Magick_ErrorType_ctor_ref = Napi::Persistent(_Magick_ErrorType_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[97] = _Magick_ErrorType_ctor_ref;
/* Class: WarningPolicy (_Magick_WarningPolicy) */
// jsnapi_registerclass
Napi::Function _Magick_WarningPolicy_ctor = _Magick_WarningPolicy_inst::GetClass(env);
Magick.Set("WarningPolicy", _Magick_WarningPolicy_ctor);
if (SWIGTYPE_p_Magick__WarningPolicy->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__WarningPolicy->clientdata = new size_t(98);
}
Napi::FunctionReference *_Magick_WarningPolicy_ctor_ref = new Napi::FunctionReference();
*_Magick_WarningPolicy_ctor_ref = Napi::Persistent(_Magick_WarningPolicy_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[98] = _Magick_WarningPolicy_ctor_ref;
/* Class: WarningType (_Magick_WarningType) */
// jsnapi_registerclass
Napi::Function _Magick_WarningType_ctor = _Magick_WarningType_inst::GetClass(env);
Magick.Set("WarningType", _Magick_WarningType_ctor);
if (SWIGTYPE_p_Magick__WarningType->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__WarningType->clientdata = new size_t(99);
}
Napi::FunctionReference *_Magick_WarningType_ctor_ref = new Napi::FunctionReference();
*_Magick_WarningType_ctor_ref = Napi::Persistent(_Magick_WarningType_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[99] = _Magick_WarningType_ctor_ref;
/* Class: ChannelMoments (_Magick_ChannelMoments) */
// jsnapi_registerclass
Napi::Function _Magick_ChannelMoments_ctor = _Magick_ChannelMoments_inst::GetClass(env);
Magick.Set("ChannelMoments", _Magick_ChannelMoments_ctor);
if (SWIGTYPE_p_Magick__ChannelMoments->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__ChannelMoments->clientdata = new size_t(100);
}
Napi::FunctionReference *_Magick_ChannelMoments_ctor_ref = new Napi::FunctionReference();
*_Magick_ChannelMoments_ctor_ref = Napi::Persistent(_Magick_ChannelMoments_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[100] = _Magick_ChannelMoments_ctor_ref;
/* Class: ChannelPerceptualHash (_Magick_ChannelPerceptualHash) */
// jsnapi_registerclass
Napi::Function _Magick_ChannelPerceptualHash_ctor = _Magick_ChannelPerceptualHash_inst::GetClass(env);
Magick.Set("ChannelPerceptualHash", _Magick_ChannelPerceptualHash_ctor);
if (SWIGTYPE_p_Magick__ChannelPerceptualHash->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__ChannelPerceptualHash->clientdata = new size_t(101);
}
Napi::FunctionReference *_Magick_ChannelPerceptualHash_ctor_ref = new Napi::FunctionReference();
*_Magick_ChannelPerceptualHash_ctor_ref = Napi::Persistent(_Magick_ChannelPerceptualHash_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[101] = _Magick_ChannelPerceptualHash_ctor_ref;
/* Class: ChannelStatistics (_Magick_ChannelStatistics) */
// jsnapi_registerclass
Napi::Function _Magick_ChannelStatistics_ctor = _Magick_ChannelStatistics_inst::GetClass(env);
Magick.Set("ChannelStatistics", _Magick_ChannelStatistics_ctor);
if (SWIGTYPE_p_Magick__ChannelStatistics->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__ChannelStatistics->clientdata = new size_t(102);
}
Napi::FunctionReference *_Magick_ChannelStatistics_ctor_ref = new Napi::FunctionReference();
*_Magick_ChannelStatistics_ctor_ref = Napi::Persistent(_Magick_ChannelStatistics_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[102] = _Magick_ChannelStatistics_ctor_ref;
/* Class: ImageMoments (_Magick_ImageMoments) */
// jsnapi_registerclass
Napi::Function _Magick_ImageMoments_ctor = _Magick_ImageMoments_inst::GetClass(env);
Magick.Set("ImageMoments", _Magick_ImageMoments_ctor);
if (SWIGTYPE_p_Magick__ImageMoments->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__ImageMoments->clientdata = new size_t(103);
}
Napi::FunctionReference *_Magick_ImageMoments_ctor_ref = new Napi::FunctionReference();
*_Magick_ImageMoments_ctor_ref = Napi::Persistent(_Magick_ImageMoments_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[103] = _Magick_ImageMoments_ctor_ref;
/* Class: ImagePerceptualHash (_Magick_ImagePerceptualHash) */
// jsnapi_registerclass
Napi::Function _Magick_ImagePerceptualHash_ctor = _Magick_ImagePerceptualHash_inst::GetClass(env);
Magick.Set("ImagePerceptualHash", _Magick_ImagePerceptualHash_ctor);
if (SWIGTYPE_p_Magick__ImagePerceptualHash->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__ImagePerceptualHash->clientdata = new size_t(104);
}
Napi::FunctionReference *_Magick_ImagePerceptualHash_ctor_ref = new Napi::FunctionReference();
*_Magick_ImagePerceptualHash_ctor_ref = Napi::Persistent(_Magick_ImagePerceptualHash_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[104] = _Magick_ImagePerceptualHash_ctor_ref;
/* Class: ImageStatistics (_Magick_ImageStatistics) */
// jsnapi_registerclass
Napi::Function _Magick_ImageStatistics_ctor = _Magick_ImageStatistics_inst::GetClass(env);
Magick.Set("ImageStatistics", _Magick_ImageStatistics_ctor);
if (SWIGTYPE_p_Magick__ImageStatistics->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__ImageStatistics->clientdata = new size_t(105);
}
Napi::FunctionReference *_Magick_ImageStatistics_ctor_ref = new Napi::FunctionReference();
*_Magick_ImageStatistics_ctor_ref = Napi::Persistent(_Magick_ImageStatistics_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[105] = _Magick_ImageStatistics_ctor_ref;
/* Class: TypeMetric (_Magick_TypeMetric) */
// jsnapi_registerclass
Napi::Function _Magick_TypeMetric_ctor = _Magick_TypeMetric_inst::GetClass(env);
Magick.Set("TypeMetric", _Magick_TypeMetric_ctor);
if (SWIGTYPE_p_Magick__TypeMetric->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__TypeMetric->clientdata = new size_t(106);
}
Napi::FunctionReference *_Magick_TypeMetric_ctor_ref = new Napi::FunctionReference();
*_Magick_TypeMetric_ctor_ref = Napi::Persistent(_Magick_TypeMetric_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[106] = _Magick_TypeMetric_ctor_ref;
/* Class: Image (_Magick_Image) */
// jsnapi_registerclass
Napi::Function _Magick_Image_ctor = _Magick_Image_inst::GetClass(env);
Magick.Set("Image", _Magick_Image_ctor);
if (SWIGTYPE_p_Magick__Image->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__Image->clientdata = new size_t(107);
}
Napi::FunctionReference *_Magick_Image_ctor_ref = new Napi::FunctionReference();
*_Magick_Image_ctor_ref = Napi::Persistent(_Magick_Image_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[107] = _Magick_Image_ctor_ref;
/* Class: ResourceLimits (_Magick_ResourceLimits) */
// jsnapi_registerclass
Napi::Function _Magick_ResourceLimits_ctor = _Magick_ResourceLimits_inst::GetClass(env);
Magick.Set("ResourceLimits", _Magick_ResourceLimits_ctor);
if (SWIGTYPE_p_Magick__ResourceLimits->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__ResourceLimits->clientdata = new size_t(108);
}
Napi::FunctionReference *_Magick_ResourceLimits_ctor_ref = new Napi::FunctionReference();
*_Magick_ResourceLimits_ctor_ref = Napi::Persistent(_Magick_ResourceLimits_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[108] = _Magick_ResourceLimits_ctor_ref;
/* Class: CoderInfo (_Magick_CoderInfo) */
// jsnapi_registerclass
Napi::Function _Magick_CoderInfo_ctor = _Magick_CoderInfo_inst::GetClass(env);
Magick.Set("CoderInfo", _Magick_CoderInfo_ctor);
if (SWIGTYPE_p_Magick__CoderInfo->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__CoderInfo->clientdata = new size_t(109);
}
Napi::FunctionReference *_Magick_CoderInfo_ctor_ref = new Napi::FunctionReference();
*_Magick_CoderInfo_ctor_ref = Napi::Persistent(_Magick_CoderInfo_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[109] = _Magick_CoderInfo_ctor_ref;
/* Class: Montage (_Magick_Montage) */
// jsnapi_registerclass
Napi::Function _Magick_Montage_ctor = _Magick_Montage_inst::GetClass(env);
Magick.Set("Montage", _Magick_Montage_ctor);
if (SWIGTYPE_p_Magick__Montage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__Montage->clientdata = new size_t(110);
}
Napi::FunctionReference *_Magick_Montage_ctor_ref = new Napi::FunctionReference();
*_Magick_Montage_ctor_ref = Napi::Persistent(_Magick_Montage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[110] = _Magick_Montage_ctor_ref;
/* Class: MontageFramed (_Magick_MontageFramed) */
// jsnapi_registerclass
Napi::Function _Magick_MontageFramed_ctor = _Magick_MontageFramed_inst::GetClass(env);
Magick.Set("MontageFramed", _Magick_MontageFramed_ctor);
if (SWIGTYPE_p_Magick__MontageFramed->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__MontageFramed->clientdata = new size_t(111);
}
Napi::FunctionReference *_Magick_MontageFramed_ctor_ref = new Napi::FunctionReference();
*_Magick_MontageFramed_ctor_ref = Napi::Persistent(_Magick_MontageFramed_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[111] = _Magick_MontageFramed_ctor_ref;
/* Class: adaptiveBlurImage (_Magick_adaptiveBlurImage) */
// jsnapi_registerclass
Napi::Function _Magick_adaptiveBlurImage_ctor = _Magick_adaptiveBlurImage_inst::GetClass(env);
Magick.Set("adaptiveBlurImage", _Magick_adaptiveBlurImage_ctor);
if (SWIGTYPE_p_Magick__adaptiveBlurImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__adaptiveBlurImage->clientdata = new size_t(112);
}
Napi::FunctionReference *_Magick_adaptiveBlurImage_ctor_ref = new Napi::FunctionReference();
*_Magick_adaptiveBlurImage_ctor_ref = Napi::Persistent(_Magick_adaptiveBlurImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[112] = _Magick_adaptiveBlurImage_ctor_ref;
/* Class: adaptiveThresholdImage (_Magick_adaptiveThresholdImage) */
// jsnapi_registerclass
Napi::Function _Magick_adaptiveThresholdImage_ctor = _Magick_adaptiveThresholdImage_inst::GetClass(env);
Magick.Set("adaptiveThresholdImage", _Magick_adaptiveThresholdImage_ctor);
if (SWIGTYPE_p_Magick__adaptiveThresholdImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__adaptiveThresholdImage->clientdata = new size_t(113);
}
Napi::FunctionReference *_Magick_adaptiveThresholdImage_ctor_ref = new Napi::FunctionReference();
*_Magick_adaptiveThresholdImage_ctor_ref = Napi::Persistent(_Magick_adaptiveThresholdImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[113] = _Magick_adaptiveThresholdImage_ctor_ref;
/* Class: addNoiseImage (_Magick_addNoiseImage) */
// jsnapi_registerclass
Napi::Function _Magick_addNoiseImage_ctor = _Magick_addNoiseImage_inst::GetClass(env);
Magick.Set("addNoiseImage", _Magick_addNoiseImage_ctor);
if (SWIGTYPE_p_Magick__addNoiseImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__addNoiseImage->clientdata = new size_t(114);
}
Napi::FunctionReference *_Magick_addNoiseImage_ctor_ref = new Napi::FunctionReference();
*_Magick_addNoiseImage_ctor_ref = Napi::Persistent(_Magick_addNoiseImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[114] = _Magick_addNoiseImage_ctor_ref;
/* Class: affineTransformImage (_Magick_affineTransformImage) */
// jsnapi_registerclass
Napi::Function _Magick_affineTransformImage_ctor = _Magick_affineTransformImage_inst::GetClass(env);
Magick.Set("affineTransformImage", _Magick_affineTransformImage_ctor);
if (SWIGTYPE_p_Magick__affineTransformImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__affineTransformImage->clientdata = new size_t(115);
}
Napi::FunctionReference *_Magick_affineTransformImage_ctor_ref = new Napi::FunctionReference();
*_Magick_affineTransformImage_ctor_ref = Napi::Persistent(_Magick_affineTransformImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[115] = _Magick_affineTransformImage_ctor_ref;
/* Class: annotateImage (_Magick_annotateImage) */
// jsnapi_registerclass
Napi::Function _Magick_annotateImage_ctor = _Magick_annotateImage_inst::GetClass(env);
Magick.Set("annotateImage", _Magick_annotateImage_ctor);
if (SWIGTYPE_p_Magick__annotateImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__annotateImage->clientdata = new size_t(116);
}
Napi::FunctionReference *_Magick_annotateImage_ctor_ref = new Napi::FunctionReference();
*_Magick_annotateImage_ctor_ref = Napi::Persistent(_Magick_annotateImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[116] = _Magick_annotateImage_ctor_ref;
/* Class: blurImage (_Magick_blurImage) */
// jsnapi_registerclass
Napi::Function _Magick_blurImage_ctor = _Magick_blurImage_inst::GetClass(env);
Magick.Set("blurImage", _Magick_blurImage_ctor);
if (SWIGTYPE_p_Magick__blurImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__blurImage->clientdata = new size_t(117);
}
Napi::FunctionReference *_Magick_blurImage_ctor_ref = new Napi::FunctionReference();
*_Magick_blurImage_ctor_ref = Napi::Persistent(_Magick_blurImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[117] = _Magick_blurImage_ctor_ref;
/* Class: borderImage (_Magick_borderImage) */
// jsnapi_registerclass
Napi::Function _Magick_borderImage_ctor = _Magick_borderImage_inst::GetClass(env);
Magick.Set("borderImage", _Magick_borderImage_ctor);
if (SWIGTYPE_p_Magick__borderImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__borderImage->clientdata = new size_t(118);
}
Napi::FunctionReference *_Magick_borderImage_ctor_ref = new Napi::FunctionReference();
*_Magick_borderImage_ctor_ref = Napi::Persistent(_Magick_borderImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[118] = _Magick_borderImage_ctor_ref;
/* Class: channelImage (_Magick_channelImage) */
// jsnapi_registerclass
Napi::Function _Magick_channelImage_ctor = _Magick_channelImage_inst::GetClass(env);
Magick.Set("channelImage", _Magick_channelImage_ctor);
if (SWIGTYPE_p_Magick__channelImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__channelImage->clientdata = new size_t(119);
}
Napi::FunctionReference *_Magick_channelImage_ctor_ref = new Napi::FunctionReference();
*_Magick_channelImage_ctor_ref = Napi::Persistent(_Magick_channelImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[119] = _Magick_channelImage_ctor_ref;
/* Class: charcoalImage (_Magick_charcoalImage) */
// jsnapi_registerclass
Napi::Function _Magick_charcoalImage_ctor = _Magick_charcoalImage_inst::GetClass(env);
Magick.Set("charcoalImage", _Magick_charcoalImage_ctor);
if (SWIGTYPE_p_Magick__charcoalImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__charcoalImage->clientdata = new size_t(120);
}
Napi::FunctionReference *_Magick_charcoalImage_ctor_ref = new Napi::FunctionReference();
*_Magick_charcoalImage_ctor_ref = Napi::Persistent(_Magick_charcoalImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[120] = _Magick_charcoalImage_ctor_ref;
/* Class: chopImage (_Magick_chopImage) */
// jsnapi_registerclass
Napi::Function _Magick_chopImage_ctor = _Magick_chopImage_inst::GetClass(env);
Magick.Set("chopImage", _Magick_chopImage_ctor);
if (SWIGTYPE_p_Magick__chopImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__chopImage->clientdata = new size_t(121);
}
Napi::FunctionReference *_Magick_chopImage_ctor_ref = new Napi::FunctionReference();
*_Magick_chopImage_ctor_ref = Napi::Persistent(_Magick_chopImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[121] = _Magick_chopImage_ctor_ref;
/* Class: cdlImage (_Magick_cdlImage) */
// jsnapi_registerclass
Napi::Function _Magick_cdlImage_ctor = _Magick_cdlImage_inst::GetClass(env);
Magick.Set("cdlImage", _Magick_cdlImage_ctor);
if (SWIGTYPE_p_Magick__cdlImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__cdlImage->clientdata = new size_t(122);
}
Napi::FunctionReference *_Magick_cdlImage_ctor_ref = new Napi::FunctionReference();
*_Magick_cdlImage_ctor_ref = Napi::Persistent(_Magick_cdlImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[122] = _Magick_cdlImage_ctor_ref;
/* Class: colorizeImage (_Magick_colorizeImage) */
// jsnapi_registerclass
Napi::Function _Magick_colorizeImage_ctor = _Magick_colorizeImage_inst::GetClass(env);
Magick.Set("colorizeImage", _Magick_colorizeImage_ctor);
if (SWIGTYPE_p_Magick__colorizeImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__colorizeImage->clientdata = new size_t(123);
}
Napi::FunctionReference *_Magick_colorizeImage_ctor_ref = new Napi::FunctionReference();
*_Magick_colorizeImage_ctor_ref = Napi::Persistent(_Magick_colorizeImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[123] = _Magick_colorizeImage_ctor_ref;
/* Class: colorMatrixImage (_Magick_colorMatrixImage) */
// jsnapi_registerclass
Napi::Function _Magick_colorMatrixImage_ctor = _Magick_colorMatrixImage_inst::GetClass(env);
Magick.Set("colorMatrixImage", _Magick_colorMatrixImage_ctor);
if (SWIGTYPE_p_Magick__colorMatrixImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__colorMatrixImage->clientdata = new size_t(124);
}
Napi::FunctionReference *_Magick_colorMatrixImage_ctor_ref = new Napi::FunctionReference();
*_Magick_colorMatrixImage_ctor_ref = Napi::Persistent(_Magick_colorMatrixImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[124] = _Magick_colorMatrixImage_ctor_ref;
/* Class: colorSpaceImage (_Magick_colorSpaceImage) */
// jsnapi_registerclass
Napi::Function _Magick_colorSpaceImage_ctor = _Magick_colorSpaceImage_inst::GetClass(env);
Magick.Set("colorSpaceImage", _Magick_colorSpaceImage_ctor);
if (SWIGTYPE_p_Magick__colorSpaceImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__colorSpaceImage->clientdata = new size_t(125);
}
Napi::FunctionReference *_Magick_colorSpaceImage_ctor_ref = new Napi::FunctionReference();
*_Magick_colorSpaceImage_ctor_ref = Napi::Persistent(_Magick_colorSpaceImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[125] = _Magick_colorSpaceImage_ctor_ref;
/* Class: commentImage (_Magick_commentImage) */
// jsnapi_registerclass
Napi::Function _Magick_commentImage_ctor = _Magick_commentImage_inst::GetClass(env);
Magick.Set("commentImage", _Magick_commentImage_ctor);
if (SWIGTYPE_p_Magick__commentImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__commentImage->clientdata = new size_t(126);
}
Napi::FunctionReference *_Magick_commentImage_ctor_ref = new Napi::FunctionReference();
*_Magick_commentImage_ctor_ref = Napi::Persistent(_Magick_commentImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[126] = _Magick_commentImage_ctor_ref;
/* Class: compositeImage (_Magick_compositeImage) */
// jsnapi_registerclass
Napi::Function _Magick_compositeImage_ctor = _Magick_compositeImage_inst::GetClass(env);
Magick.Set("compositeImage", _Magick_compositeImage_ctor);
if (SWIGTYPE_p_Magick__compositeImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__compositeImage->clientdata = new size_t(127);
}
Napi::FunctionReference *_Magick_compositeImage_ctor_ref = new Napi::FunctionReference();
*_Magick_compositeImage_ctor_ref = Napi::Persistent(_Magick_compositeImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[127] = _Magick_compositeImage_ctor_ref;
/* Class: contrastImage (_Magick_contrastImage) */
// jsnapi_registerclass
Napi::Function _Magick_contrastImage_ctor = _Magick_contrastImage_inst::GetClass(env);
Magick.Set("contrastImage", _Magick_contrastImage_ctor);
if (SWIGTYPE_p_Magick__contrastImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__contrastImage->clientdata = new size_t(128);
}
Napi::FunctionReference *_Magick_contrastImage_ctor_ref = new Napi::FunctionReference();
*_Magick_contrastImage_ctor_ref = Napi::Persistent(_Magick_contrastImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[128] = _Magick_contrastImage_ctor_ref;
/* Class: cropImage (_Magick_cropImage) */
// jsnapi_registerclass
Napi::Function _Magick_cropImage_ctor = _Magick_cropImage_inst::GetClass(env);
Magick.Set("cropImage", _Magick_cropImage_ctor);
if (SWIGTYPE_p_Magick__cropImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__cropImage->clientdata = new size_t(129);
}
Napi::FunctionReference *_Magick_cropImage_ctor_ref = new Napi::FunctionReference();
*_Magick_cropImage_ctor_ref = Napi::Persistent(_Magick_cropImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[129] = _Magick_cropImage_ctor_ref;
/* Class: cycleColormapImage (_Magick_cycleColormapImage) */
// jsnapi_registerclass
Napi::Function _Magick_cycleColormapImage_ctor = _Magick_cycleColormapImage_inst::GetClass(env);
Magick.Set("cycleColormapImage", _Magick_cycleColormapImage_ctor);
if (SWIGTYPE_p_Magick__cycleColormapImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__cycleColormapImage->clientdata = new size_t(130);
}
Napi::FunctionReference *_Magick_cycleColormapImage_ctor_ref = new Napi::FunctionReference();
*_Magick_cycleColormapImage_ctor_ref = Napi::Persistent(_Magick_cycleColormapImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[130] = _Magick_cycleColormapImage_ctor_ref;
/* Class: despeckleImage (_Magick_despeckleImage) */
// jsnapi_registerclass
Napi::Function _Magick_despeckleImage_ctor = _Magick_despeckleImage_inst::GetClass(env);
Magick.Set("despeckleImage", _Magick_despeckleImage_ctor);
if (SWIGTYPE_p_Magick__despeckleImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__despeckleImage->clientdata = new size_t(131);
}
Napi::FunctionReference *_Magick_despeckleImage_ctor_ref = new Napi::FunctionReference();
*_Magick_despeckleImage_ctor_ref = Napi::Persistent(_Magick_despeckleImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[131] = _Magick_despeckleImage_ctor_ref;
/* Class: distortImage (_Magick_distortImage) */
// jsnapi_registerclass
Napi::Function _Magick_distortImage_ctor = _Magick_distortImage_inst::GetClass(env);
Magick.Set("distortImage", _Magick_distortImage_ctor);
if (SWIGTYPE_p_Magick__distortImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__distortImage->clientdata = new size_t(132);
}
Napi::FunctionReference *_Magick_distortImage_ctor_ref = new Napi::FunctionReference();
*_Magick_distortImage_ctor_ref = Napi::Persistent(_Magick_distortImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[132] = _Magick_distortImage_ctor_ref;
/* Class: drawImage (_Magick_drawImage) */
// jsnapi_registerclass
Napi::Function _Magick_drawImage_ctor = _Magick_drawImage_inst::GetClass(env);
Magick.Set("drawImage", _Magick_drawImage_ctor);
if (SWIGTYPE_p_Magick__drawImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__drawImage->clientdata = new size_t(133);
}
Napi::FunctionReference *_Magick_drawImage_ctor_ref = new Napi::FunctionReference();
*_Magick_drawImage_ctor_ref = Napi::Persistent(_Magick_drawImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[133] = _Magick_drawImage_ctor_ref;
/* Class: edgeImage (_Magick_edgeImage) */
// jsnapi_registerclass
Napi::Function _Magick_edgeImage_ctor = _Magick_edgeImage_inst::GetClass(env);
Magick.Set("edgeImage", _Magick_edgeImage_ctor);
if (SWIGTYPE_p_Magick__edgeImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__edgeImage->clientdata = new size_t(134);
}
Napi::FunctionReference *_Magick_edgeImage_ctor_ref = new Napi::FunctionReference();
*_Magick_edgeImage_ctor_ref = Napi::Persistent(_Magick_edgeImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[134] = _Magick_edgeImage_ctor_ref;
/* Class: embossImage (_Magick_embossImage) */
// jsnapi_registerclass
Napi::Function _Magick_embossImage_ctor = _Magick_embossImage_inst::GetClass(env);
Magick.Set("embossImage", _Magick_embossImage_ctor);
if (SWIGTYPE_p_Magick__embossImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__embossImage->clientdata = new size_t(135);
}
Napi::FunctionReference *_Magick_embossImage_ctor_ref = new Napi::FunctionReference();
*_Magick_embossImage_ctor_ref = Napi::Persistent(_Magick_embossImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[135] = _Magick_embossImage_ctor_ref;
/* Class: enhanceImage (_Magick_enhanceImage) */
// jsnapi_registerclass
Napi::Function _Magick_enhanceImage_ctor = _Magick_enhanceImage_inst::GetClass(env);
Magick.Set("enhanceImage", _Magick_enhanceImage_ctor);
if (SWIGTYPE_p_Magick__enhanceImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__enhanceImage->clientdata = new size_t(136);
}
Napi::FunctionReference *_Magick_enhanceImage_ctor_ref = new Napi::FunctionReference();
*_Magick_enhanceImage_ctor_ref = Napi::Persistent(_Magick_enhanceImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[136] = _Magick_enhanceImage_ctor_ref;
/* Class: equalizeImage (_Magick_equalizeImage) */
// jsnapi_registerclass
Napi::Function _Magick_equalizeImage_ctor = _Magick_equalizeImage_inst::GetClass(env);
Magick.Set("equalizeImage", _Magick_equalizeImage_ctor);
if (SWIGTYPE_p_Magick__equalizeImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__equalizeImage->clientdata = new size_t(137);
}
Napi::FunctionReference *_Magick_equalizeImage_ctor_ref = new Napi::FunctionReference();
*_Magick_equalizeImage_ctor_ref = Napi::Persistent(_Magick_equalizeImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[137] = _Magick_equalizeImage_ctor_ref;
/* Class: fillColorImage (_Magick_fillColorImage) */
// jsnapi_registerclass
Napi::Function _Magick_fillColorImage_ctor = _Magick_fillColorImage_inst::GetClass(env);
Magick.Set("fillColorImage", _Magick_fillColorImage_ctor);
if (SWIGTYPE_p_Magick__fillColorImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__fillColorImage->clientdata = new size_t(138);
}
Napi::FunctionReference *_Magick_fillColorImage_ctor_ref = new Napi::FunctionReference();
*_Magick_fillColorImage_ctor_ref = Napi::Persistent(_Magick_fillColorImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[138] = _Magick_fillColorImage_ctor_ref;
/* Class: flipImage (_Magick_flipImage) */
// jsnapi_registerclass
Napi::Function _Magick_flipImage_ctor = _Magick_flipImage_inst::GetClass(env);
Magick.Set("flipImage", _Magick_flipImage_ctor);
if (SWIGTYPE_p_Magick__flipImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__flipImage->clientdata = new size_t(139);
}
Napi::FunctionReference *_Magick_flipImage_ctor_ref = new Napi::FunctionReference();
*_Magick_flipImage_ctor_ref = Napi::Persistent(_Magick_flipImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[139] = _Magick_flipImage_ctor_ref;
/* Class: floodFillAlphaImage (_Magick_floodFillAlphaImage) */
// jsnapi_registerclass
Napi::Function _Magick_floodFillAlphaImage_ctor = _Magick_floodFillAlphaImage_inst::GetClass(env);
Magick.Set("floodFillAlphaImage", _Magick_floodFillAlphaImage_ctor);
if (SWIGTYPE_p_Magick__floodFillAlphaImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__floodFillAlphaImage->clientdata = new size_t(140);
}
Napi::FunctionReference *_Magick_floodFillAlphaImage_ctor_ref = new Napi::FunctionReference();
*_Magick_floodFillAlphaImage_ctor_ref = Napi::Persistent(_Magick_floodFillAlphaImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[140] = _Magick_floodFillAlphaImage_ctor_ref;
/* Class: floodFillColorImage (_Magick_floodFillColorImage) */
// jsnapi_registerclass
Napi::Function _Magick_floodFillColorImage_ctor = _Magick_floodFillColorImage_inst::GetClass(env);
Magick.Set("floodFillColorImage", _Magick_floodFillColorImage_ctor);
if (SWIGTYPE_p_Magick__floodFillColorImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__floodFillColorImage->clientdata = new size_t(141);
}
Napi::FunctionReference *_Magick_floodFillColorImage_ctor_ref = new Napi::FunctionReference();
*_Magick_floodFillColorImage_ctor_ref = Napi::Persistent(_Magick_floodFillColorImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[141] = _Magick_floodFillColorImage_ctor_ref;
/* Class: floodFillTextureImage (_Magick_floodFillTextureImage) */
// jsnapi_registerclass
Napi::Function _Magick_floodFillTextureImage_ctor = _Magick_floodFillTextureImage_inst::GetClass(env);
Magick.Set("floodFillTextureImage", _Magick_floodFillTextureImage_ctor);
if (SWIGTYPE_p_Magick__floodFillTextureImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__floodFillTextureImage->clientdata = new size_t(142);
}
Napi::FunctionReference *_Magick_floodFillTextureImage_ctor_ref = new Napi::FunctionReference();
*_Magick_floodFillTextureImage_ctor_ref = Napi::Persistent(_Magick_floodFillTextureImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[142] = _Magick_floodFillTextureImage_ctor_ref;
/* Class: flopImage (_Magick_flopImage) */
// jsnapi_registerclass
Napi::Function _Magick_flopImage_ctor = _Magick_flopImage_inst::GetClass(env);
Magick.Set("flopImage", _Magick_flopImage_ctor);
if (SWIGTYPE_p_Magick__flopImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__flopImage->clientdata = new size_t(143);
}
Napi::FunctionReference *_Magick_flopImage_ctor_ref = new Napi::FunctionReference();
*_Magick_flopImage_ctor_ref = Napi::Persistent(_Magick_flopImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[143] = _Magick_flopImage_ctor_ref;
/* Class: frameImage (_Magick_frameImage) */
// jsnapi_registerclass
Napi::Function _Magick_frameImage_ctor = _Magick_frameImage_inst::GetClass(env);
Magick.Set("frameImage", _Magick_frameImage_ctor);
if (SWIGTYPE_p_Magick__frameImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__frameImage->clientdata = new size_t(144);
}
Napi::FunctionReference *_Magick_frameImage_ctor_ref = new Napi::FunctionReference();
*_Magick_frameImage_ctor_ref = Napi::Persistent(_Magick_frameImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[144] = _Magick_frameImage_ctor_ref;
/* Class: gammaImage (_Magick_gammaImage) */
// jsnapi_registerclass
Napi::Function _Magick_gammaImage_ctor = _Magick_gammaImage_inst::GetClass(env);
Magick.Set("gammaImage", _Magick_gammaImage_ctor);
if (SWIGTYPE_p_Magick__gammaImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__gammaImage->clientdata = new size_t(145);
}
Napi::FunctionReference *_Magick_gammaImage_ctor_ref = new Napi::FunctionReference();
*_Magick_gammaImage_ctor_ref = Napi::Persistent(_Magick_gammaImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[145] = _Magick_gammaImage_ctor_ref;
/* Class: gaussianBlurImage (_Magick_gaussianBlurImage) */
// jsnapi_registerclass
Napi::Function _Magick_gaussianBlurImage_ctor = _Magick_gaussianBlurImage_inst::GetClass(env);
Magick.Set("gaussianBlurImage", _Magick_gaussianBlurImage_ctor);
if (SWIGTYPE_p_Magick__gaussianBlurImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__gaussianBlurImage->clientdata = new size_t(146);
}
Napi::FunctionReference *_Magick_gaussianBlurImage_ctor_ref = new Napi::FunctionReference();
*_Magick_gaussianBlurImage_ctor_ref = Napi::Persistent(_Magick_gaussianBlurImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[146] = _Magick_gaussianBlurImage_ctor_ref;
/* Class: haldClutImage (_Magick_haldClutImage) */
// jsnapi_registerclass
Napi::Function _Magick_haldClutImage_ctor = _Magick_haldClutImage_inst::GetClass(env);
Magick.Set("haldClutImage", _Magick_haldClutImage_ctor);
if (SWIGTYPE_p_Magick__haldClutImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__haldClutImage->clientdata = new size_t(147);
}
Napi::FunctionReference *_Magick_haldClutImage_ctor_ref = new Napi::FunctionReference();
*_Magick_haldClutImage_ctor_ref = Napi::Persistent(_Magick_haldClutImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[147] = _Magick_haldClutImage_ctor_ref;
/* Class: implodeImage (_Magick_implodeImage) */
// jsnapi_registerclass
Napi::Function _Magick_implodeImage_ctor = _Magick_implodeImage_inst::GetClass(env);
Magick.Set("implodeImage", _Magick_implodeImage_ctor);
if (SWIGTYPE_p_Magick__implodeImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__implodeImage->clientdata = new size_t(148);
}
Napi::FunctionReference *_Magick_implodeImage_ctor_ref = new Napi::FunctionReference();
*_Magick_implodeImage_ctor_ref = Napi::Persistent(_Magick_implodeImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[148] = _Magick_implodeImage_ctor_ref;
/* Class: inverseFourierTransformImage (_Magick_inverseFourierTransformImage) */
// jsnapi_registerclass
Napi::Function _Magick_inverseFourierTransformImage_ctor = _Magick_inverseFourierTransformImage_inst::GetClass(env);
Magick.Set("inverseFourierTransformImage", _Magick_inverseFourierTransformImage_ctor);
if (SWIGTYPE_p_Magick__inverseFourierTransformImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__inverseFourierTransformImage->clientdata = new size_t(149);
}
Napi::FunctionReference *_Magick_inverseFourierTransformImage_ctor_ref = new Napi::FunctionReference();
*_Magick_inverseFourierTransformImage_ctor_ref = Napi::Persistent(_Magick_inverseFourierTransformImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[149] = _Magick_inverseFourierTransformImage_ctor_ref;
/* Class: isValidImage (_Magick_isValidImage) */
// jsnapi_registerclass
Napi::Function _Magick_isValidImage_ctor = _Magick_isValidImage_inst::GetClass(env);
Magick.Set("isValidImage", _Magick_isValidImage_ctor);
if (SWIGTYPE_p_Magick__isValidImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__isValidImage->clientdata = new size_t(150);
}
Napi::FunctionReference *_Magick_isValidImage_ctor_ref = new Napi::FunctionReference();
*_Magick_isValidImage_ctor_ref = Napi::Persistent(_Magick_isValidImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[150] = _Magick_isValidImage_ctor_ref;
/* Class: labelImage (_Magick_labelImage) */
// jsnapi_registerclass
Napi::Function _Magick_labelImage_ctor = _Magick_labelImage_inst::GetClass(env);
Magick.Set("labelImage", _Magick_labelImage_ctor);
if (SWIGTYPE_p_Magick__labelImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__labelImage->clientdata = new size_t(151);
}
Napi::FunctionReference *_Magick_labelImage_ctor_ref = new Napi::FunctionReference();
*_Magick_labelImage_ctor_ref = Napi::Persistent(_Magick_labelImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[151] = _Magick_labelImage_ctor_ref;
/* Class: levelImage (_Magick_levelImage) */
// jsnapi_registerclass
Napi::Function _Magick_levelImage_ctor = _Magick_levelImage_inst::GetClass(env);
Magick.Set("levelImage", _Magick_levelImage_ctor);
if (SWIGTYPE_p_Magick__levelImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__levelImage->clientdata = new size_t(152);
}
Napi::FunctionReference *_Magick_levelImage_ctor_ref = new Napi::FunctionReference();
*_Magick_levelImage_ctor_ref = Napi::Persistent(_Magick_levelImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[152] = _Magick_levelImage_ctor_ref;
/* Class: magnifyImage (_Magick_magnifyImage) */
// jsnapi_registerclass
Napi::Function _Magick_magnifyImage_ctor = _Magick_magnifyImage_inst::GetClass(env);
Magick.Set("magnifyImage", _Magick_magnifyImage_ctor);
if (SWIGTYPE_p_Magick__magnifyImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__magnifyImage->clientdata = new size_t(153);
}
Napi::FunctionReference *_Magick_magnifyImage_ctor_ref = new Napi::FunctionReference();
*_Magick_magnifyImage_ctor_ref = Napi::Persistent(_Magick_magnifyImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[153] = _Magick_magnifyImage_ctor_ref;
/* Class: mapImage (_Magick_mapImage) */
// jsnapi_registerclass
Napi::Function _Magick_mapImage_ctor = _Magick_mapImage_inst::GetClass(env);
Magick.Set("mapImage", _Magick_mapImage_ctor);
if (SWIGTYPE_p_Magick__mapImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__mapImage->clientdata = new size_t(154);
}
Napi::FunctionReference *_Magick_mapImage_ctor_ref = new Napi::FunctionReference();
*_Magick_mapImage_ctor_ref = Napi::Persistent(_Magick_mapImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[154] = _Magick_mapImage_ctor_ref;
/* Class: medianConvolveImage (_Magick_medianConvolveImage) */
// jsnapi_registerclass
Napi::Function _Magick_medianConvolveImage_ctor = _Magick_medianConvolveImage_inst::GetClass(env);
Magick.Set("medianConvolveImage", _Magick_medianConvolveImage_ctor);
if (SWIGTYPE_p_Magick__medianConvolveImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__medianConvolveImage->clientdata = new size_t(155);
}
Napi::FunctionReference *_Magick_medianConvolveImage_ctor_ref = new Napi::FunctionReference();
*_Magick_medianConvolveImage_ctor_ref = Napi::Persistent(_Magick_medianConvolveImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[155] = _Magick_medianConvolveImage_ctor_ref;
/* Class: minifyImage (_Magick_minifyImage) */
// jsnapi_registerclass
Napi::Function _Magick_minifyImage_ctor = _Magick_minifyImage_inst::GetClass(env);
Magick.Set("minifyImage", _Magick_minifyImage_ctor);
if (SWIGTYPE_p_Magick__minifyImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__minifyImage->clientdata = new size_t(156);
}
Napi::FunctionReference *_Magick_minifyImage_ctor_ref = new Napi::FunctionReference();
*_Magick_minifyImage_ctor_ref = Napi::Persistent(_Magick_minifyImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[156] = _Magick_minifyImage_ctor_ref;
/* Class: modulateImage (_Magick_modulateImage) */
// jsnapi_registerclass
Napi::Function _Magick_modulateImage_ctor = _Magick_modulateImage_inst::GetClass(env);
Magick.Set("modulateImage", _Magick_modulateImage_ctor);
if (SWIGTYPE_p_Magick__modulateImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__modulateImage->clientdata = new size_t(157);
}
Napi::FunctionReference *_Magick_modulateImage_ctor_ref = new Napi::FunctionReference();
*_Magick_modulateImage_ctor_ref = Napi::Persistent(_Magick_modulateImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[157] = _Magick_modulateImage_ctor_ref;
/* Class: negateImage (_Magick_negateImage) */
// jsnapi_registerclass
Napi::Function _Magick_negateImage_ctor = _Magick_negateImage_inst::GetClass(env);
Magick.Set("negateImage", _Magick_negateImage_ctor);
if (SWIGTYPE_p_Magick__negateImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__negateImage->clientdata = new size_t(158);
}
Napi::FunctionReference *_Magick_negateImage_ctor_ref = new Napi::FunctionReference();
*_Magick_negateImage_ctor_ref = Napi::Persistent(_Magick_negateImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[158] = _Magick_negateImage_ctor_ref;
/* Class: normalizeImage (_Magick_normalizeImage) */
// jsnapi_registerclass
Napi::Function _Magick_normalizeImage_ctor = _Magick_normalizeImage_inst::GetClass(env);
Magick.Set("normalizeImage", _Magick_normalizeImage_ctor);
if (SWIGTYPE_p_Magick__normalizeImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__normalizeImage->clientdata = new size_t(159);
}
Napi::FunctionReference *_Magick_normalizeImage_ctor_ref = new Napi::FunctionReference();
*_Magick_normalizeImage_ctor_ref = Napi::Persistent(_Magick_normalizeImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[159] = _Magick_normalizeImage_ctor_ref;
/* Class: oilPaintImage (_Magick_oilPaintImage) */
// jsnapi_registerclass
Napi::Function _Magick_oilPaintImage_ctor = _Magick_oilPaintImage_inst::GetClass(env);
Magick.Set("oilPaintImage", _Magick_oilPaintImage_ctor);
if (SWIGTYPE_p_Magick__oilPaintImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__oilPaintImage->clientdata = new size_t(160);
}
Napi::FunctionReference *_Magick_oilPaintImage_ctor_ref = new Napi::FunctionReference();
*_Magick_oilPaintImage_ctor_ref = Napi::Persistent(_Magick_oilPaintImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[160] = _Magick_oilPaintImage_ctor_ref;
/* Class: alphaImage (_Magick_alphaImage) */
// jsnapi_registerclass
Napi::Function _Magick_alphaImage_ctor = _Magick_alphaImage_inst::GetClass(env);
Magick.Set("alphaImage", _Magick_alphaImage_ctor);
if (SWIGTYPE_p_Magick__alphaImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__alphaImage->clientdata = new size_t(161);
}
Napi::FunctionReference *_Magick_alphaImage_ctor_ref = new Napi::FunctionReference();
*_Magick_alphaImage_ctor_ref = Napi::Persistent(_Magick_alphaImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[161] = _Magick_alphaImage_ctor_ref;
/* Class: opaqueImage (_Magick_opaqueImage) */
// jsnapi_registerclass
Napi::Function _Magick_opaqueImage_ctor = _Magick_opaqueImage_inst::GetClass(env);
Magick.Set("opaqueImage", _Magick_opaqueImage_ctor);
if (SWIGTYPE_p_Magick__opaqueImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__opaqueImage->clientdata = new size_t(162);
}
Napi::FunctionReference *_Magick_opaqueImage_ctor_ref = new Napi::FunctionReference();
*_Magick_opaqueImage_ctor_ref = Napi::Persistent(_Magick_opaqueImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[162] = _Magick_opaqueImage_ctor_ref;
/* Class: quantizeImage (_Magick_quantizeImage) */
// jsnapi_registerclass
Napi::Function _Magick_quantizeImage_ctor = _Magick_quantizeImage_inst::GetClass(env);
Magick.Set("quantizeImage", _Magick_quantizeImage_ctor);
if (SWIGTYPE_p_Magick__quantizeImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__quantizeImage->clientdata = new size_t(163);
}
Napi::FunctionReference *_Magick_quantizeImage_ctor_ref = new Napi::FunctionReference();
*_Magick_quantizeImage_ctor_ref = Napi::Persistent(_Magick_quantizeImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[163] = _Magick_quantizeImage_ctor_ref;
/* Class: raiseImage (_Magick_raiseImage) */
// jsnapi_registerclass
Napi::Function _Magick_raiseImage_ctor = _Magick_raiseImage_inst::GetClass(env);
Magick.Set("raiseImage", _Magick_raiseImage_ctor);
if (SWIGTYPE_p_Magick__raiseImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__raiseImage->clientdata = new size_t(164);
}
Napi::FunctionReference *_Magick_raiseImage_ctor_ref = new Napi::FunctionReference();
*_Magick_raiseImage_ctor_ref = Napi::Persistent(_Magick_raiseImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[164] = _Magick_raiseImage_ctor_ref;
/* Class: ReadOptions (_Magick_ReadOptions) */
// jsnapi_registerclass
Napi::Function _Magick_ReadOptions_ctor = _Magick_ReadOptions_inst::GetClass(env);
Magick.Set("ReadOptions", _Magick_ReadOptions_ctor);
if (SWIGTYPE_p_Magick__ReadOptions->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__ReadOptions->clientdata = new size_t(165);
}
Napi::FunctionReference *_Magick_ReadOptions_ctor_ref = new Napi::FunctionReference();
*_Magick_ReadOptions_ctor_ref = Napi::Persistent(_Magick_ReadOptions_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[165] = _Magick_ReadOptions_ctor_ref;
/* Class: reduceNoiseImage (_Magick_reduceNoiseImage) */
// jsnapi_registerclass
Napi::Function _Magick_reduceNoiseImage_ctor = _Magick_reduceNoiseImage_inst::GetClass(env);
Magick.Set("reduceNoiseImage", _Magick_reduceNoiseImage_ctor);
if (SWIGTYPE_p_Magick__reduceNoiseImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__reduceNoiseImage->clientdata = new size_t(166);
}
Napi::FunctionReference *_Magick_reduceNoiseImage_ctor_ref = new Napi::FunctionReference();
*_Magick_reduceNoiseImage_ctor_ref = Napi::Persistent(_Magick_reduceNoiseImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[166] = _Magick_reduceNoiseImage_ctor_ref;
/* Class: resizeImage (_Magick_resizeImage) */
// jsnapi_registerclass
Napi::Function _Magick_resizeImage_ctor = _Magick_resizeImage_inst::GetClass(env);
Magick.Set("resizeImage", _Magick_resizeImage_ctor);
if (SWIGTYPE_p_Magick__resizeImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__resizeImage->clientdata = new size_t(167);
}
Napi::FunctionReference *_Magick_resizeImage_ctor_ref = new Napi::FunctionReference();
*_Magick_resizeImage_ctor_ref = Napi::Persistent(_Magick_resizeImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[167] = _Magick_resizeImage_ctor_ref;
/* Class: rollImage (_Magick_rollImage) */
// jsnapi_registerclass
Napi::Function _Magick_rollImage_ctor = _Magick_rollImage_inst::GetClass(env);
Magick.Set("rollImage", _Magick_rollImage_ctor);
if (SWIGTYPE_p_Magick__rollImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__rollImage->clientdata = new size_t(168);
}
Napi::FunctionReference *_Magick_rollImage_ctor_ref = new Napi::FunctionReference();
*_Magick_rollImage_ctor_ref = Napi::Persistent(_Magick_rollImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[168] = _Magick_rollImage_ctor_ref;
/* Class: rotateImage (_Magick_rotateImage) */
// jsnapi_registerclass
Napi::Function _Magick_rotateImage_ctor = _Magick_rotateImage_inst::GetClass(env);
Magick.Set("rotateImage", _Magick_rotateImage_ctor);
if (SWIGTYPE_p_Magick__rotateImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__rotateImage->clientdata = new size_t(169);
}
Napi::FunctionReference *_Magick_rotateImage_ctor_ref = new Napi::FunctionReference();
*_Magick_rotateImage_ctor_ref = Napi::Persistent(_Magick_rotateImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[169] = _Magick_rotateImage_ctor_ref;
/* Class: sampleImage (_Magick_sampleImage) */
// jsnapi_registerclass
Napi::Function _Magick_sampleImage_ctor = _Magick_sampleImage_inst::GetClass(env);
Magick.Set("sampleImage", _Magick_sampleImage_ctor);
if (SWIGTYPE_p_Magick__sampleImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__sampleImage->clientdata = new size_t(170);
}
Napi::FunctionReference *_Magick_sampleImage_ctor_ref = new Napi::FunctionReference();
*_Magick_sampleImage_ctor_ref = Napi::Persistent(_Magick_sampleImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[170] = _Magick_sampleImage_ctor_ref;
/* Class: scaleImage (_Magick_scaleImage) */
// jsnapi_registerclass
Napi::Function _Magick_scaleImage_ctor = _Magick_scaleImage_inst::GetClass(env);
Magick.Set("scaleImage", _Magick_scaleImage_ctor);
if (SWIGTYPE_p_Magick__scaleImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__scaleImage->clientdata = new size_t(171);
}
Napi::FunctionReference *_Magick_scaleImage_ctor_ref = new Napi::FunctionReference();
*_Magick_scaleImage_ctor_ref = Napi::Persistent(_Magick_scaleImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[171] = _Magick_scaleImage_ctor_ref;
/* Class: segmentImage (_Magick_segmentImage) */
// jsnapi_registerclass
Napi::Function _Magick_segmentImage_ctor = _Magick_segmentImage_inst::GetClass(env);
Magick.Set("segmentImage", _Magick_segmentImage_ctor);
if (SWIGTYPE_p_Magick__segmentImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__segmentImage->clientdata = new size_t(172);
}
Napi::FunctionReference *_Magick_segmentImage_ctor_ref = new Napi::FunctionReference();
*_Magick_segmentImage_ctor_ref = Napi::Persistent(_Magick_segmentImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[172] = _Magick_segmentImage_ctor_ref;
/* Class: shadeImage (_Magick_shadeImage) */
// jsnapi_registerclass
Napi::Function _Magick_shadeImage_ctor = _Magick_shadeImage_inst::GetClass(env);
Magick.Set("shadeImage", _Magick_shadeImage_ctor);
if (SWIGTYPE_p_Magick__shadeImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__shadeImage->clientdata = new size_t(173);
}
Napi::FunctionReference *_Magick_shadeImage_ctor_ref = new Napi::FunctionReference();
*_Magick_shadeImage_ctor_ref = Napi::Persistent(_Magick_shadeImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[173] = _Magick_shadeImage_ctor_ref;
/* Class: shadowImage (_Magick_shadowImage) */
// jsnapi_registerclass
Napi::Function _Magick_shadowImage_ctor = _Magick_shadowImage_inst::GetClass(env);
Magick.Set("shadowImage", _Magick_shadowImage_ctor);
if (SWIGTYPE_p_Magick__shadowImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__shadowImage->clientdata = new size_t(174);
}
Napi::FunctionReference *_Magick_shadowImage_ctor_ref = new Napi::FunctionReference();
*_Magick_shadowImage_ctor_ref = Napi::Persistent(_Magick_shadowImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[174] = _Magick_shadowImage_ctor_ref;
/* Class: sharpenImage (_Magick_sharpenImage) */
// jsnapi_registerclass
Napi::Function _Magick_sharpenImage_ctor = _Magick_sharpenImage_inst::GetClass(env);
Magick.Set("sharpenImage", _Magick_sharpenImage_ctor);
if (SWIGTYPE_p_Magick__sharpenImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__sharpenImage->clientdata = new size_t(175);
}
Napi::FunctionReference *_Magick_sharpenImage_ctor_ref = new Napi::FunctionReference();
*_Magick_sharpenImage_ctor_ref = Napi::Persistent(_Magick_sharpenImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[175] = _Magick_sharpenImage_ctor_ref;
/* Class: shaveImage (_Magick_shaveImage) */
// jsnapi_registerclass
Napi::Function _Magick_shaveImage_ctor = _Magick_shaveImage_inst::GetClass(env);
Magick.Set("shaveImage", _Magick_shaveImage_ctor);
if (SWIGTYPE_p_Magick__shaveImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__shaveImage->clientdata = new size_t(176);
}
Napi::FunctionReference *_Magick_shaveImage_ctor_ref = new Napi::FunctionReference();
*_Magick_shaveImage_ctor_ref = Napi::Persistent(_Magick_shaveImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[176] = _Magick_shaveImage_ctor_ref;
/* Class: shearImage (_Magick_shearImage) */
// jsnapi_registerclass
Napi::Function _Magick_shearImage_ctor = _Magick_shearImage_inst::GetClass(env);
Magick.Set("shearImage", _Magick_shearImage_ctor);
if (SWIGTYPE_p_Magick__shearImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__shearImage->clientdata = new size_t(177);
}
Napi::FunctionReference *_Magick_shearImage_ctor_ref = new Napi::FunctionReference();
*_Magick_shearImage_ctor_ref = Napi::Persistent(_Magick_shearImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[177] = _Magick_shearImage_ctor_ref;
/* Class: solarizeImage (_Magick_solarizeImage) */
// jsnapi_registerclass
Napi::Function _Magick_solarizeImage_ctor = _Magick_solarizeImage_inst::GetClass(env);
Magick.Set("solarizeImage", _Magick_solarizeImage_ctor);
if (SWIGTYPE_p_Magick__solarizeImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__solarizeImage->clientdata = new size_t(178);
}
Napi::FunctionReference *_Magick_solarizeImage_ctor_ref = new Napi::FunctionReference();
*_Magick_solarizeImage_ctor_ref = Napi::Persistent(_Magick_solarizeImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[178] = _Magick_solarizeImage_ctor_ref;
/* Class: spliceImage (_Magick_spliceImage) */
// jsnapi_registerclass
Napi::Function _Magick_spliceImage_ctor = _Magick_spliceImage_inst::GetClass(env);
Magick.Set("spliceImage", _Magick_spliceImage_ctor);
if (SWIGTYPE_p_Magick__spliceImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__spliceImage->clientdata = new size_t(179);
}
Napi::FunctionReference *_Magick_spliceImage_ctor_ref = new Napi::FunctionReference();
*_Magick_spliceImage_ctor_ref = Napi::Persistent(_Magick_spliceImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[179] = _Magick_spliceImage_ctor_ref;
/* Class: spreadImage (_Magick_spreadImage) */
// jsnapi_registerclass
Napi::Function _Magick_spreadImage_ctor = _Magick_spreadImage_inst::GetClass(env);
Magick.Set("spreadImage", _Magick_spreadImage_ctor);
if (SWIGTYPE_p_Magick__spreadImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__spreadImage->clientdata = new size_t(180);
}
Napi::FunctionReference *_Magick_spreadImage_ctor_ref = new Napi::FunctionReference();
*_Magick_spreadImage_ctor_ref = Napi::Persistent(_Magick_spreadImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[180] = _Magick_spreadImage_ctor_ref;
/* Class: steganoImage (_Magick_steganoImage) */
// jsnapi_registerclass
Napi::Function _Magick_steganoImage_ctor = _Magick_steganoImage_inst::GetClass(env);
Magick.Set("steganoImage", _Magick_steganoImage_ctor);
if (SWIGTYPE_p_Magick__steganoImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__steganoImage->clientdata = new size_t(181);
}
Napi::FunctionReference *_Magick_steganoImage_ctor_ref = new Napi::FunctionReference();
*_Magick_steganoImage_ctor_ref = Napi::Persistent(_Magick_steganoImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[181] = _Magick_steganoImage_ctor_ref;
/* Class: stereoImage (_Magick_stereoImage) */
// jsnapi_registerclass
Napi::Function _Magick_stereoImage_ctor = _Magick_stereoImage_inst::GetClass(env);
Magick.Set("stereoImage", _Magick_stereoImage_ctor);
if (SWIGTYPE_p_Magick__stereoImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__stereoImage->clientdata = new size_t(182);
}
Napi::FunctionReference *_Magick_stereoImage_ctor_ref = new Napi::FunctionReference();
*_Magick_stereoImage_ctor_ref = Napi::Persistent(_Magick_stereoImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[182] = _Magick_stereoImage_ctor_ref;
/* Class: strokeColorImage (_Magick_strokeColorImage) */
// jsnapi_registerclass
Napi::Function _Magick_strokeColorImage_ctor = _Magick_strokeColorImage_inst::GetClass(env);
Magick.Set("strokeColorImage", _Magick_strokeColorImage_ctor);
if (SWIGTYPE_p_Magick__strokeColorImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__strokeColorImage->clientdata = new size_t(183);
}
Napi::FunctionReference *_Magick_strokeColorImage_ctor_ref = new Napi::FunctionReference();
*_Magick_strokeColorImage_ctor_ref = Napi::Persistent(_Magick_strokeColorImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[183] = _Magick_strokeColorImage_ctor_ref;
/* Class: swirlImage (_Magick_swirlImage) */
// jsnapi_registerclass
Napi::Function _Magick_swirlImage_ctor = _Magick_swirlImage_inst::GetClass(env);
Magick.Set("swirlImage", _Magick_swirlImage_ctor);
if (SWIGTYPE_p_Magick__swirlImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__swirlImage->clientdata = new size_t(184);
}
Napi::FunctionReference *_Magick_swirlImage_ctor_ref = new Napi::FunctionReference();
*_Magick_swirlImage_ctor_ref = Napi::Persistent(_Magick_swirlImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[184] = _Magick_swirlImage_ctor_ref;
/* Class: textureImage (_Magick_textureImage) */
// jsnapi_registerclass
Napi::Function _Magick_textureImage_ctor = _Magick_textureImage_inst::GetClass(env);
Magick.Set("textureImage", _Magick_textureImage_ctor);
if (SWIGTYPE_p_Magick__textureImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__textureImage->clientdata = new size_t(185);
}
Napi::FunctionReference *_Magick_textureImage_ctor_ref = new Napi::FunctionReference();
*_Magick_textureImage_ctor_ref = Napi::Persistent(_Magick_textureImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[185] = _Magick_textureImage_ctor_ref;
/* Class: thresholdImage (_Magick_thresholdImage) */
// jsnapi_registerclass
Napi::Function _Magick_thresholdImage_ctor = _Magick_thresholdImage_inst::GetClass(env);
Magick.Set("thresholdImage", _Magick_thresholdImage_ctor);
if (SWIGTYPE_p_Magick__thresholdImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__thresholdImage->clientdata = new size_t(186);
}
Napi::FunctionReference *_Magick_thresholdImage_ctor_ref = new Napi::FunctionReference();
*_Magick_thresholdImage_ctor_ref = Napi::Persistent(_Magick_thresholdImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[186] = _Magick_thresholdImage_ctor_ref;
/* Class: transparentImage (_Magick_transparentImage) */
// jsnapi_registerclass
Napi::Function _Magick_transparentImage_ctor = _Magick_transparentImage_inst::GetClass(env);
Magick.Set("transparentImage", _Magick_transparentImage_ctor);
if (SWIGTYPE_p_Magick__transparentImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__transparentImage->clientdata = new size_t(187);
}
Napi::FunctionReference *_Magick_transparentImage_ctor_ref = new Napi::FunctionReference();
*_Magick_transparentImage_ctor_ref = Napi::Persistent(_Magick_transparentImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[187] = _Magick_transparentImage_ctor_ref;
/* Class: trimImage (_Magick_trimImage) */
// jsnapi_registerclass
Napi::Function _Magick_trimImage_ctor = _Magick_trimImage_inst::GetClass(env);
Magick.Set("trimImage", _Magick_trimImage_ctor);
if (SWIGTYPE_p_Magick__trimImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__trimImage->clientdata = new size_t(188);
}
Napi::FunctionReference *_Magick_trimImage_ctor_ref = new Napi::FunctionReference();
*_Magick_trimImage_ctor_ref = Napi::Persistent(_Magick_trimImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[188] = _Magick_trimImage_ctor_ref;
/* Class: waveImage (_Magick_waveImage) */
// jsnapi_registerclass
Napi::Function _Magick_waveImage_ctor = _Magick_waveImage_inst::GetClass(env);
Magick.Set("waveImage", _Magick_waveImage_ctor);
if (SWIGTYPE_p_Magick__waveImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__waveImage->clientdata = new size_t(189);
}
Napi::FunctionReference *_Magick_waveImage_ctor_ref = new Napi::FunctionReference();
*_Magick_waveImage_ctor_ref = Napi::Persistent(_Magick_waveImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[189] = _Magick_waveImage_ctor_ref;
/* Class: zoomImage (_Magick_zoomImage) */
// jsnapi_registerclass
Napi::Function _Magick_zoomImage_ctor = _Magick_zoomImage_inst::GetClass(env);
Magick.Set("zoomImage", _Magick_zoomImage_ctor);
if (SWIGTYPE_p_Magick__zoomImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__zoomImage->clientdata = new size_t(190);
}
Napi::FunctionReference *_Magick_zoomImage_ctor_ref = new Napi::FunctionReference();
*_Magick_zoomImage_ctor_ref = Napi::Persistent(_Magick_zoomImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[190] = _Magick_zoomImage_ctor_ref;
/* Class: adjoinImage (_Magick_adjoinImage) */
// jsnapi_registerclass
Napi::Function _Magick_adjoinImage_ctor = _Magick_adjoinImage_inst::GetClass(env);
Magick.Set("adjoinImage", _Magick_adjoinImage_ctor);
if (SWIGTYPE_p_Magick__adjoinImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__adjoinImage->clientdata = new size_t(191);
}
Napi::FunctionReference *_Magick_adjoinImage_ctor_ref = new Napi::FunctionReference();
*_Magick_adjoinImage_ctor_ref = Napi::Persistent(_Magick_adjoinImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[191] = _Magick_adjoinImage_ctor_ref;
/* Class: animationDelayImage (_Magick_animationDelayImage) */
// jsnapi_registerclass
Napi::Function _Magick_animationDelayImage_ctor = _Magick_animationDelayImage_inst::GetClass(env);
Magick.Set("animationDelayImage", _Magick_animationDelayImage_ctor);
if (SWIGTYPE_p_Magick__animationDelayImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__animationDelayImage->clientdata = new size_t(192);
}
Napi::FunctionReference *_Magick_animationDelayImage_ctor_ref = new Napi::FunctionReference();
*_Magick_animationDelayImage_ctor_ref = Napi::Persistent(_Magick_animationDelayImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[192] = _Magick_animationDelayImage_ctor_ref;
/* Class: animationIterationsImage (_Magick_animationIterationsImage) */
// jsnapi_registerclass
Napi::Function _Magick_animationIterationsImage_ctor = _Magick_animationIterationsImage_inst::GetClass(env);
Magick.Set("animationIterationsImage", _Magick_animationIterationsImage_ctor);
if (SWIGTYPE_p_Magick__animationIterationsImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__animationIterationsImage->clientdata = new size_t(193);
}
Napi::FunctionReference *_Magick_animationIterationsImage_ctor_ref = new Napi::FunctionReference();
*_Magick_animationIterationsImage_ctor_ref = Napi::Persistent(_Magick_animationIterationsImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[193] = _Magick_animationIterationsImage_ctor_ref;
/* Class: backgroundColorImage (_Magick_backgroundColorImage) */
// jsnapi_registerclass
Napi::Function _Magick_backgroundColorImage_ctor = _Magick_backgroundColorImage_inst::GetClass(env);
Magick.Set("backgroundColorImage", _Magick_backgroundColorImage_ctor);
if (SWIGTYPE_p_Magick__backgroundColorImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__backgroundColorImage->clientdata = new size_t(194);
}
Napi::FunctionReference *_Magick_backgroundColorImage_ctor_ref = new Napi::FunctionReference();
*_Magick_backgroundColorImage_ctor_ref = Napi::Persistent(_Magick_backgroundColorImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[194] = _Magick_backgroundColorImage_ctor_ref;
/* Class: backgroundTextureImage (_Magick_backgroundTextureImage) */
// jsnapi_registerclass
Napi::Function _Magick_backgroundTextureImage_ctor = _Magick_backgroundTextureImage_inst::GetClass(env);
Magick.Set("backgroundTextureImage", _Magick_backgroundTextureImage_ctor);
if (SWIGTYPE_p_Magick__backgroundTextureImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__backgroundTextureImage->clientdata = new size_t(195);
}
Napi::FunctionReference *_Magick_backgroundTextureImage_ctor_ref = new Napi::FunctionReference();
*_Magick_backgroundTextureImage_ctor_ref = Napi::Persistent(_Magick_backgroundTextureImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[195] = _Magick_backgroundTextureImage_ctor_ref;
/* Class: borderColorImage (_Magick_borderColorImage) */
// jsnapi_registerclass
Napi::Function _Magick_borderColorImage_ctor = _Magick_borderColorImage_inst::GetClass(env);
Magick.Set("borderColorImage", _Magick_borderColorImage_ctor);
if (SWIGTYPE_p_Magick__borderColorImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__borderColorImage->clientdata = new size_t(196);
}
Napi::FunctionReference *_Magick_borderColorImage_ctor_ref = new Napi::FunctionReference();
*_Magick_borderColorImage_ctor_ref = Napi::Persistent(_Magick_borderColorImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[196] = _Magick_borderColorImage_ctor_ref;
/* Class: boxColorImage (_Magick_boxColorImage) */
// jsnapi_registerclass
Napi::Function _Magick_boxColorImage_ctor = _Magick_boxColorImage_inst::GetClass(env);
Magick.Set("boxColorImage", _Magick_boxColorImage_ctor);
if (SWIGTYPE_p_Magick__boxColorImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__boxColorImage->clientdata = new size_t(197);
}
Napi::FunctionReference *_Magick_boxColorImage_ctor_ref = new Napi::FunctionReference();
*_Magick_boxColorImage_ctor_ref = Napi::Persistent(_Magick_boxColorImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[197] = _Magick_boxColorImage_ctor_ref;
/* Class: chromaBluePrimaryImage (_Magick_chromaBluePrimaryImage) */
// jsnapi_registerclass
Napi::Function _Magick_chromaBluePrimaryImage_ctor = _Magick_chromaBluePrimaryImage_inst::GetClass(env);
Magick.Set("chromaBluePrimaryImage", _Magick_chromaBluePrimaryImage_ctor);
if (SWIGTYPE_p_Magick__chromaBluePrimaryImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__chromaBluePrimaryImage->clientdata = new size_t(198);
}
Napi::FunctionReference *_Magick_chromaBluePrimaryImage_ctor_ref = new Napi::FunctionReference();
*_Magick_chromaBluePrimaryImage_ctor_ref = Napi::Persistent(_Magick_chromaBluePrimaryImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[198] = _Magick_chromaBluePrimaryImage_ctor_ref;
/* Class: chromaGreenPrimaryImage (_Magick_chromaGreenPrimaryImage) */
// jsnapi_registerclass
Napi::Function _Magick_chromaGreenPrimaryImage_ctor = _Magick_chromaGreenPrimaryImage_inst::GetClass(env);
Magick.Set("chromaGreenPrimaryImage", _Magick_chromaGreenPrimaryImage_ctor);
if (SWIGTYPE_p_Magick__chromaGreenPrimaryImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__chromaGreenPrimaryImage->clientdata = new size_t(199);
}
Napi::FunctionReference *_Magick_chromaGreenPrimaryImage_ctor_ref = new Napi::FunctionReference();
*_Magick_chromaGreenPrimaryImage_ctor_ref = Napi::Persistent(_Magick_chromaGreenPrimaryImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[199] = _Magick_chromaGreenPrimaryImage_ctor_ref;
/* Class: chromaRedPrimaryImage (_Magick_chromaRedPrimaryImage) */
// jsnapi_registerclass
Napi::Function _Magick_chromaRedPrimaryImage_ctor = _Magick_chromaRedPrimaryImage_inst::GetClass(env);
Magick.Set("chromaRedPrimaryImage", _Magick_chromaRedPrimaryImage_ctor);
if (SWIGTYPE_p_Magick__chromaRedPrimaryImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__chromaRedPrimaryImage->clientdata = new size_t(200);
}
Napi::FunctionReference *_Magick_chromaRedPrimaryImage_ctor_ref = new Napi::FunctionReference();
*_Magick_chromaRedPrimaryImage_ctor_ref = Napi::Persistent(_Magick_chromaRedPrimaryImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[200] = _Magick_chromaRedPrimaryImage_ctor_ref;
/* Class: chromaWhitePointImage (_Magick_chromaWhitePointImage) */
// jsnapi_registerclass
Napi::Function _Magick_chromaWhitePointImage_ctor = _Magick_chromaWhitePointImage_inst::GetClass(env);
Magick.Set("chromaWhitePointImage", _Magick_chromaWhitePointImage_ctor);
if (SWIGTYPE_p_Magick__chromaWhitePointImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__chromaWhitePointImage->clientdata = new size_t(201);
}
Napi::FunctionReference *_Magick_chromaWhitePointImage_ctor_ref = new Napi::FunctionReference();
*_Magick_chromaWhitePointImage_ctor_ref = Napi::Persistent(_Magick_chromaWhitePointImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[201] = _Magick_chromaWhitePointImage_ctor_ref;
/* Class: colorFuzzImage (_Magick_colorFuzzImage) */
// jsnapi_registerclass
Napi::Function _Magick_colorFuzzImage_ctor = _Magick_colorFuzzImage_inst::GetClass(env);
Magick.Set("colorFuzzImage", _Magick_colorFuzzImage_ctor);
if (SWIGTYPE_p_Magick__colorFuzzImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__colorFuzzImage->clientdata = new size_t(202);
}
Napi::FunctionReference *_Magick_colorFuzzImage_ctor_ref = new Napi::FunctionReference();
*_Magick_colorFuzzImage_ctor_ref = Napi::Persistent(_Magick_colorFuzzImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[202] = _Magick_colorFuzzImage_ctor_ref;
/* Class: colorMapImage (_Magick_colorMapImage) */
// jsnapi_registerclass
Napi::Function _Magick_colorMapImage_ctor = _Magick_colorMapImage_inst::GetClass(env);
Magick.Set("colorMapImage", _Magick_colorMapImage_ctor);
if (SWIGTYPE_p_Magick__colorMapImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__colorMapImage->clientdata = new size_t(203);
}
Napi::FunctionReference *_Magick_colorMapImage_ctor_ref = new Napi::FunctionReference();
*_Magick_colorMapImage_ctor_ref = Napi::Persistent(_Magick_colorMapImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[203] = _Magick_colorMapImage_ctor_ref;
/* Class: composeImage (_Magick_composeImage) */
// jsnapi_registerclass
Napi::Function _Magick_composeImage_ctor = _Magick_composeImage_inst::GetClass(env);
Magick.Set("composeImage", _Magick_composeImage_ctor);
if (SWIGTYPE_p_Magick__composeImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__composeImage->clientdata = new size_t(204);
}
Napi::FunctionReference *_Magick_composeImage_ctor_ref = new Napi::FunctionReference();
*_Magick_composeImage_ctor_ref = Napi::Persistent(_Magick_composeImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[204] = _Magick_composeImage_ctor_ref;
/* Class: compressTypeImage (_Magick_compressTypeImage) */
// jsnapi_registerclass
Napi::Function _Magick_compressTypeImage_ctor = _Magick_compressTypeImage_inst::GetClass(env);
Magick.Set("compressTypeImage", _Magick_compressTypeImage_ctor);
if (SWIGTYPE_p_Magick__compressTypeImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__compressTypeImage->clientdata = new size_t(205);
}
Napi::FunctionReference *_Magick_compressTypeImage_ctor_ref = new Napi::FunctionReference();
*_Magick_compressTypeImage_ctor_ref = Napi::Persistent(_Magick_compressTypeImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[205] = _Magick_compressTypeImage_ctor_ref;
/* Class: densityImage (_Magick_densityImage) */
// jsnapi_registerclass
Napi::Function _Magick_densityImage_ctor = _Magick_densityImage_inst::GetClass(env);
Magick.Set("densityImage", _Magick_densityImage_ctor);
if (SWIGTYPE_p_Magick__densityImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__densityImage->clientdata = new size_t(206);
}
Napi::FunctionReference *_Magick_densityImage_ctor_ref = new Napi::FunctionReference();
*_Magick_densityImage_ctor_ref = Napi::Persistent(_Magick_densityImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[206] = _Magick_densityImage_ctor_ref;
/* Class: depthImage (_Magick_depthImage) */
// jsnapi_registerclass
Napi::Function _Magick_depthImage_ctor = _Magick_depthImage_inst::GetClass(env);
Magick.Set("depthImage", _Magick_depthImage_ctor);
if (SWIGTYPE_p_Magick__depthImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__depthImage->clientdata = new size_t(207);
}
Napi::FunctionReference *_Magick_depthImage_ctor_ref = new Napi::FunctionReference();
*_Magick_depthImage_ctor_ref = Napi::Persistent(_Magick_depthImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[207] = _Magick_depthImage_ctor_ref;
/* Class: endianImage (_Magick_endianImage) */
// jsnapi_registerclass
Napi::Function _Magick_endianImage_ctor = _Magick_endianImage_inst::GetClass(env);
Magick.Set("endianImage", _Magick_endianImage_ctor);
if (SWIGTYPE_p_Magick__endianImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__endianImage->clientdata = new size_t(208);
}
Napi::FunctionReference *_Magick_endianImage_ctor_ref = new Napi::FunctionReference();
*_Magick_endianImage_ctor_ref = Napi::Persistent(_Magick_endianImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[208] = _Magick_endianImage_ctor_ref;
/* Class: fileNameImage (_Magick_fileNameImage) */
// jsnapi_registerclass
Napi::Function _Magick_fileNameImage_ctor = _Magick_fileNameImage_inst::GetClass(env);
Magick.Set("fileNameImage", _Magick_fileNameImage_ctor);
if (SWIGTYPE_p_Magick__fileNameImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__fileNameImage->clientdata = new size_t(209);
}
Napi::FunctionReference *_Magick_fileNameImage_ctor_ref = new Napi::FunctionReference();
*_Magick_fileNameImage_ctor_ref = Napi::Persistent(_Magick_fileNameImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[209] = _Magick_fileNameImage_ctor_ref;
/* Class: filterTypeImage (_Magick_filterTypeImage) */
// jsnapi_registerclass
Napi::Function _Magick_filterTypeImage_ctor = _Magick_filterTypeImage_inst::GetClass(env);
Magick.Set("filterTypeImage", _Magick_filterTypeImage_ctor);
if (SWIGTYPE_p_Magick__filterTypeImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__filterTypeImage->clientdata = new size_t(210);
}
Napi::FunctionReference *_Magick_filterTypeImage_ctor_ref = new Napi::FunctionReference();
*_Magick_filterTypeImage_ctor_ref = Napi::Persistent(_Magick_filterTypeImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[210] = _Magick_filterTypeImage_ctor_ref;
/* Class: fontImage (_Magick_fontImage) */
// jsnapi_registerclass
Napi::Function _Magick_fontImage_ctor = _Magick_fontImage_inst::GetClass(env);
Magick.Set("fontImage", _Magick_fontImage_ctor);
if (SWIGTYPE_p_Magick__fontImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__fontImage->clientdata = new size_t(211);
}
Napi::FunctionReference *_Magick_fontImage_ctor_ref = new Napi::FunctionReference();
*_Magick_fontImage_ctor_ref = Napi::Persistent(_Magick_fontImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[211] = _Magick_fontImage_ctor_ref;
/* Class: fontPointsizeImage (_Magick_fontPointsizeImage) */
// jsnapi_registerclass
Napi::Function _Magick_fontPointsizeImage_ctor = _Magick_fontPointsizeImage_inst::GetClass(env);
Magick.Set("fontPointsizeImage", _Magick_fontPointsizeImage_ctor);
if (SWIGTYPE_p_Magick__fontPointsizeImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__fontPointsizeImage->clientdata = new size_t(212);
}
Napi::FunctionReference *_Magick_fontPointsizeImage_ctor_ref = new Napi::FunctionReference();
*_Magick_fontPointsizeImage_ctor_ref = Napi::Persistent(_Magick_fontPointsizeImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[212] = _Magick_fontPointsizeImage_ctor_ref;
/* Class: gifDisposeMethodImage (_Magick_gifDisposeMethodImage) */
// jsnapi_registerclass
Napi::Function _Magick_gifDisposeMethodImage_ctor = _Magick_gifDisposeMethodImage_inst::GetClass(env);
Magick.Set("gifDisposeMethodImage", _Magick_gifDisposeMethodImage_ctor);
if (SWIGTYPE_p_Magick__gifDisposeMethodImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__gifDisposeMethodImage->clientdata = new size_t(213);
}
Napi::FunctionReference *_Magick_gifDisposeMethodImage_ctor_ref = new Napi::FunctionReference();
*_Magick_gifDisposeMethodImage_ctor_ref = Napi::Persistent(_Magick_gifDisposeMethodImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[213] = _Magick_gifDisposeMethodImage_ctor_ref;
/* Class: interlaceTypeImage (_Magick_interlaceTypeImage) */
// jsnapi_registerclass
Napi::Function _Magick_interlaceTypeImage_ctor = _Magick_interlaceTypeImage_inst::GetClass(env);
Magick.Set("interlaceTypeImage", _Magick_interlaceTypeImage_ctor);
if (SWIGTYPE_p_Magick__interlaceTypeImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__interlaceTypeImage->clientdata = new size_t(214);
}
Napi::FunctionReference *_Magick_interlaceTypeImage_ctor_ref = new Napi::FunctionReference();
*_Magick_interlaceTypeImage_ctor_ref = Napi::Persistent(_Magick_interlaceTypeImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[214] = _Magick_interlaceTypeImage_ctor_ref;
/* Class: magickImage (_Magick_magickImage) */
// jsnapi_registerclass
Napi::Function _Magick_magickImage_ctor = _Magick_magickImage_inst::GetClass(env);
Magick.Set("magickImage", _Magick_magickImage_ctor);
if (SWIGTYPE_p_Magick__magickImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__magickImage->clientdata = new size_t(215);
}
Napi::FunctionReference *_Magick_magickImage_ctor_ref = new Napi::FunctionReference();
*_Magick_magickImage_ctor_ref = Napi::Persistent(_Magick_magickImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[215] = _Magick_magickImage_ctor_ref;
/* Class: alphaFlagImage (_Magick_alphaFlagImage) */
// jsnapi_registerclass
Napi::Function _Magick_alphaFlagImage_ctor = _Magick_alphaFlagImage_inst::GetClass(env);
Magick.Set("alphaFlagImage", _Magick_alphaFlagImage_ctor);
if (SWIGTYPE_p_Magick__alphaFlagImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__alphaFlagImage->clientdata = new size_t(216);
}
Napi::FunctionReference *_Magick_alphaFlagImage_ctor_ref = new Napi::FunctionReference();
*_Magick_alphaFlagImage_ctor_ref = Napi::Persistent(_Magick_alphaFlagImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[216] = _Magick_alphaFlagImage_ctor_ref;
/* Class: matteColorImage (_Magick_matteColorImage) */
// jsnapi_registerclass
Napi::Function _Magick_matteColorImage_ctor = _Magick_matteColorImage_inst::GetClass(env);
Magick.Set("matteColorImage", _Magick_matteColorImage_ctor);
if (SWIGTYPE_p_Magick__matteColorImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__matteColorImage->clientdata = new size_t(217);
}
Napi::FunctionReference *_Magick_matteColorImage_ctor_ref = new Napi::FunctionReference();
*_Magick_matteColorImage_ctor_ref = Napi::Persistent(_Magick_matteColorImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[217] = _Magick_matteColorImage_ctor_ref;
/* Class: monochromeImage (_Magick_monochromeImage) */
// jsnapi_registerclass
Napi::Function _Magick_monochromeImage_ctor = _Magick_monochromeImage_inst::GetClass(env);
Magick.Set("monochromeImage", _Magick_monochromeImage_ctor);
if (SWIGTYPE_p_Magick__monochromeImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__monochromeImage->clientdata = new size_t(218);
}
Napi::FunctionReference *_Magick_monochromeImage_ctor_ref = new Napi::FunctionReference();
*_Magick_monochromeImage_ctor_ref = Napi::Persistent(_Magick_monochromeImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[218] = _Magick_monochromeImage_ctor_ref;
/* Class: pixelColorImage (_Magick_pixelColorImage) */
// jsnapi_registerclass
Napi::Function _Magick_pixelColorImage_ctor = _Magick_pixelColorImage_inst::GetClass(env);
Magick.Set("pixelColorImage", _Magick_pixelColorImage_ctor);
if (SWIGTYPE_p_Magick__pixelColorImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__pixelColorImage->clientdata = new size_t(219);
}
Napi::FunctionReference *_Magick_pixelColorImage_ctor_ref = new Napi::FunctionReference();
*_Magick_pixelColorImage_ctor_ref = Napi::Persistent(_Magick_pixelColorImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[219] = _Magick_pixelColorImage_ctor_ref;
/* Class: pageImage (_Magick_pageImage) */
// jsnapi_registerclass
Napi::Function _Magick_pageImage_ctor = _Magick_pageImage_inst::GetClass(env);
Magick.Set("pageImage", _Magick_pageImage_ctor);
if (SWIGTYPE_p_Magick__pageImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__pageImage->clientdata = new size_t(220);
}
Napi::FunctionReference *_Magick_pageImage_ctor_ref = new Napi::FunctionReference();
*_Magick_pageImage_ctor_ref = Napi::Persistent(_Magick_pageImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[220] = _Magick_pageImage_ctor_ref;
/* Class: qualityImage (_Magick_qualityImage) */
// jsnapi_registerclass
Napi::Function _Magick_qualityImage_ctor = _Magick_qualityImage_inst::GetClass(env);
Magick.Set("qualityImage", _Magick_qualityImage_ctor);
if (SWIGTYPE_p_Magick__qualityImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__qualityImage->clientdata = new size_t(221);
}
Napi::FunctionReference *_Magick_qualityImage_ctor_ref = new Napi::FunctionReference();
*_Magick_qualityImage_ctor_ref = Napi::Persistent(_Magick_qualityImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[221] = _Magick_qualityImage_ctor_ref;
/* Class: quantizeColorsImage (_Magick_quantizeColorsImage) */
// jsnapi_registerclass
Napi::Function _Magick_quantizeColorsImage_ctor = _Magick_quantizeColorsImage_inst::GetClass(env);
Magick.Set("quantizeColorsImage", _Magick_quantizeColorsImage_ctor);
if (SWIGTYPE_p_Magick__quantizeColorsImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__quantizeColorsImage->clientdata = new size_t(222);
}
Napi::FunctionReference *_Magick_quantizeColorsImage_ctor_ref = new Napi::FunctionReference();
*_Magick_quantizeColorsImage_ctor_ref = Napi::Persistent(_Magick_quantizeColorsImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[222] = _Magick_quantizeColorsImage_ctor_ref;
/* Class: quantizeColorSpaceImage (_Magick_quantizeColorSpaceImage) */
// jsnapi_registerclass
Napi::Function _Magick_quantizeColorSpaceImage_ctor = _Magick_quantizeColorSpaceImage_inst::GetClass(env);
Magick.Set("quantizeColorSpaceImage", _Magick_quantizeColorSpaceImage_ctor);
if (SWIGTYPE_p_Magick__quantizeColorSpaceImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__quantizeColorSpaceImage->clientdata = new size_t(223);
}
Napi::FunctionReference *_Magick_quantizeColorSpaceImage_ctor_ref = new Napi::FunctionReference();
*_Magick_quantizeColorSpaceImage_ctor_ref = Napi::Persistent(_Magick_quantizeColorSpaceImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[223] = _Magick_quantizeColorSpaceImage_ctor_ref;
/* Class: quantizeDitherImage (_Magick_quantizeDitherImage) */
// jsnapi_registerclass
Napi::Function _Magick_quantizeDitherImage_ctor = _Magick_quantizeDitherImage_inst::GetClass(env);
Magick.Set("quantizeDitherImage", _Magick_quantizeDitherImage_ctor);
if (SWIGTYPE_p_Magick__quantizeDitherImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__quantizeDitherImage->clientdata = new size_t(224);
}
Napi::FunctionReference *_Magick_quantizeDitherImage_ctor_ref = new Napi::FunctionReference();
*_Magick_quantizeDitherImage_ctor_ref = Napi::Persistent(_Magick_quantizeDitherImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[224] = _Magick_quantizeDitherImage_ctor_ref;
/* Class: quantizeTreeDepthImage (_Magick_quantizeTreeDepthImage) */
// jsnapi_registerclass
Napi::Function _Magick_quantizeTreeDepthImage_ctor = _Magick_quantizeTreeDepthImage_inst::GetClass(env);
Magick.Set("quantizeTreeDepthImage", _Magick_quantizeTreeDepthImage_ctor);
if (SWIGTYPE_p_Magick__quantizeTreeDepthImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__quantizeTreeDepthImage->clientdata = new size_t(225);
}
Napi::FunctionReference *_Magick_quantizeTreeDepthImage_ctor_ref = new Napi::FunctionReference();
*_Magick_quantizeTreeDepthImage_ctor_ref = Napi::Persistent(_Magick_quantizeTreeDepthImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[225] = _Magick_quantizeTreeDepthImage_ctor_ref;
/* Class: renderingIntentImage (_Magick_renderingIntentImage) */
// jsnapi_registerclass
Napi::Function _Magick_renderingIntentImage_ctor = _Magick_renderingIntentImage_inst::GetClass(env);
Magick.Set("renderingIntentImage", _Magick_renderingIntentImage_ctor);
if (SWIGTYPE_p_Magick__renderingIntentImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__renderingIntentImage->clientdata = new size_t(226);
}
Napi::FunctionReference *_Magick_renderingIntentImage_ctor_ref = new Napi::FunctionReference();
*_Magick_renderingIntentImage_ctor_ref = Napi::Persistent(_Magick_renderingIntentImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[226] = _Magick_renderingIntentImage_ctor_ref;
/* Class: resolutionUnitsImage (_Magick_resolutionUnitsImage) */
// jsnapi_registerclass
Napi::Function _Magick_resolutionUnitsImage_ctor = _Magick_resolutionUnitsImage_inst::GetClass(env);
Magick.Set("resolutionUnitsImage", _Magick_resolutionUnitsImage_ctor);
if (SWIGTYPE_p_Magick__resolutionUnitsImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__resolutionUnitsImage->clientdata = new size_t(227);
}
Napi::FunctionReference *_Magick_resolutionUnitsImage_ctor_ref = new Napi::FunctionReference();
*_Magick_resolutionUnitsImage_ctor_ref = Napi::Persistent(_Magick_resolutionUnitsImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[227] = _Magick_resolutionUnitsImage_ctor_ref;
/* Class: sceneImage (_Magick_sceneImage) */
// jsnapi_registerclass
Napi::Function _Magick_sceneImage_ctor = _Magick_sceneImage_inst::GetClass(env);
Magick.Set("sceneImage", _Magick_sceneImage_ctor);
if (SWIGTYPE_p_Magick__sceneImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__sceneImage->clientdata = new size_t(228);
}
Napi::FunctionReference *_Magick_sceneImage_ctor_ref = new Napi::FunctionReference();
*_Magick_sceneImage_ctor_ref = Napi::Persistent(_Magick_sceneImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[228] = _Magick_sceneImage_ctor_ref;
/* Class: sizeImage (_Magick_sizeImage) */
// jsnapi_registerclass
Napi::Function _Magick_sizeImage_ctor = _Magick_sizeImage_inst::GetClass(env);
Magick.Set("sizeImage", _Magick_sizeImage_ctor);
if (SWIGTYPE_p_Magick__sizeImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__sizeImage->clientdata = new size_t(229);
}
Napi::FunctionReference *_Magick_sizeImage_ctor_ref = new Napi::FunctionReference();
*_Magick_sizeImage_ctor_ref = Napi::Persistent(_Magick_sizeImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[229] = _Magick_sizeImage_ctor_ref;
/* Class: stripImage (_Magick_stripImage) */
// jsnapi_registerclass
Napi::Function _Magick_stripImage_ctor = _Magick_stripImage_inst::GetClass(env);
Magick.Set("stripImage", _Magick_stripImage_ctor);
if (SWIGTYPE_p_Magick__stripImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__stripImage->clientdata = new size_t(230);
}
Napi::FunctionReference *_Magick_stripImage_ctor_ref = new Napi::FunctionReference();
*_Magick_stripImage_ctor_ref = Napi::Persistent(_Magick_stripImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[230] = _Magick_stripImage_ctor_ref;
/* Class: subImageImage (_Magick_subImageImage) */
// jsnapi_registerclass
Napi::Function _Magick_subImageImage_ctor = _Magick_subImageImage_inst::GetClass(env);
Magick.Set("subImageImage", _Magick_subImageImage_ctor);
if (SWIGTYPE_p_Magick__subImageImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__subImageImage->clientdata = new size_t(231);
}
Napi::FunctionReference *_Magick_subImageImage_ctor_ref = new Napi::FunctionReference();
*_Magick_subImageImage_ctor_ref = Napi::Persistent(_Magick_subImageImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[231] = _Magick_subImageImage_ctor_ref;
/* Class: subRangeImage (_Magick_subRangeImage) */
// jsnapi_registerclass
Napi::Function _Magick_subRangeImage_ctor = _Magick_subRangeImage_inst::GetClass(env);
Magick.Set("subRangeImage", _Magick_subRangeImage_ctor);
if (SWIGTYPE_p_Magick__subRangeImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__subRangeImage->clientdata = new size_t(232);
}
Napi::FunctionReference *_Magick_subRangeImage_ctor_ref = new Napi::FunctionReference();
*_Magick_subRangeImage_ctor_ref = Napi::Persistent(_Magick_subRangeImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[232] = _Magick_subRangeImage_ctor_ref;
/* Class: textAntiAliasImage (_Magick_textAntiAliasImage) */
// jsnapi_registerclass
Napi::Function _Magick_textAntiAliasImage_ctor = _Magick_textAntiAliasImage_inst::GetClass(env);
Magick.Set("textAntiAliasImage", _Magick_textAntiAliasImage_ctor);
if (SWIGTYPE_p_Magick__textAntiAliasImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__textAntiAliasImage->clientdata = new size_t(233);
}
Napi::FunctionReference *_Magick_textAntiAliasImage_ctor_ref = new Napi::FunctionReference();
*_Magick_textAntiAliasImage_ctor_ref = Napi::Persistent(_Magick_textAntiAliasImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[233] = _Magick_textAntiAliasImage_ctor_ref;
/* Class: typeImage (_Magick_typeImage) */
// jsnapi_registerclass
Napi::Function _Magick_typeImage_ctor = _Magick_typeImage_inst::GetClass(env);
Magick.Set("typeImage", _Magick_typeImage_ctor);
if (SWIGTYPE_p_Magick__typeImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__typeImage->clientdata = new size_t(234);
}
Napi::FunctionReference *_Magick_typeImage_ctor_ref = new Napi::FunctionReference();
*_Magick_typeImage_ctor_ref = Napi::Persistent(_Magick_typeImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[234] = _Magick_typeImage_ctor_ref;
/* Class: verboseImage (_Magick_verboseImage) */
// jsnapi_registerclass
Napi::Function _Magick_verboseImage_ctor = _Magick_verboseImage_inst::GetClass(env);
Magick.Set("verboseImage", _Magick_verboseImage_ctor);
if (SWIGTYPE_p_Magick__verboseImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__verboseImage->clientdata = new size_t(235);
}
Napi::FunctionReference *_Magick_verboseImage_ctor_ref = new Napi::FunctionReference();
*_Magick_verboseImage_ctor_ref = Napi::Persistent(_Magick_verboseImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[235] = _Magick_verboseImage_ctor_ref;
/* Class: x11DisplayImage (_Magick_x11DisplayImage) */
// jsnapi_registerclass
Napi::Function _Magick_x11DisplayImage_ctor = _Magick_x11DisplayImage_inst::GetClass(env);
Magick.Set("x11DisplayImage", _Magick_x11DisplayImage_ctor);
if (SWIGTYPE_p_Magick__x11DisplayImage->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_Magick__x11DisplayImage->clientdata = new size_t(236);
}
Napi::FunctionReference *_Magick_x11DisplayImage_ctor_ref = new Napi::FunctionReference();
*_Magick_x11DisplayImage_ctor_ref = Napi::Persistent(_Magick_x11DisplayImage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[236] = _Magick_x11DisplayImage_ctor_ref;
/* Class: coderInfoArray (_std_coderInfoArray) */
// jsnapi_registerclass
Napi::Function _std_coderInfoArray_ctor = _std_coderInfoArray_inst::GetClass(env);
std.Set("coderInfoArray", _std_coderInfoArray_ctor);
if (SWIGTYPE_p_std__vectorT_Magick__CoderInfo_t->clientdata == SWIG_NULLPTR) {
  SWIGTYPE_p_std__vectorT_Magick__CoderInfo_t->clientdata = new size_t(237);
}
Napi::FunctionReference *_std_coderInfoArray_ctor_ref = new Napi::FunctionReference();
*_std_coderInfoArray_ctor_ref = Napi::Persistent(_std_coderInfoArray_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[237] = _std_coderInfoArray_ctor_ref;


  /* initialize the inheritance helpers */
  Napi::Value jsObjectValue, jsSetProtoValue;
  Napi::Object jsObject;
  Napi::Function setProto;
  NAPI_CHECK_RESULT(env.Global().Get("Object"), jsObjectValue);
  NAPI_CHECK_RESULT(jsObjectValue.ToObject(), jsObject);
  NAPI_CHECK_RESULT(jsObject.Get("setPrototypeOf"), jsSetProtoValue);
  setProto = jsSetProtoValue.As<Napi::Function>();

  /* setup inheritance between these two */
  do {
    Napi::Value protoBase, protoSub;
    NAPI_CHECK_RESULT(SWIG_NAPI_PackedObjectWrap_ctor.Get("prototype"), protoSub);
    NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
    NAPI_CHECK_MAYBE(setProto.Call({SWIG_NAPI_PackedObjectWrap_ctor, SWIG_NAPI_ObjectWrap_ctor}));
    NAPI_CHECK_MAYBE(setProto.Call({protoSub, protoBase}));
  } while (0);

  /* setup inheritances */
  
// Inheritance for _Magick_Blob (Blob) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_Blob_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_Blob_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_Color (Color) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_Color_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_Color_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_ColorCMYK (ColorCMYK) <- _Magick_Color
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_ColorCMYK_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_Color_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_ColorCMYK_ctor, _Magick_Color_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_ColorGray (ColorGray) <- _Magick_Color
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_ColorGray_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_Color_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_ColorGray_ctor, _Magick_Color_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_ColorHSL (ColorHSL) <- _Magick_Color
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_ColorHSL_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_Color_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_ColorHSL_ctor, _Magick_Color_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_ColorMono (ColorMono) <- _Magick_Color
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_ColorMono_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_Color_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_ColorMono_ctor, _Magick_Color_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_ColorRGB (ColorRGB) <- _Magick_Color
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_ColorRGB_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_Color_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_ColorRGB_ctor, _Magick_Color_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_ColorYUV (ColorYUV) <- _Magick_Color
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_ColorYUV_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_Color_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_ColorYUV_ctor, _Magick_Color_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_Geometry (Geometry) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_Geometry_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_Geometry_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_Offset (Offset) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_Offset_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_Offset_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_Point (Point) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_Point_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_Point_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_Coordinate (Coordinate) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_Coordinate_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_Coordinate_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableBase (DrawableBase) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableBase_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_Drawable (Drawable) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_Drawable_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_Drawable_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_VPathBase (VPathBase) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_VPathBase_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_VPathBase_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_VPath (VPath) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_VPath_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_VPath_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableAffine (DrawableAffine) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableAffine_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableAffine_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableAlpha (DrawableAlpha) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableAlpha_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableAlpha_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableArc (DrawableArc) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableArc_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableArc_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableBezier (DrawableBezier) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableBezier_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableBezier_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableBorderColor (DrawableBorderColor) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableBorderColor_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableBorderColor_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableClipRule (DrawableClipRule) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableClipRule_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableClipRule_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableClipUnits (DrawableClipUnits) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableClipUnits_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableClipUnits_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawablePopClipPath (DrawablePopClipPath) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawablePopClipPath_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawablePopClipPath_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawablePushClipPath (DrawablePushClipPath) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawablePushClipPath_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawablePushClipPath_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableClipPath (DrawableClipPath) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableClipPath_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableClipPath_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableCircle (DrawableCircle) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableCircle_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableCircle_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableColor (DrawableColor) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableColor_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableColor_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableCompositeImage (DrawableCompositeImage) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableCompositeImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableCompositeImage_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableDensity (DrawableDensity) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableDensity_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableDensity_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableEllipse (DrawableEllipse) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableEllipse_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableEllipse_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableFillColor (DrawableFillColor) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableFillColor_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableFillColor_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableFillPatternUrl (DrawableFillPatternUrl) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableFillPatternUrl_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableFillPatternUrl_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableFillRule (DrawableFillRule) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableFillRule_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableFillRule_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableFillOpacity (DrawableFillOpacity) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableFillOpacity_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableFillOpacity_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableFont (DrawableFont) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableFont_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableFont_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableGravity (DrawableGravity) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableGravity_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableGravity_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableLine (DrawableLine) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableLine_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableLine_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawablePath (DrawablePath) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawablePath_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawablePath_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawablePoint (DrawablePoint) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawablePoint_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawablePoint_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawablePointSize (DrawablePointSize) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawablePointSize_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawablePointSize_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawablePolygon (DrawablePolygon) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawablePolygon_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawablePolygon_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawablePolyline (DrawablePolyline) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawablePolyline_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawablePolyline_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawablePopGraphicContext (DrawablePopGraphicContext) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawablePopGraphicContext_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawablePopGraphicContext_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawablePushGraphicContext (DrawablePushGraphicContext) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawablePushGraphicContext_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawablePushGraphicContext_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawablePopPattern (DrawablePopPattern) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawablePopPattern_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawablePopPattern_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawablePushPattern (DrawablePushPattern) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawablePushPattern_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawablePushPattern_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableRectangle (DrawableRectangle) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableRectangle_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableRectangle_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableRotation (DrawableRotation) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableRotation_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableRotation_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableRoundRectangle (DrawableRoundRectangle) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableRoundRectangle_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableRoundRectangle_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableScaling (DrawableScaling) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableScaling_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableScaling_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableSkewX (DrawableSkewX) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableSkewX_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableSkewX_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableSkewY (DrawableSkewY) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableSkewY_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableSkewY_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableStrokeDashArray (DrawableStrokeDashArray) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableStrokeDashArray_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableStrokeDashArray_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableStrokeDashOffset (DrawableStrokeDashOffset) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableStrokeDashOffset_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableStrokeDashOffset_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableStrokeLineCap (DrawableStrokeLineCap) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableStrokeLineCap_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableStrokeLineCap_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableStrokeLineJoin (DrawableStrokeLineJoin) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableStrokeLineJoin_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableStrokeLineJoin_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableMiterLimit (DrawableMiterLimit) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableMiterLimit_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableMiterLimit_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableStrokePatternUrl (DrawableStrokePatternUrl) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableStrokePatternUrl_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableStrokePatternUrl_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableStrokeAntialias (DrawableStrokeAntialias) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableStrokeAntialias_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableStrokeAntialias_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableStrokeColor (DrawableStrokeColor) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableStrokeColor_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableStrokeColor_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableStrokeOpacity (DrawableStrokeOpacity) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableStrokeOpacity_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableStrokeOpacity_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableStrokeWidth (DrawableStrokeWidth) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableStrokeWidth_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableStrokeWidth_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableText (DrawableText) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableText_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableText_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableTextAlignment (DrawableTextAlignment) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableTextAlignment_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableTextAlignment_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableTextAntialias (DrawableTextAntialias) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableTextAntialias_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableTextAntialias_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableTextDecoration (DrawableTextDecoration) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableTextDecoration_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableTextDecoration_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableTextDirection (DrawableTextDirection) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableTextDirection_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableTextDirection_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableTextInterlineSpacing (DrawableTextInterlineSpacing) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableTextInterlineSpacing_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableTextInterlineSpacing_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableTextInterwordSpacing (DrawableTextInterwordSpacing) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableTextInterwordSpacing_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableTextInterwordSpacing_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableTextKerning (DrawableTextKerning) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableTextKerning_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableTextKerning_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableTextUnderColor (DrawableTextUnderColor) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableTextUnderColor_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableTextUnderColor_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableTranslation (DrawableTranslation) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableTranslation_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableTranslation_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_DrawableViewbox (DrawableViewbox) <- _Magick_DrawableBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_DrawableViewbox_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_DrawableBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_DrawableViewbox_ctor, _Magick_DrawableBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathArcArgs (PathArcArgs) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathArcArgs_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathArcArgs_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathArcAbs (PathArcAbs) <- _Magick_VPathBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathArcAbs_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_VPathBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathArcAbs_ctor, _Magick_VPathBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathArcRel (PathArcRel) <- _Magick_VPathBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathArcRel_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_VPathBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathArcRel_ctor, _Magick_VPathBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathClosePath (PathClosePath) <- _Magick_VPathBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathClosePath_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_VPathBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathClosePath_ctor, _Magick_VPathBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathCurvetoArgs (PathCurvetoArgs) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathCurvetoArgs_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathCurvetoArgs_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathCurvetoAbs (PathCurvetoAbs) <- _Magick_VPathBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathCurvetoAbs_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_VPathBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathCurvetoAbs_ctor, _Magick_VPathBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathCurvetoRel (PathCurvetoRel) <- _Magick_VPathBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathCurvetoRel_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_VPathBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathCurvetoRel_ctor, _Magick_VPathBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathSmoothCurvetoAbs (PathSmoothCurvetoAbs) <- _Magick_VPathBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathSmoothCurvetoAbs_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_VPathBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathSmoothCurvetoAbs_ctor, _Magick_VPathBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathSmoothCurvetoRel (PathSmoothCurvetoRel) <- _Magick_VPathBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathSmoothCurvetoRel_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_VPathBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathSmoothCurvetoRel_ctor, _Magick_VPathBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathQuadraticCurvetoArgs (PathQuadraticCurvetoArgs) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathQuadraticCurvetoArgs_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathQuadraticCurvetoArgs_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathQuadraticCurvetoAbs (PathQuadraticCurvetoAbs) <- _Magick_VPathBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathQuadraticCurvetoAbs_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_VPathBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathQuadraticCurvetoAbs_ctor, _Magick_VPathBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathQuadraticCurvetoRel (PathQuadraticCurvetoRel) <- _Magick_VPathBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathQuadraticCurvetoRel_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_VPathBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathQuadraticCurvetoRel_ctor, _Magick_VPathBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathSmoothQuadraticCurvetoAbs (PathSmoothQuadraticCurvetoAbs) <- _Magick_VPathBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathSmoothQuadraticCurvetoAbs_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_VPathBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathSmoothQuadraticCurvetoAbs_ctor, _Magick_VPathBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathSmoothQuadraticCurvetoRel (PathSmoothQuadraticCurvetoRel) <- _Magick_VPathBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathSmoothQuadraticCurvetoRel_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_VPathBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathSmoothQuadraticCurvetoRel_ctor, _Magick_VPathBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathLinetoAbs (PathLinetoAbs) <- _Magick_VPathBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathLinetoAbs_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_VPathBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathLinetoAbs_ctor, _Magick_VPathBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathLinetoRel (PathLinetoRel) <- _Magick_VPathBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathLinetoRel_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_VPathBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathLinetoRel_ctor, _Magick_VPathBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathLinetoHorizontalAbs (PathLinetoHorizontalAbs) <- _Magick_VPathBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathLinetoHorizontalAbs_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_VPathBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathLinetoHorizontalAbs_ctor, _Magick_VPathBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathLinetoHorizontalRel (PathLinetoHorizontalRel) <- _Magick_VPathBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathLinetoHorizontalRel_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_VPathBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathLinetoHorizontalRel_ctor, _Magick_VPathBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathLinetoVerticalAbs (PathLinetoVerticalAbs) <- _Magick_VPathBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathLinetoVerticalAbs_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_VPathBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathLinetoVerticalAbs_ctor, _Magick_VPathBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathLinetoVerticalRel (PathLinetoVerticalRel) <- _Magick_VPathBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathLinetoVerticalRel_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_VPathBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathLinetoVerticalRel_ctor, _Magick_VPathBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathMovetoAbs (PathMovetoAbs) <- _Magick_VPathBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathMovetoAbs_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_VPathBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathMovetoAbs_ctor, _Magick_VPathBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_PathMovetoRel (PathMovetoRel) <- _Magick_VPathBase
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_PathMovetoRel_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_VPathBase_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_PathMovetoRel_ctor, _Magick_VPathBase_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_ErrorPolicy (ErrorPolicy) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_ErrorPolicy_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_ErrorPolicy_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_ErrorType (ErrorType) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_ErrorType_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_ErrorType_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_WarningPolicy (WarningPolicy) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_WarningPolicy_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_WarningPolicy_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_WarningType (WarningType) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_WarningType_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_WarningType_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_ChannelMoments (ChannelMoments) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_ChannelMoments_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_ChannelMoments_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_ChannelPerceptualHash (ChannelPerceptualHash) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_ChannelPerceptualHash_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_ChannelPerceptualHash_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_ChannelStatistics (ChannelStatistics) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_ChannelStatistics_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_ChannelStatistics_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_ImageMoments (ImageMoments) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_ImageMoments_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_ImageMoments_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_ImagePerceptualHash (ImagePerceptualHash) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_ImagePerceptualHash_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_ImagePerceptualHash_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_ImageStatistics (ImageStatistics) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_ImageStatistics_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_ImageStatistics_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_TypeMetric (TypeMetric) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_TypeMetric_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_TypeMetric_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_Image (Image) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_Image_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_Image_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_ResourceLimits (ResourceLimits) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_ResourceLimits_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_ResourceLimits_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_CoderInfo (CoderInfo) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_CoderInfo_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_CoderInfo_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_Montage (Montage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_Montage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_Montage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_MontageFramed (MontageFramed) <- _Magick_Montage
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_MontageFramed_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_Magick_Montage_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_MontageFramed_ctor, _Magick_Montage_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_adaptiveBlurImage (adaptiveBlurImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_adaptiveBlurImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_adaptiveBlurImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_adaptiveThresholdImage (adaptiveThresholdImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_adaptiveThresholdImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_adaptiveThresholdImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_addNoiseImage (addNoiseImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_addNoiseImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_addNoiseImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_affineTransformImage (affineTransformImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_affineTransformImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_affineTransformImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_annotateImage (annotateImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_annotateImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_annotateImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_blurImage (blurImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_blurImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_blurImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_borderImage (borderImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_borderImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_borderImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_channelImage (channelImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_channelImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_channelImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_charcoalImage (charcoalImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_charcoalImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_charcoalImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_chopImage (chopImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_chopImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_chopImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_cdlImage (cdlImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_cdlImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_cdlImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_colorizeImage (colorizeImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_colorizeImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_colorizeImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_colorMatrixImage (colorMatrixImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_colorMatrixImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_colorMatrixImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_colorSpaceImage (colorSpaceImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_colorSpaceImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_colorSpaceImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_commentImage (commentImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_commentImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_commentImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_compositeImage (compositeImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_compositeImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_compositeImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_contrastImage (contrastImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_contrastImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_contrastImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_cropImage (cropImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_cropImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_cropImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_cycleColormapImage (cycleColormapImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_cycleColormapImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_cycleColormapImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_despeckleImage (despeckleImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_despeckleImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_despeckleImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_distortImage (distortImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_distortImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_distortImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_drawImage (drawImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_drawImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_drawImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_edgeImage (edgeImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_edgeImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_edgeImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_embossImage (embossImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_embossImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_embossImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_enhanceImage (enhanceImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_enhanceImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_enhanceImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_equalizeImage (equalizeImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_equalizeImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_equalizeImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_fillColorImage (fillColorImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_fillColorImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_fillColorImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_flipImage (flipImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_flipImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_flipImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_floodFillAlphaImage (floodFillAlphaImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_floodFillAlphaImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_floodFillAlphaImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_floodFillColorImage (floodFillColorImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_floodFillColorImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_floodFillColorImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_floodFillTextureImage (floodFillTextureImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_floodFillTextureImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_floodFillTextureImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_flopImage (flopImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_flopImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_flopImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_frameImage (frameImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_frameImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_frameImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_gammaImage (gammaImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_gammaImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_gammaImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_gaussianBlurImage (gaussianBlurImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_gaussianBlurImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_gaussianBlurImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_haldClutImage (haldClutImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_haldClutImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_haldClutImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_implodeImage (implodeImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_implodeImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_implodeImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_inverseFourierTransformImage (inverseFourierTransformImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_inverseFourierTransformImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_inverseFourierTransformImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_isValidImage (isValidImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_isValidImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_isValidImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_labelImage (labelImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_labelImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_labelImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_levelImage (levelImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_levelImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_levelImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_magnifyImage (magnifyImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_magnifyImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_magnifyImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_mapImage (mapImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_mapImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_mapImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_medianConvolveImage (medianConvolveImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_medianConvolveImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_medianConvolveImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_minifyImage (minifyImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_minifyImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_minifyImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_modulateImage (modulateImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_modulateImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_modulateImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_negateImage (negateImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_negateImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_negateImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_normalizeImage (normalizeImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_normalizeImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_normalizeImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_oilPaintImage (oilPaintImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_oilPaintImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_oilPaintImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_alphaImage (alphaImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_alphaImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_alphaImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_opaqueImage (opaqueImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_opaqueImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_opaqueImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_quantizeImage (quantizeImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_quantizeImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_quantizeImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_raiseImage (raiseImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_raiseImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_raiseImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_ReadOptions (ReadOptions) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_ReadOptions_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_ReadOptions_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_reduceNoiseImage (reduceNoiseImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_reduceNoiseImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_reduceNoiseImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_resizeImage (resizeImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_resizeImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_resizeImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_rollImage (rollImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_rollImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_rollImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_rotateImage (rotateImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_rotateImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_rotateImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_sampleImage (sampleImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_sampleImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_sampleImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_scaleImage (scaleImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_scaleImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_scaleImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_segmentImage (segmentImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_segmentImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_segmentImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_shadeImage (shadeImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_shadeImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_shadeImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_shadowImage (shadowImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_shadowImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_shadowImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_sharpenImage (sharpenImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_sharpenImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_sharpenImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_shaveImage (shaveImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_shaveImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_shaveImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_shearImage (shearImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_shearImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_shearImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_solarizeImage (solarizeImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_solarizeImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_solarizeImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_spliceImage (spliceImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_spliceImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_spliceImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_spreadImage (spreadImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_spreadImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_spreadImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_steganoImage (steganoImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_steganoImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_steganoImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_stereoImage (stereoImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_stereoImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_stereoImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_strokeColorImage (strokeColorImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_strokeColorImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_strokeColorImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_swirlImage (swirlImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_swirlImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_swirlImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_textureImage (textureImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_textureImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_textureImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_thresholdImage (thresholdImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_thresholdImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_thresholdImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_transparentImage (transparentImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_transparentImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_transparentImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_trimImage (trimImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_trimImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_trimImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_waveImage (waveImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_waveImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_waveImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_zoomImage (zoomImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_zoomImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_zoomImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_adjoinImage (adjoinImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_adjoinImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_adjoinImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_animationDelayImage (animationDelayImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_animationDelayImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_animationDelayImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_animationIterationsImage (animationIterationsImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_animationIterationsImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_animationIterationsImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_backgroundColorImage (backgroundColorImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_backgroundColorImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_backgroundColorImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_backgroundTextureImage (backgroundTextureImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_backgroundTextureImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_backgroundTextureImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_borderColorImage (borderColorImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_borderColorImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_borderColorImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_boxColorImage (boxColorImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_boxColorImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_boxColorImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_chromaBluePrimaryImage (chromaBluePrimaryImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_chromaBluePrimaryImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_chromaBluePrimaryImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_chromaGreenPrimaryImage (chromaGreenPrimaryImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_chromaGreenPrimaryImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_chromaGreenPrimaryImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_chromaRedPrimaryImage (chromaRedPrimaryImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_chromaRedPrimaryImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_chromaRedPrimaryImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_chromaWhitePointImage (chromaWhitePointImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_chromaWhitePointImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_chromaWhitePointImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_colorFuzzImage (colorFuzzImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_colorFuzzImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_colorFuzzImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_colorMapImage (colorMapImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_colorMapImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_colorMapImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_composeImage (composeImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_composeImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_composeImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_compressTypeImage (compressTypeImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_compressTypeImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_compressTypeImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_densityImage (densityImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_densityImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_densityImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_depthImage (depthImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_depthImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_depthImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_endianImage (endianImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_endianImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_endianImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_fileNameImage (fileNameImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_fileNameImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_fileNameImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_filterTypeImage (filterTypeImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_filterTypeImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_filterTypeImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_fontImage (fontImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_fontImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_fontImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_fontPointsizeImage (fontPointsizeImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_fontPointsizeImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_fontPointsizeImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_gifDisposeMethodImage (gifDisposeMethodImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_gifDisposeMethodImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_gifDisposeMethodImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_interlaceTypeImage (interlaceTypeImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_interlaceTypeImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_interlaceTypeImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_magickImage (magickImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_magickImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_magickImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_alphaFlagImage (alphaFlagImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_alphaFlagImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_alphaFlagImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_matteColorImage (matteColorImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_matteColorImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_matteColorImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_monochromeImage (monochromeImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_monochromeImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_monochromeImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_pixelColorImage (pixelColorImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_pixelColorImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_pixelColorImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_pageImage (pageImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_pageImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_pageImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_qualityImage (qualityImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_qualityImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_qualityImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_quantizeColorsImage (quantizeColorsImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_quantizeColorsImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_quantizeColorsImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_quantizeColorSpaceImage (quantizeColorSpaceImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_quantizeColorSpaceImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_quantizeColorSpaceImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_quantizeDitherImage (quantizeDitherImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_quantizeDitherImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_quantizeDitherImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_quantizeTreeDepthImage (quantizeTreeDepthImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_quantizeTreeDepthImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_quantizeTreeDepthImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_renderingIntentImage (renderingIntentImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_renderingIntentImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_renderingIntentImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_resolutionUnitsImage (resolutionUnitsImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_resolutionUnitsImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_resolutionUnitsImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_sceneImage (sceneImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_sceneImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_sceneImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_sizeImage (sizeImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_sizeImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_sizeImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_stripImage (stripImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_stripImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_stripImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_subImageImage (subImageImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_subImageImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_subImageImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_subRangeImage (subRangeImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_subRangeImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_subRangeImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_textAntiAliasImage (textAntiAliasImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_textAntiAliasImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_textAntiAliasImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_typeImage (typeImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_typeImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_typeImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_verboseImage (verboseImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_verboseImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_verboseImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _Magick_x11DisplayImage (x11DisplayImage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_Magick_x11DisplayImage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _Magick_x11DisplayImage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _std_coderInfoArray (coderInfoArray) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_std_coderInfoArray_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _std_coderInfoArray_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);



  /* create and register namespace objects */
  // jsnapi_register_namespace
NAPI_CHECK_MAYBE(exports.Set("std", std));
// jsnapi_register_namespace
NAPI_CHECK_MAYBE(exports.Set("Magick", Magick));
// jsnapi_register_namespace
NAPI_CHECK_MAYBE(exports.Set("MagickCore", MagickCore));
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_NAPI_VERSION_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("NAPI_VERSION", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickCoreSignature_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickCoreSignature", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickPathExtent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickPathExtent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickTimeExtent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickTimeExtent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickEpsilon_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickEpsilon", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickMaximumValue_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickMaximumValue", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickMinimumValue_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickMinimumValue", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickOffsetFormat_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickOffsetFormat", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickSizeFormat_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickSizeFormat", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedClass_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedClass", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DirectClass_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DirectClass", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PseudoClass_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PseudoClass", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MagickFalse_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickFalse", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MagickTrue_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickTrue", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedGravity_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedGravity", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ForgetGravity_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ForgetGravity", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_NorthWestGravity_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("NorthWestGravity", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_NorthGravity_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("NorthGravity", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_NorthEastGravity_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("NorthEastGravity", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_WestGravity_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("WestGravity", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CenterGravity_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CenterGravity", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_EastGravity_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("EastGravity", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SouthWestGravity_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SouthWestGravity", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SouthGravity_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SouthGravity", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SouthEastGravity_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SouthEastGravity", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CMYColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CMYColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CMYKColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CMYKColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_GRAYColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("GRAYColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_HCLColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("HCLColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_HCLpColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("HCLpColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_HSBColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("HSBColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_HSIColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("HSIColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_HSLColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("HSLColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_HSVColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("HSVColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_HWBColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("HWBColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LabColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LabColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LCHColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LCHColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LCHabColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LCHabColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LCHuvColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LCHuvColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LogColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LogColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LMSColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LMSColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LuvColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LuvColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_OHTAColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("OHTAColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_Rec601YCbCrColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("Rec601YCbCrColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_Rec709YCbCrColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("Rec709YCbCrColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RGBColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RGBColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_scRGBColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("scRGBColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_sRGBColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("sRGBColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_TransparentColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("TransparentColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_xyYColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("xyYColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_XYZColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("XYZColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_YCbCrColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("YCbCrColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_YCCColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("YCCColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_YDbDrColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("YDbDrColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_YIQColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("YIQColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_YPbPrColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("YPbPrColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_YUVColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("YUVColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LinearGRAYColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LinearGRAYColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_JzazbzColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("JzazbzColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DisplayP3Colorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DisplayP3Colorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_Adobe98Colorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("Adobe98Colorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ProPhotoColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ProPhotoColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_OklabColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("OklabColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_OklchColorspace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("OklchColorspace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedChannel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedChannel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RedChannel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RedChannel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_GrayChannel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("GrayChannel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CyanChannel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CyanChannel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LChannel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LChannel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_GreenChannel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("GreenChannel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MagentaChannel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagentaChannel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_aChannel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("aChannel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BlueChannel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BlueChannel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_bChannel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("bChannel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_YellowChannel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("YellowChannel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BlackChannel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BlackChannel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AlphaChannel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AlphaChannel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_OpacityChannel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("OpacityChannel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_IndexChannel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("IndexChannel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ReadMaskChannel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ReadMaskChannel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_WriteMaskChannel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("WriteMaskChannel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MetaChannel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MetaChannel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CompositeMaskChannel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CompositeMaskChannel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CompositeChannels_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CompositeChannels", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AllChannels_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AllChannels", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_TrueAlphaChannel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("TrueAlphaChannel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RGBChannels_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RGBChannels", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_GrayChannels_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("GrayChannels", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SyncChannels_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SyncChannels", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DefaultChannels_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DefaultChannels", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedPixel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedPixel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CharPixel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CharPixel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DoublePixel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DoublePixel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_FloatPixel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("FloatPixel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LongPixel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LongPixel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LongLongPixel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LongLongPixel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_QuantumPixel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("QuantumPixel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ShortPixel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ShortPixel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickMaxBufferExtent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickMaxBufferExtent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickMinBufferExtent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickMinBufferExtent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedException_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedException", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_WarningException_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("WarningException", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ResourceLimitWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ResourceLimitWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_TypeWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("TypeWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_OptionWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("OptionWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DelegateWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DelegateWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MissingDelegateWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MissingDelegateWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CorruptImageWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CorruptImageWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_FileOpenWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("FileOpenWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BlobWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BlobWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_StreamWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("StreamWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CacheWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CacheWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CoderWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CoderWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_FilterWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("FilterWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ModuleWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ModuleWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DrawWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DrawWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ImageWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ImageWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_WandWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("WandWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RandomWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RandomWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_XServerWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("XServerWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MonitorWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MonitorWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RegistryWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RegistryWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ConfigureWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ConfigureWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PolicyWarning_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PolicyWarning", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ErrorException_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ErrorException", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ResourceLimitError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ResourceLimitError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_TypeError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("TypeError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_OptionError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("OptionError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DelegateError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DelegateError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MissingDelegateError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MissingDelegateError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CorruptImageError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CorruptImageError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_FileOpenError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("FileOpenError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BlobError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BlobError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_StreamError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("StreamError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CacheError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CacheError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CoderError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CoderError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_FilterError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("FilterError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ModuleError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ModuleError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DrawError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DrawError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ImageError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ImageError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_WandError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("WandError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RandomError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RandomError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_XServerError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("XServerError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MonitorError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MonitorError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RegistryError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RegistryError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ConfigureError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ConfigureError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PolicyError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PolicyError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_FatalErrorException_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("FatalErrorException", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ResourceLimitFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ResourceLimitFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_TypeFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("TypeFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_OptionFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("OptionFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DelegateFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DelegateFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MissingDelegateFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MissingDelegateFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CorruptImageFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CorruptImageFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_FileOpenFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("FileOpenFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BlobFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BlobFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_StreamFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("StreamFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CacheFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CacheFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CoderFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CoderFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_FilterFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("FilterFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ModuleFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ModuleFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DrawFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DrawFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ImageFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ImageFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_WandFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("WandFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RandomFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RandomFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_XServerFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("XServerFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MonitorFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MonitorFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RegistryFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RegistryFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ConfigureFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ConfigureFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PolicyFatalError_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PolicyFatalError", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedCompliance_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedCompliance", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_NoCompliance_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("NoCompliance", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CSSCompliance_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CSSCompliance", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SVGCompliance_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SVGCompliance", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_X11Compliance_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("X11Compliance", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_XPMCompliance_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("XPMCompliance", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MVGCompliance_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MVGCompliance", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AllCompliance_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AllCompliance", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedIlluminant_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedIlluminant", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AIlluminant_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AIlluminant", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BIlluminant_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BIlluminant", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CIlluminant_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CIlluminant", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_D50Illuminant_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("D50Illuminant", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_D55Illuminant_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("D55Illuminant", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_D65Illuminant_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("D65Illuminant", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_D75Illuminant_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("D75Illuminant", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_EIlluminant_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("EIlluminant", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_F2Illuminant_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("F2Illuminant", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_F7Illuminant_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("F7Illuminant", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_F11Illuminant_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("F11Illuminant", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AlphaCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AlphaCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AtopCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AtopCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BlendCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BlendCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BlurCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BlurCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BumpmapCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BumpmapCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ChangeMaskCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ChangeMaskCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ClearCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ClearCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ColorBurnCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ColorBurnCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ColorDodgeCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ColorDodgeCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ColorizeCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ColorizeCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CopyBlackCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CopyBlackCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CopyBlueCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CopyBlueCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CopyCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CopyCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CopyCyanCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CopyCyanCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CopyGreenCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CopyGreenCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CopyMagentaCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CopyMagentaCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CopyAlphaCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CopyAlphaCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CopyRedCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CopyRedCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CopyYellowCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CopyYellowCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DarkenCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DarkenCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DarkenIntensityCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DarkenIntensityCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DifferenceCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DifferenceCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DisplaceCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DisplaceCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DissolveCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DissolveCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DistortCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DistortCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DivideDstCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DivideDstCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DivideSrcCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DivideSrcCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DstAtopCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DstAtopCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DstCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DstCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DstInCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DstInCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DstOutCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DstOutCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DstOverCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DstOverCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ExclusionCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ExclusionCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_HardLightCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("HardLightCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_HardMixCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("HardMixCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_HueCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("HueCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_InCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("InCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_IntensityCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("IntensityCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LightenCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LightenCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LightenIntensityCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LightenIntensityCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LinearBurnCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LinearBurnCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LinearDodgeCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LinearDodgeCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LinearLightCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LinearLightCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LuminizeCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LuminizeCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MathematicsCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MathematicsCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MinusDstCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MinusDstCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MinusSrcCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MinusSrcCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ModulateCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ModulateCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ModulusAddCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ModulusAddCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ModulusSubtractCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ModulusSubtractCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MultiplyCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MultiplyCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_NoCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("NoCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_OutCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("OutCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_OverCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("OverCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_OverlayCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("OverlayCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PegtopLightCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PegtopLightCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PinLightCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PinLightCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PlusCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PlusCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ReplaceCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ReplaceCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SaturateCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SaturateCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ScreenCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ScreenCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SoftLightCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SoftLightCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SrcAtopCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SrcAtopCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SrcCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SrcCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SrcInCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SrcInCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SrcOutCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SrcOutCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SrcOverCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SrcOverCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ThresholdCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ThresholdCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_VividLightCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("VividLightCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_XorCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("XorCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_StereoCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("StereoCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_FreezeCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("FreezeCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_InterpolateCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("InterpolateCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_NegateCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("NegateCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ReflectCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ReflectCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SoftBurnCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SoftBurnCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SoftDodgeCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SoftDodgeCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_StampCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("StampCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RMSECompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RMSECompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SaliencyBlendCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SaliencyBlendCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SeamlessBlendCompositeOp_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SeamlessBlendCompositeOp", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedCompression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedCompression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_B44ACompression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("B44ACompression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_B44Compression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("B44Compression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BZipCompression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BZipCompression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DXT1Compression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DXT1Compression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DXT3Compression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DXT3Compression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DXT5Compression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DXT5Compression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_FaxCompression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("FaxCompression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_Group4Compression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("Group4Compression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_JBIG1Compression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("JBIG1Compression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_JBIG2Compression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("JBIG2Compression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_JPEG2000Compression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("JPEG2000Compression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_JPEGCompression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("JPEGCompression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LosslessJPEGCompression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LosslessJPEGCompression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LZMACompression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LZMACompression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LZWCompression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LZWCompression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_NoCompression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("NoCompression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PizCompression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PizCompression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_Pxr24Compression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("Pxr24Compression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RLECompression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RLECompression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ZipCompression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ZipCompression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ZipSCompression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ZipSCompression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ZstdCompression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ZstdCompression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_WebPCompression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("WebPCompression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DWAACompression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DWAACompression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DWABCompression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DWABCompression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BC7Compression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BC7Compression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BC5Compression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BC5Compression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LERCCompression_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LERCCompression", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UnityKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UnityKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_GaussianKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("GaussianKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DoGKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DoGKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LoGKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LoGKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BlurKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BlurKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CometKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CometKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BinomialKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BinomialKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LaplacianKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LaplacianKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SobelKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SobelKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_FreiChenKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("FreiChenKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RobertsKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RobertsKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PrewittKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PrewittKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CompassKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CompassKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_KirschKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("KirschKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DiamondKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DiamondKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SquareKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SquareKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RectangleKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RectangleKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_OctagonKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("OctagonKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DiskKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DiskKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PlusKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PlusKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CrossKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CrossKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RingKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RingKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PeaksKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PeaksKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_EdgesKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("EdgesKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CornersKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CornersKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DiagonalsKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DiagonalsKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LineEndsKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LineEndsKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LineJunctionsKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LineJunctionsKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RidgesKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RidgesKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ConvexHullKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ConvexHullKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ThinSEKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ThinSEKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SkeletonKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SkeletonKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ChebyshevKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ChebyshevKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ManhattanKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ManhattanKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_OctagonalKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("OctagonalKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_EuclideanKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("EuclideanKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UserDefinedKernel_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UserDefinedKernel", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedPreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedPreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RotatePreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RotatePreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ShearPreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ShearPreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RollPreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RollPreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_HuePreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("HuePreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SaturationPreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SaturationPreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BrightnessPreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BrightnessPreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_GammaPreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("GammaPreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SpiffPreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SpiffPreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DullPreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DullPreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_GrayscalePreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("GrayscalePreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_QuantizePreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("QuantizePreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DespecklePreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DespecklePreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ReduceNoisePreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ReduceNoisePreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AddNoisePreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AddNoisePreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SharpenPreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SharpenPreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BlurPreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BlurPreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ThresholdPreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ThresholdPreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_EdgeDetectPreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("EdgeDetectPreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SpreadPreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SpreadPreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SolarizePreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SolarizePreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ShadePreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ShadePreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RaisePreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RaisePreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SegmentPreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SegmentPreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SwirlPreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SwirlPreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ImplodePreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ImplodePreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_WavePreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("WavePreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_OilPaintPreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("OilPaintPreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CharcoalDrawingPreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CharcoalDrawingPreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_JPEGPreview_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("JPEGPreview", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UnrecognizedDispose_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UnrecognizedDispose", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedDispose_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedDispose", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_NoneDispose_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("NoneDispose", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BackgroundDispose_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BackgroundDispose", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PreviousDispose_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PreviousDispose", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedEndian_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedEndian", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LSBEndian_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LSBEndian", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MSBEndian_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MSBEndian", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedQuantumAlpha_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedQuantumAlpha", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AssociatedQuantumAlpha_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AssociatedQuantumAlpha", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DisassociatedQuantumAlpha_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DisassociatedQuantumAlpha", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedQuantumFormat_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedQuantumFormat", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_FloatingPointQuantumFormat_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("FloatingPointQuantumFormat", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SignedQuantumFormat_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SignedQuantumFormat", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UnsignedQuantumFormat_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UnsignedQuantumFormat", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AlphaQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AlphaQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BGRAQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BGRAQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BGROQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BGROQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BGRQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BGRQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BlackQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BlackQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BlueQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BlueQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CbYCrAQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CbYCrAQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CbYCrQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CbYCrQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CbYCrYQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CbYCrYQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CMYKAQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CMYKAQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CMYKOQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CMYKOQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CMYKQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CMYKQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CyanQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CyanQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_GrayAlphaQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("GrayAlphaQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_GrayQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("GrayQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_GreenQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("GreenQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_IndexAlphaQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("IndexAlphaQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_IndexQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("IndexQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MagentaQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagentaQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_OpacityQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("OpacityQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RedQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RedQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RGBAQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RGBAQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RGBOQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RGBOQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RGBPadQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RGBPadQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RGBQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RGBQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_YellowQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("YellowQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MultispectralQuantum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MultispectralQuantum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PointFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PointFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BoxFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BoxFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_TriangleFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("TriangleFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_HermiteFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("HermiteFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_HannFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("HannFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_HammingFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("HammingFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BlackmanFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BlackmanFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_GaussianFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("GaussianFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_QuadraticFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("QuadraticFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CubicFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CubicFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CatromFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CatromFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MitchellFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MitchellFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_JincFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("JincFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SincFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SincFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SincFastFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SincFastFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_KaiserFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("KaiserFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_WelchFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("WelchFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ParzenFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ParzenFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BohmanFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BohmanFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BartlettFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BartlettFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LagrangeFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LagrangeFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LanczosFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LanczosFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LanczosSharpFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LanczosSharpFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_Lanczos2Filter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("Lanczos2Filter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_Lanczos2SharpFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("Lanczos2SharpFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RobidouxFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RobidouxFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RobidouxSharpFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RobidouxSharpFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CosineFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CosineFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SplineFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SplineFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LanczosRadiusFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LanczosRadiusFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CubicSplineFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CubicSplineFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SentinelFilter_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SentinelFilter", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BilevelType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BilevelType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_GrayscaleType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("GrayscaleType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_GrayscaleAlphaType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("GrayscaleAlphaType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PaletteType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PaletteType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PaletteAlphaType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PaletteAlphaType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_TrueColorType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("TrueColorType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_TrueColorAlphaType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("TrueColorAlphaType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ColorSeparationType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ColorSeparationType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ColorSeparationAlphaType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ColorSeparationAlphaType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_OptimizeType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("OptimizeType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PaletteBilevelAlphaType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PaletteBilevelAlphaType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedInterlace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedInterlace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_NoInterlace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("NoInterlace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LineInterlace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LineInterlace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PlaneInterlace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PlaneInterlace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PartitionInterlace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PartitionInterlace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_GIFInterlace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("GIFInterlace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_JPEGInterlace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("JPEGInterlace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PNGInterlace_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PNGInterlace", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedOrientation_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedOrientation", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_TopLeftOrientation_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("TopLeftOrientation", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_TopRightOrientation_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("TopRightOrientation", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BottomRightOrientation_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BottomRightOrientation", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BottomLeftOrientation_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BottomLeftOrientation", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LeftTopOrientation_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LeftTopOrientation", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RightTopOrientation_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RightTopOrientation", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RightBottomOrientation_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RightBottomOrientation", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LeftBottomOrientation_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LeftBottomOrientation", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedResolution_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedResolution", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PixelsPerInchResolution_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PixelsPerInchResolution", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PixelsPerCentimeterResolution_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PixelsPerCentimeterResolution", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedTransmitType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedTransmitType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_FileTransmitType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("FileTransmitType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BlobTransmitType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BlobTransmitType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_StreamTransmitType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("StreamTransmitType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ImageTransmitType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ImageTransmitType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedStretch_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedStretch", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_NormalStretch_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("NormalStretch", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UltraCondensedStretch_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UltraCondensedStretch", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ExtraCondensedStretch_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ExtraCondensedStretch", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CondensedStretch_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CondensedStretch", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SemiCondensedStretch_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SemiCondensedStretch", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SemiExpandedStretch_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SemiExpandedStretch", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ExpandedStretch_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ExpandedStretch", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ExtraExpandedStretch_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ExtraExpandedStretch", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UltraExpandedStretch_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UltraExpandedStretch", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AnyStretch_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AnyStretch", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedStyle_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedStyle", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_NormalStyle_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("NormalStyle", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ItalicStyle_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ItalicStyle", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ObliqueStyle_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ObliqueStyle", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AnyStyle_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AnyStyle", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BoldStyle_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BoldStyle", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedAlign_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedAlign", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LeftAlign_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LeftAlign", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CenterAlign_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CenterAlign", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RightAlign_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RightAlign", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedDecoration_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedDecoration", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_NoDecoration_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("NoDecoration", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UnderlineDecoration_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UnderlineDecoration", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_OverlineDecoration_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("OverlineDecoration", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LineThroughDecoration_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LineThroughDecoration", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedDirection_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedDirection", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RightToLeftDirection_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RightToLeftDirection", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LeftToRightDirection_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LeftToRightDirection", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_TopToBottomDirection_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("TopToBottomDirection", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedGradient_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedGradient", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LinearGradient_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LinearGradient", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RadialGradient_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RadialGradient", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedPrimitive_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedPrimitive", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AlphaPrimitive_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AlphaPrimitive", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ArcPrimitive_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ArcPrimitive", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BezierPrimitive_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BezierPrimitive", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CirclePrimitive_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CirclePrimitive", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ColorPrimitive_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ColorPrimitive", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_EllipsePrimitive_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("EllipsePrimitive", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ImagePrimitive_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ImagePrimitive", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LinePrimitive_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LinePrimitive", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PathPrimitive_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PathPrimitive", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PointPrimitive_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PointPrimitive", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PolygonPrimitive_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PolygonPrimitive", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PolylinePrimitive_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PolylinePrimitive", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RectanglePrimitive_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RectanglePrimitive", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RoundRectanglePrimitive_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RoundRectanglePrimitive", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_TextPrimitive_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("TextPrimitive", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedReference_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedReference", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_GradientReference_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("GradientReference", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedWordBreakType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedWordBreakType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_NormalWordBreakType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("NormalWordBreakType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BreakWordBreakType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BreakWordBreakType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedCache_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedCache", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DiskCache_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DiskCache", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DistributedCache_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DistributedCache", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MapCache_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MapCache", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MemoryCache_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MemoryCache", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PingCache_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PingCache", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedErrorMetric_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedErrorMetric", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AbsoluteErrorMetric_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AbsoluteErrorMetric", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_FuzzErrorMetric_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("FuzzErrorMetric", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MeanAbsoluteErrorMetric_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MeanAbsoluteErrorMetric", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MeanErrorPerPixelErrorMetric_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MeanErrorPerPixelErrorMetric", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MeanSquaredErrorMetric_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MeanSquaredErrorMetric", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_NormalizedCrossCorrelationErrorMetric_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("NormalizedCrossCorrelationErrorMetric", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PeakAbsoluteErrorMetric_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PeakAbsoluteErrorMetric", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PeakSignalToNoiseRatioErrorMetric_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PeakSignalToNoiseRatioErrorMetric", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PerceptualHashErrorMetric_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PerceptualHashErrorMetric", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RootMeanSquaredErrorMetric_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RootMeanSquaredErrorMetric", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_StructuralSimilarityErrorMetric_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("StructuralSimilarityErrorMetric", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_StructuralDissimilarityErrorMetric_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("StructuralDissimilarityErrorMetric", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedFormatType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedFormatType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ImplicitFormatType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ImplicitFormatType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ExplicitFormatType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ExplicitFormatType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedComplexOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedComplexOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AddComplexOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AddComplexOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ConjugateComplexOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ConjugateComplexOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DivideComplexOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DivideComplexOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MagnitudePhaseComplexOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagnitudePhaseComplexOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MultiplyComplexOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MultiplyComplexOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RealImaginaryComplexOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RealImaginaryComplexOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SubtractComplexOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SubtractComplexOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickLogFilename_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickLogFilename", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedEvents_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedEvents", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_NoEvents_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("NoEvents", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AccelerateEvent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AccelerateEvent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AnnotateEvent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AnnotateEvent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BlobEvent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BlobEvent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CacheEvent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CacheEvent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CoderEvent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CoderEvent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ConfigureEvent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ConfigureEvent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DeprecateEvent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DeprecateEvent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DrawEvent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DrawEvent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ExceptionEvent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ExceptionEvent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ImageEvent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ImageEvent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LocaleEvent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LocaleEvent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ModuleEvent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ModuleEvent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PixelEvent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PixelEvent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PolicyEvent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PolicyEvent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ResourceEvent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ResourceEvent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_TraceEvent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("TraceEvent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_TransformEvent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("TransformEvent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UserEvent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UserEvent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_WandEvent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("WandEvent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_X11Event_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("X11Event", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CommandEvent_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CommandEvent", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AllEvents_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AllEvents", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickPackageName_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickPackageName", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickCopyright_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickCopyright", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickLibVersion_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickLibVersion", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickLibVersionText_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickLibVersionText", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickLibAddendum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickLibAddendum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickLibInterface_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickLibInterface", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickLibMinInterface_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickLibMinInterface", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickPlatform_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickPlatform", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickppLibVersionText_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickppLibVersionText", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickppLibAddendum_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickppLibAddendum", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickppLibInterface_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickppLibInterface", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickppLibMinInterface_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickppLibMinInterface", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickGitRevision_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickGitRevision", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickReleaseDate_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickReleaseDate", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickAuthoritativeLicense_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickAuthoritativeLicense", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickAuthoritativeURL_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickAuthoritativeURL", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickHomeURL_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickHomeURL", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickQuantumDepth_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickQuantumDepth", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickQuantumRange_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickQuantumRange", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickHDRISupport_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickHDRISupport", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickVersion_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickVersion", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("GetMagickCopyright", _wrap_GetMagickCopyright,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("GetMagickDelegates", _wrap_GetMagickDelegates,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("GetMagickFeatures", _wrap_GetMagickFeatures,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("GetMagickLicense", _wrap_GetMagickLicense,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("GetMagickPackageName", _wrap_GetMagickPackageName,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("GetMagickReleaseDate", _wrap_GetMagickReleaseDate,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MagickImageCoderModule_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickImageCoderModule", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MagickImageFilterModule_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickImageFilterModule", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedCLDeviceType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedCLDeviceType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CpuCLDeviceType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CpuCLDeviceType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_GpuCLDeviceType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("GpuCLDeviceType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedValidate_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedValidate", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_NoValidate_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("NoValidate", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ColorspaceValidate_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ColorspaceValidate", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CompareValidate_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CompareValidate", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CompositeValidate_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CompositeValidate", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ConvertValidate_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ConvertValidate", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_FormatsDiskValidate_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("FormatsDiskValidate", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_FormatsMapValidate_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("FormatsMapValidate", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_FormatsMemoryValidate_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("FormatsMemoryValidate", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_IdentifyValidate_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("IdentifyValidate", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ImportExportValidate_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ImportExportValidate", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MontageValidate_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MontageValidate", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_StreamValidate_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("StreamValidate", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MagickValidate_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickValidate", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AllValidate_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AllValidate", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedPolicyDomain_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedPolicyDomain", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CoderPolicyDomain_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CoderPolicyDomain", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DelegatePolicyDomain_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DelegatePolicyDomain", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_FilterPolicyDomain_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("FilterPolicyDomain", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PathPolicyDomain_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PathPolicyDomain", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ResourcePolicyDomain_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ResourcePolicyDomain", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SystemPolicyDomain_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SystemPolicyDomain", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CachePolicyDomain_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CachePolicyDomain", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ModulePolicyDomain_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ModulePolicyDomain", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedPolicyRights_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedPolicyRights", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_NoPolicyRights_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("NoPolicyRights", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ReadPolicyRights_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ReadPolicyRights", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_WritePolicyRights_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("WritePolicyRights", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ExecutePolicyRights_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ExecutePolicyRights", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AllPolicyRights_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AllPolicyRights", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("GetPolicyValue", _wrap_GetPolicyValue,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("GetPolicyList", _wrap_GetPolicyList,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("IsRightsAuthorized", _wrap_IsRightsAuthorized,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ListPolicyInfo", _wrap_ListPolicyInfo,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("SetMagickSecurityPolicy", _wrap_SetMagickSecurityPolicy,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("SetMagickSecurityPolicyValue", _wrap_SetMagickSecurityPolicyValue,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedRegistryType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedRegistryType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ImageRegistryType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ImageRegistryType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ImageInfoRegistryType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ImageInfoRegistryType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_StringRegistryType_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("StringRegistryType", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedResource_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedResource", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AreaResource_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AreaResource", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DiskResource_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DiskResource", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_FileResource_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("FileResource", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_HeightResource_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("HeightResource", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MapResource_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MapResource", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MemoryResource_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MemoryResource", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ThreadResource_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ThreadResource", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ThrottleResource_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ThrottleResource", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_TimeResource_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("TimeResource", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_WidthResource_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("WidthResource", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ListLengthResource_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ListLengthResource", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AbsEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AbsEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AddEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AddEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AddModulusEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AddModulusEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_AndEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("AndEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CosineEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CosineEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_DivideEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("DivideEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ExponentialEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ExponentialEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_GaussianNoiseEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("GaussianNoiseEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ImpulseNoiseEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ImpulseNoiseEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LaplacianNoiseEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LaplacianNoiseEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LeftShiftEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LeftShiftEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LogEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LogEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MaxEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MaxEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MeanEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MeanEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MedianEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MedianEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MinEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MinEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MultiplicativeNoiseEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MultiplicativeNoiseEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MultiplyEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MultiplyEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_OrEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("OrEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PoissonNoiseEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PoissonNoiseEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PowEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PowEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RightShiftEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RightShiftEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RootMeanSquareEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RootMeanSquareEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SetEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SetEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SineEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SineEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SubtractEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SubtractEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SumEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SumEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ThresholdBlackEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ThresholdBlackEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ThresholdEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ThresholdEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ThresholdWhiteEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ThresholdWhiteEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UniformNoiseEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UniformNoiseEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_XorEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("XorEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_InverseLogEvaluateOperator_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("InverseLogEvaluateOperator", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedStatistic_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedStatistic", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_GradientStatistic_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("GradientStatistic", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MaximumStatistic_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MaximumStatistic", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MeanStatistic_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MeanStatistic", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MedianStatistic_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MedianStatistic", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MinimumStatistic_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MinimumStatistic", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ModeStatistic_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ModeStatistic", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_NonpeakStatistic_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("NonpeakStatistic", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RootMeanSquareStatistic_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RootMeanSquareStatistic", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_StandardDeviationStatistic_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("StandardDeviationStatistic", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ContrastStatistic_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ContrastStatistic", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedPath_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedPath", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MagickPath_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickPath", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RootPath_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RootPath", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_HeadPath_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("HeadPath", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_TailPath_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("TailPath", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BasePath_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BasePath", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ExtensionPath_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ExtensionPath", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SubimagePath_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SubimagePath", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_CanonicalPath_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("CanonicalPath", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_SubcanonicalPath_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("SubcanonicalPath", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_BasePathSansCompressExtension_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("BasePathSansCompressExtension", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UndefinedNoise_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UndefinedNoise", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_UniformNoise_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("UniformNoise", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_GaussianNoise_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("GaussianNoise", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_MultiplicativeGaussianNoise_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MultiplicativeGaussianNoise", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_ImpulseNoise_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("ImpulseNoise", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_LaplacianNoise_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("LaplacianNoise", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_PoissonNoise_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("PoissonNoise", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, MagickCore_RandomNoise_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("RandomNoise", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_MagickWandSignature_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("MagickWandSignature", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("MagickSetSecurityPolicy", _wrap_MagickSetSecurityPolicy,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(MagickCore.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("DisableOpenCL", _wrap_DisableOpenCL,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("EnableOpenCL", _wrap_EnableOpenCL,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("SetRandomSeed", _wrap_SetRandomSeed,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("SetSecurityPolicy", _wrap_SetSecurityPolicy,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_borderGeometryDefault_get, _wrap_borderGeometryDefault_set>("borderGeometryDefault",
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_frameGeometryDefault_get, _wrap_frameGeometryDefault_set>("frameGeometryDefault",
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_raiseGeometryDefault_get, _wrap_raiseGeometryDefault_set>("raiseGeometryDefault",
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("equal", _wrap_Magick__wrap_equal,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("notEqual", _wrap_Magick__wrap_notEqual,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("gt", _wrap_Magick__wrap_gt,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("lt", _wrap_Magick__wrap_lt,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("gte", _wrap_Magick__wrap_gte,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("lte", _wrap_Magick__wrap_lte,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_constant
do {
  Napi::Function f = Napi::Function::New(env, exports_Magick_CoderInfo_header_get);
  Napi::Value value;
  NAPI_CHECK_RESULT(f.Call(0, SWIG_NULLPTR), value);
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Value("Magick_CoderInfo_header", value,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(exports.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("coderInfoList", _wrap_Magick__wrap_coderInfoList,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("appendImagesAsync", _wrap_Magick__wrap_appendImagesAsync,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("appendImages", _wrap_Magick__wrap_appendImages,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("averageImages", _wrap_averageImages,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("flattenImages", _wrap_flattenImages,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("mosaicImages", _wrap_mosaicImages,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("coalesceImages", _wrap_coalesceImages,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("deconstructImages", _wrap_deconstructImages,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("forwardFourierTransformImageAsync", _wrap_Magick__wrap_forwardFourierTransformImageAsync,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("forwardFourierTransformImage", _wrap_Magick__wrap_forwardFourierTransformImage,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("montageImages", _wrap_montageImages,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("morphImages", _wrap_morphImages,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("readImagesAsync", _wrap_Magick__wrap_readImagesAsync,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("readImages", _wrap_Magick__wrap_readImages,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("writeImagesAsync", _wrap_Magick__wrap_writeImagesAsync,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("writeImages", _wrap_Magick__wrap_writeImages,
    static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable));
  NAPI_CHECK_MAYBE(Magick.DefineProperty(pd));
} while (0);


  return exports;
  goto fail;
fail:
  return Napi::Object();
}

NODE_API_MODULE(magickwand, Init)
