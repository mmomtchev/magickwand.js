/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG JSE (https://www.swig.org).
 * Version 5.0.3
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#include "swig/magickwand-js.h"

/* Class: CoderInfo (_Magick_CoderInfo) */
// jsnapi_getclass
Napi::Function _Magick_CoderInfo_inst::GetClass(Napi::Env env) {
  std::map<std::string, _Magick_CoderInfo_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_Magick_CoderInfo_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_Magick_CoderInfo_inst>::DefineClass(env, "CoderInfo", symbolTable);
}

void _Magick_CoderInfo_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _Magick_CoderInfo_templ::PropertyDescriptor> &members,
  std::map<std::string, _Magick_CoderInfo_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("clone");
  members.insert({
    "clone",
      _Magick_CoderInfo_templ::InstanceMethod("clone",
        &_Magick_CoderInfo_templ::_wrap_Magick_CoderInfo_clone,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("canReadMultithreaded");
  members.insert({
    "canReadMultithreaded",
      _Magick_CoderInfo_templ::InstanceMethod("canReadMultithreaded",
        &_Magick_CoderInfo_templ::_wrap_Magick_CoderInfo_canReadMultithreaded,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("canWriteMultithreaded");
  members.insert({
    "canWriteMultithreaded",
      _Magick_CoderInfo_templ::InstanceMethod("canWriteMultithreaded",
        &_Magick_CoderInfo_templ::_wrap_Magick_CoderInfo_canWriteMultithreaded,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("description");
  members.insert({
    "description",
      _Magick_CoderInfo_templ::InstanceMethod("description",
        &_Magick_CoderInfo_templ::_wrap_Magick_CoderInfo_description,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("isMultiFrame");
  members.insert({
    "isMultiFrame",
      _Magick_CoderInfo_templ::InstanceMethod("isMultiFrame",
        &_Magick_CoderInfo_templ::_wrap_Magick_CoderInfo_isMultiFrame,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("isReadable");
  members.insert({
    "isReadable",
      _Magick_CoderInfo_templ::InstanceMethod("isReadable",
        &_Magick_CoderInfo_templ::_wrap_Magick_CoderInfo_isReadable,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("isWritable");
  members.insert({
    "isWritable",
      _Magick_CoderInfo_templ::InstanceMethod("isWritable",
        &_Magick_CoderInfo_templ::_wrap_Magick_CoderInfo_isWritable,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("mimeType");
  members.insert({
    "mimeType",
      _Magick_CoderInfo_templ::InstanceMethod("mimeType",
        &_Magick_CoderInfo_templ::_wrap_Magick_CoderInfo_mimeType,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("module");
  members.insert({
    "module",
      _Magick_CoderInfo_templ::InstanceMethod("module",
        &_Magick_CoderInfo_templ::_wrap_Magick_CoderInfo_module,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("name");
  members.insert({
    "name",
      _Magick_CoderInfo_templ::InstanceMethod("name",
        &_Magick_CoderInfo_templ::_wrap_Magick_CoderInfo_name,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("unregister");
  members.insert({
    "unregister",
      _Magick_CoderInfo_templ::InstanceMethod("unregister",
        &_Magick_CoderInfo_templ::_wrap_Magick_CoderInfo_unregister,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  // jsnapi_register_static_constant
  staticMembers.erase("AnyMatch");
  staticMembers.insert({
    "AnyMatch",
      StaticAccessor("AnyMatch",
        &_Magick_CoderInfo_templ::Magick_CoderInfo_AnyMatch_get,
        &JS_veto_set_static_variable,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_static_constant
  staticMembers.erase("TrueMatch");
  staticMembers.insert({
    "TrueMatch",
      StaticAccessor("TrueMatch",
        &_Magick_CoderInfo_templ::Magick_CoderInfo_TrueMatch_get,
        &JS_veto_set_static_variable,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_static_constant
  staticMembers.erase("FalseMatch");
  staticMembers.insert({
    "FalseMatch",
      StaticAccessor("FalseMatch",
        &_Magick_CoderInfo_templ::Magick_CoderInfo_FalseMatch_get,
        &JS_veto_set_static_variable,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

